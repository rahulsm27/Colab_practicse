{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6649,"databundleVersionId":860670,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-11T11:40:26.385623Z","iopub.execute_input":"2024-04-11T11:40:26.386022Z","iopub.status.idle":"2024-04-11T11:40:26.391129Z","shell.execute_reply.started":"2024-04-11T11:40:26.385979Z","shell.execute_reply":"2024-04-11T11:40:26.389991Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## STEP1 : Import Libraries and Load Dataset","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 100)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\n\n\nfrom tqdm import tqdm\nimport gc\n\n\nfrom catboost import CatBoostRegressor\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:40:42.085536Z","iopub.execute_input":"2024-04-11T11:40:42.086181Z","iopub.status.idle":"2024-04-11T11:40:42.090870Z","shell.execute_reply.started":"2024-04-11T11:40:42.086152Z","shell.execute_reply":"2024-04-11T11:40:42.090055Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load the properties dataset\n# This file constains properties with their home features for their respective year\n# This cell takes time to execute\n\nprint(\"Loading Properties dataset..\")\nproperties2016 = pd.read_csv('/kaggle/input/zillow-prize-1/properties_2016.csv', low_memory = False)\nproperties2017 = pd.read_csv('/kaggle/input/zillow-prize-1/properties_2017.csv', low_memory = False)\nprint(\" Properties dataset loaded\")","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:21:30.468279Z","iopub.execute_input":"2024-04-11T11:21:30.469053Z","iopub.status.idle":"2024-04-11T11:22:25.395670Z","shell.execute_reply.started":"2024-04-11T11:21:30.469001Z","shell.execute_reply":"2024-04-11T11:22:25.392448Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# The file contain transaction details i.e. the date of sale and sale value\n#train_2016.csv - the training set with transactions from 1/1/2016 to 12/31/2016\n#train_2017.csv - the training set with transactions from 1/1/2017 to 9/15/2017\n\nprint('Loading transaction dataset..')\ntrain2016 = pd.read_csv('/kaggle/input/zillow-prize-1/train_2016_v2.csv', parse_dates=['transactiondate'], low_memory=False)\ntrain2017 = pd.read_csv('/kaggle/input/zillow-prize-1/train_2017.csv', parse_dates=['transactiondate'], low_memory=False)\nprint('Transaction dataset loaded')","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:25.400325Z","iopub.execute_input":"2024-04-11T11:22:25.403056Z","iopub.status.idle":"2024-04-11T11:22:25.610263Z","shell.execute_reply.started":"2024-04-11T11:22:25.402945Z","shell.execute_reply":"2024-04-11T11:22:25.606485Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# The processing of some of the algorithms can be made quick if data representation is made in int/float32 instead of int/float64.\nfor c, dtype in zip(properties2016.columns, properties2016.dtypes):\n    if dtype == np.float64:        \n        properties2016[c] = properties2016[c].astype(np.float32)\n    if dtype == np.int64:\n        properties2016[c] = properties2016[c].astype(np.int32)\n        \nfor c, dtype in zip(properties2017.columns, properties2017.dtypes):\n    if dtype == np.float64:        \n        properties2017[c] = properties2017[c].astype(np.float32)\n    if dtype == np.int64:\n        properties2017[c] = properties2017[c].astype(np.int32)\n\n\nfor column in train2016.columns:\n    if train2016[column].dtype == int:\n        train2016[column] = train2016[column].astype(np.int32)\n    if train2016[column].dtype == float:\n        train2016[column] = train2016[column].astype(np.float32)\n        \nfor column in train2017.columns:\n    if train2017[column].dtype == int:\n        train2017[column] = train2017[column].astype(np.int32)\n    if train2017[column].dtype == float:\n        train2017[column] = train2017[column].astype(np.float32)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:25.614667Z","iopub.execute_input":"2024-04-11T11:22:25.616212Z","iopub.status.idle":"2024-04-11T11:22:27.422466Z","shell.execute_reply.started":"2024-04-11T11:22:25.616100Z","shell.execute_reply":"2024-04-11T11:22:27.419779Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"In this competition, Zillow is asking us to predict the \nlog-error between their Zestimate and the actual sale price, \ngiven all the features of a home. The log error is defined as\n\n𝑙𝑜𝑔𝑒𝑟𝑟𝑜𝑟=𝑙𝑜𝑔(𝑍𝑒𝑠𝑡𝑖𝑚𝑎𝑡𝑒)−𝑙𝑜𝑔(𝑆𝑎𝑙𝑒𝑃𝑟𝑖𝑐𝑒)","metadata":{}},{"cell_type":"code","source":"\n# We need to predict 6 time points for all properties: October 2016 (201610), \n#November 2016 (201611), December 2016 (201612), October 2017 (201710),\n#November 2017 (201711), and December 2017 (201712).\n\nprint('Loading submission sample file')\nsample_submission = pd.read_csv('/kaggle/input/zillow-prize-1/sample_submission.csv', low_memory = False)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:27.429735Z","iopub.execute_input":"2024-04-11T11:22:27.431757Z","iopub.status.idle":"2024-04-11T11:22:31.299390Z","shell.execute_reply.started":"2024-04-11T11:22:27.431560Z","shell.execute_reply":"2024-04-11T11:22:31.295924Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sample_submission.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:31.305031Z","iopub.execute_input":"2024-04-11T11:22:31.308486Z","iopub.status.idle":"2024-04-11T11:22:31.345346Z","shell.execute_reply.started":"2024-04-11T11:22:31.308267Z","shell.execute_reply":"2024-04-11T11:22:31.340774Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(sample_submission)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:31.350577Z","iopub.execute_input":"2024-04-11T11:22:31.352370Z","iopub.status.idle":"2024-04-11T11:22:31.382337Z","shell.execute_reply.started":"2024-04-11T11:22:31.352241Z","shell.execute_reply":"2024-04-11T11:22:31.374144Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## STEP 2 : EDA &  Feature Engineering","metadata":{}},{"cell_type":"code","source":"# Lets check the basic attributes of all the four datasets like \n#shape, number of null values and few records to get a sense of the data","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:31.388283Z","iopub.execute_input":"2024-04-11T11:22:31.391394Z","iopub.status.idle":"2024-04-11T11:22:31.405716Z","shell.execute_reply.started":"2024-04-11T11:22:31.391276Z","shell.execute_reply":"2024-04-11T11:22:31.401128Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nproperties2016.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:31.410016Z","iopub.execute_input":"2024-04-11T11:22:31.411483Z","iopub.status.idle":"2024-04-11T11:22:31.672906Z","shell.execute_reply.started":"2024-04-11T11:22:31.411353Z","shell.execute_reply":"2024-04-11T11:22:31.669160Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nproperties2016.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:31.678138Z","iopub.execute_input":"2024-04-11T11:22:31.679083Z","iopub.status.idle":"2024-04-11T11:22:31.701579Z","shell.execute_reply.started":"2024-04-11T11:22:31.679004Z","shell.execute_reply":"2024-04-11T11:22:31.695565Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"properties2016.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:31.723555Z","iopub.execute_input":"2024-04-11T11:22:31.724879Z","iopub.status.idle":"2024-04-11T11:22:45.677477Z","shell.execute_reply.started":"2024-04-11T11:22:31.724715Z","shell.execute_reply":"2024-04-11T11:22:45.674138Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"(properties2016.isnull().sum()/len(properties2016)*100).sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:45.680648Z","iopub.execute_input":"2024-04-11T11:22:45.681197Z","iopub.status.idle":"2024-04-11T11:22:47.299853Z","shell.execute_reply.started":"2024-04-11T11:22:45.681131Z","shell.execute_reply":"2024-04-11T11:22:47.296949Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# LEts check the size of the dataset\nproperties2017.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:47.304310Z","iopub.execute_input":"2024-04-11T11:22:47.305251Z","iopub.status.idle":"2024-04-11T11:22:47.324861Z","shell.execute_reply.started":"2024-04-11T11:22:47.305220Z","shell.execute_reply":"2024-04-11T11:22:47.321341Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"properties2017.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:22:47.329566Z","iopub.execute_input":"2024-04-11T11:22:47.332761Z","iopub.status.idle":"2024-04-11T11:23:00.162214Z","shell.execute_reply.started":"2024-04-11T11:22:47.332690Z","shell.execute_reply":"2024-04-11T11:23:00.160999Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#checking percentage of null values\n(properties2017.isnull().sum()/len(properties2017) * 100).sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:00.163558Z","iopub.execute_input":"2024-04-11T11:23:00.164283Z","iopub.status.idle":"2024-04-11T11:23:00.998969Z","shell.execute_reply.started":"2024-04-11T11:23:00.164251Z","shell.execute_reply":"2024-04-11T11:23:00.997859Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"properties2017[properties2017['longitude'].isnull()].head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:01.000130Z","iopub.execute_input":"2024-04-11T11:23:01.000980Z","iopub.status.idle":"2024-04-11T11:23:01.051702Z","shell.execute_reply.started":"2024-04-11T11:23:01.000951Z","shell.execute_reply":"2024-04-11T11:23:01.050403Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train2016.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:01.053154Z","iopub.execute_input":"2024-04-11T11:23:01.053556Z","iopub.status.idle":"2024-04-11T11:23:01.064417Z","shell.execute_reply.started":"2024-04-11T11:23:01.053519Z","shell.execute_reply":"2024-04-11T11:23:01.063326Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(train2016)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:01.066056Z","iopub.execute_input":"2024-04-11T11:23:01.066469Z","iopub.status.idle":"2024-04-11T11:23:01.077038Z","shell.execute_reply.started":"2024-04-11T11:23:01.066432Z","shell.execute_reply":"2024-04-11T11:23:01.075983Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train2017.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:01.078522Z","iopub.execute_input":"2024-04-11T11:23:01.079099Z","iopub.status.idle":"2024-04-11T11:23:01.093558Z","shell.execute_reply.started":"2024-04-11T11:23:01.079061Z","shell.execute_reply":"2024-04-11T11:23:01.092840Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(train2017)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:01.094787Z","iopub.execute_input":"2024-04-11T11:23:01.095094Z","iopub.status.idle":"2024-04-11T11:23:01.101871Z","shell.execute_reply.started":"2024-04-11T11:23:01.095067Z","shell.execute_reply":"2024-04-11T11:23:01.100868Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Let us add date features as it is important for analysis. \ndef add_date_features(df):\n    df[\"transaction_year\"] = df[\"transactiondate\"].dt.year\n    df[\"transaction_month\"] = (df[\"transactiondate\"].dt.year - 2016)*12 + df[\"transactiondate\"].dt.month\n    df[\"transaction_day\"] = df[\"transactiondate\"].dt.day\n    df[\"transaction_quarter\"] = (df[\"transactiondate\"].dt.year - 2016)*4 +df[\"transactiondate\"].dt.quarter\n    df.drop([\"transactiondate\"], inplace=True, axis=1)\n    return df\n\ntrain2016 = add_date_features(train2016)\ntrain2017 = add_date_features(train2017)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:01.103306Z","iopub.execute_input":"2024-04-11T11:23:01.103876Z","iopub.status.idle":"2024-04-11T11:23:01.152061Z","shell.execute_reply.started":"2024-04-11T11:23:01.103840Z","shell.execute_reply":"2024-04-11T11:23:01.150905Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Lets merge and prepare final dataset. We will perform any feature engineering on this","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:08:19.436121Z","iopub.execute_input":"2024-04-11T11:08:19.436507Z","iopub.status.idle":"2024-04-11T11:08:19.440727Z","shell.execute_reply.started":"2024-04-11T11:08:19.436471Z","shell.execute_reply":"2024-04-11T11:08:19.439938Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Preparing final dataset')\ntrain2016 = pd.merge(train2016, properties2016, how = 'left', on = 'parcelid')\ntrain2017 = pd.merge(train2017, properties2017, how = 'left', on = 'parcelid')\n\ntrain_df = pd.concat([train2016, train2017], axis = 0)\ntest_df = pd.merge(sample_submission[['ParcelId']], properties2016.rename(columns = {'parcelid': 'ParcelId'}), how = 'left', on = 'ParcelId')\n\n#del properties2016, properties2017, train2016, train2017\n#gc.collect();","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:01.153754Z","iopub.execute_input":"2024-04-11T11:23:01.154158Z","iopub.status.idle":"2024-04-11T11:23:08.159120Z","shell.execute_reply.started":"2024-04-11T11:23:01.154121Z","shell.execute_reply":"2024-04-11T11:23:08.158121Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nimport ydata_profiling as yp \nprofile = yp.ProfileReport(train_df) ","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:08.160468Z","iopub.execute_input":"2024-04-11T11:23:08.161887Z","iopub.status.idle":"2024-04-11T11:23:32.908249Z","shell.execute_reply.started":"2024-04-11T11:23:08.161837Z","shell.execute_reply":"2024-04-11T11:23:32.907299Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## takes 10-12 minutes\n#profile.to_notebook_iframe() \n## Save to html\n#profile.to_file(\"report\")","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:32.909372Z","iopub.execute_input":"2024-04-11T11:23:32.909955Z","iopub.status.idle":"2024-04-11T11:23:32.914137Z","shell.execute_reply.started":"2024-04-11T11:23:32.909925Z","shell.execute_reply":"2024-04-11T11:23:32.913134Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# There are lot of null values let us treate each of them\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:23:32.929138Z","iopub.execute_input":"2024-04-11T11:23:32.929912Z","iopub.status.idle":"2024-04-11T11:23:32.948364Z","shell.execute_reply.started":"2024-04-11T11:23:32.929882Z","shell.execute_reply":"2024-04-11T11:23:32.947177Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n#checking percentage of null values in final dataset\n(train_df.isnull().sum() / len(train_df) * 100).sort_values()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:36:31.546850Z","iopub.execute_input":"2024-04-11T11:36:31.547275Z","iopub.status.idle":"2024-04-11T11:36:31.599918Z","shell.execute_reply.started":"2024-04-11T11:36:31.547246Z","shell.execute_reply":"2024-04-11T11:36:31.598719Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(train_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T09:56:20.907419Z","iopub.execute_input":"2024-04-11T09:56:20.907873Z","iopub.status.idle":"2024-04-11T09:56:20.916564Z","shell.execute_reply.started":"2024-04-11T09:56:20.907842Z","shell.execute_reply":"2024-04-11T09:56:20.915342Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'airconditioningtypeid'\nprint(f\"Column : {i}\")\nprint(\"*\"*50)\n\nprint(\"Value counts before missing imputation\")\nprint(train_df[i].value_counts())\n\n\ntrain_df[i].fillna(6.0,inplace=True) # filling with 'other' as per data dictionary 6 indicates other  \ntest_df[i].fillna(6.0,inplace=True)\n\nprint(\"*\"*50)\nprint(\"Value counts after missing imputation\")\nprint(train_df[i].value_counts())","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:43:47.040736Z","iopub.execute_input":"2024-04-11T11:43:47.041448Z","iopub.status.idle":"2024-04-11T11:43:47.060385Z","shell.execute_reply.started":"2024-04-11T11:43:47.041402Z","shell.execute_reply":"2024-04-11T11:43:47.059531Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df[train_df['poolcnt'] == 1][['poolcnt','pooltypeid7','poolsizesum','pooltypeid10']].head(5)\n\n# we will keep only poolcnt column.Drop other columns related to pool. We will fill 0 for poolcnt columns wheren it is nan assuming no pools\ntrain_df['poolcnt'].fillna(0,inplace = True)\ntest_df['poolcnt'].fillna(0,inplace =True)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:34:53.567408Z","iopub.execute_input":"2024-04-11T11:34:53.568357Z","iopub.status.idle":"2024-04-11T11:34:53.597071Z","shell.execute_reply.started":"2024-04-11T11:34:53.568316Z","shell.execute_reply":"2024-04-11T11:34:53.595802Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(train_df['taxdelinquencyflag'].value_counts())\nprint(train_df['taxdelinquencyyear'].value_counts().sum())\n\n# We observer that no of records in both the columns is same. This means the flag is 'Y' only when there is an overdue of tax. We can fill other rows with N for delinquency column and 0 for year column\n\ntrain_df['taxdelinquencyflag'].fillna('N',inplace=True)\ntest_df['taxdelinquencyflag'].fillna('N',inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:32:44.828995Z","iopub.execute_input":"2024-04-11T11:32:44.829411Z","iopub.status.idle":"2024-04-11T11:32:44.836197Z","shell.execute_reply.started":"2024-04-11T11:32:44.829378Z","shell.execute_reply":"2024-04-11T11:32:44.834946Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# no of missing values is same in garagecarcnt and sqft column. SO we will fill o in missing values assuming no garage\ntrain_df['garagecarcnt'].value_counts()\ntrain_df['garagecarcnt'].fillna(0,inplace = True)\ntrain_df['garagecarcnt'].fillna(0,inplace = True)\n\ntrain_df['garagetotalsqft'].fillna(0,inplace = True)\ntrain_df['garagetotalsqft'].fillna(0,inplace = True)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:35:10.504822Z","iopub.execute_input":"2024-04-11T11:35:10.505190Z","iopub.status.idle":"2024-04-11T11:35:10.516762Z","shell.execute_reply.started":"2024-04-11T11:35:10.505164Z","shell.execute_reply":"2024-04-11T11:35:10.515775Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df[train_df['longitude'].isnull()].head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:18:38.927499Z","iopub.execute_input":"2024-04-11T11:18:38.929964Z","iopub.status.idle":"2024-04-11T11:18:38.980305Z","shell.execute_reply.started":"2024-04-11T11:18:38.929914Z","shell.execute_reply":"2024-04-11T11:18:38.979166Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\ni = 'fireplaceflag'\nprint(f\"Column : {i}\")\nprint(\"*\"*50)\n\nprint(\"Value counts before missing imputation\")\nprint(train_df[i].value_counts())\n\n# it means we only have data for true values. Data for false is missing. Therefore we can replace nan with false\n\ntrain_df[i].fillna(False,inplace=True) \ntest_df[i].fillna(False,inplace=True)\n\nprint(\"*\"*50)\nprint(\"Value counts after missing imputation\")\nprint(train_df[i].value_counts())","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Dropping rows having all NA values except parcelid\ntrain_df.dropna(subset=[\"longitude\"], inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:25:12.949419Z","iopub.execute_input":"2024-04-11T11:25:12.950332Z","iopub.status.idle":"2024-04-11T11:25:13.009089Z","shell.execute_reply.started":"2024-04-11T11:25:12.950289Z","shell.execute_reply":"2024-04-11T11:25:13.007959Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"null_columns = list(train_df.columns[train_df.isnull().any()])\nprint(\"Total columns having null value \", len(null_columns))\nprint()\nprint(null_columns)\n\n\n# Drop columns having greter than 60 % missing values\nmissing_perc_thresh = 0.60\nexclude_missing = []\nnum_rows = train_df.shape[0]\nfor c in train_df.columns:\n    num_missing = train_df[c].isnull().sum()\n    if num_missing == 0:\n        continue\n    missing_frac = num_missing / float(num_rows)\n    if missing_frac > missing_perc_thresh:\n        exclude_missing.append(c)\nprint()\nprint(\"We exclude: %s\" % len(exclude_missing))\nprint(exclude_missing)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:49:30.783755Z","iopub.execute_input":"2024-04-11T11:49:30.784153Z","iopub.status.idle":"2024-04-11T11:49:30.877556Z","shell.execute_reply.started":"2024-04-11T11:49:30.784125Z","shell.execute_reply":"2024-04-11T11:49:30.876281Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df.drop(['propertycountylandusecode'],inplace= True, axis=1)\ntest_df.drop(['propertycountylandusecode'],inplace= True,axis=1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print (\"Define training features !!\")\nexclude_other = ['parcelid', 'logerror','propertyzoningdesc']\ntrain_features = []\nfor c in train_df.columns:\n    if c not in exclude_missing and c not in exclude_other :\n        train_features.append(c)\nprint(\"We use these for training: %s\" % len(train_features))","metadata":{"execution":{"iopub.status.busy":"2024-04-11T12:25:46.731708Z","iopub.execute_input":"2024-04-11T12:25:46.732127Z","iopub.status.idle":"2024-04-11T12:25:46.739141Z","shell.execute_reply.started":"2024-04-11T12:25:46.732097Z","shell.execute_reply":"2024-04-11T12:25:46.738030Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Checking columsn that we plan to drop","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i='storytypeid'\nprint(train_df[i].value_counts())\n# We will drop this column as number of na is too high\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:48:59.893247Z","iopub.execute_input":"2024-04-11T11:48:59.894070Z","iopub.status.idle":"2024-04-11T11:48:59.900862Z","shell.execute_reply.started":"2024-04-11T11:48:59.894032Z","shell.execute_reply":"2024-04-11T11:48:59.899885Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'architecturalstyletypeid'\nprint(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:49:07.073371Z","iopub.execute_input":"2024-04-11T11:49:07.073788Z","iopub.status.idle":"2024-04-11T11:49:07.088370Z","shell.execute_reply.started":"2024-04-11T11:49:07.073756Z","shell.execute_reply":"2024-04-11T11:49:07.087482Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'basementsqft'\n#print(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\nif i not in to_drop:\n    to_drop.append(i)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'buildingclasstypeid'\nprint(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:49:17.011499Z","iopub.execute_input":"2024-04-11T11:49:17.011911Z","iopub.status.idle":"2024-04-11T11:49:17.019937Z","shell.execute_reply.started":"2024-04-11T11:49:17.011881Z","shell.execute_reply":"2024-04-11T11:49:17.018488Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# We will drop taxlinquencyyear as we already have the flag column\n\ni ='taxdelinquencyyear'\nprint(train_df[i].value_counts())\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:51:47.936727Z","iopub.execute_input":"2024-04-11T11:51:47.937154Z","iopub.status.idle":"2024-04-11T11:51:47.945264Z","shell.execute_reply.started":"2024-04-11T11:51:47.937122Z","shell.execute_reply":"2024-04-11T11:51:47.943852Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Overall assessment of condition of the building from best (lowest) to worst (highest)\ni = 'buildingqualitytypeid'\nprint(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T11:52:12.553492Z","iopub.execute_input":"2024-04-11T11:52:12.553918Z","iopub.status.idle":"2024-04-11T11:52:12.563889Z","shell.execute_reply.started":"2024-04-11T11:52:12.553888Z","shell.execute_reply":"2024-04-11T11:52:12.563000Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'decktypeid'\nprint(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\nif i not in to_drop:\n    to_drop.append(i)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T08:32:06.830084Z","iopub.execute_input":"2024-04-11T08:32:06.830800Z","iopub.status.idle":"2024-04-11T08:32:06.840524Z","shell.execute_reply.started":"2024-04-11T08:32:06.830762Z","shell.execute_reply":"2024-04-11T08:32:06.839004Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'storytypeid'\nprint(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\nif i not in to_drop:\n    to_drop.append(i)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T08:32:34.529093Z","iopub.execute_input":"2024-04-11T08:32:34.530345Z","iopub.status.idle":"2024-04-11T08:32:34.539984Z","shell.execute_reply.started":"2024-04-11T08:32:34.530290Z","shell.execute_reply":"2024-04-11T08:32:34.538562Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# We will drop all pool related column as we have pool cnt colun\n# We will drop all other area related column","metadata":{"execution":{"iopub.status.busy":"2024-04-11T08:33:00.981863Z","iopub.execute_input":"2024-04-11T08:33:00.982290Z","iopub.status.idle":"2024-04-11T08:33:00.996237Z","shell.execute_reply.started":"2024-04-11T08:33:00.982256Z","shell.execute_reply":"2024-04-11T08:33:00.995180Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#train_df['propertycountylandusecode'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:28:57.591158Z","iopub.execute_input":"2024-04-11T13:28:57.591581Z","iopub.status.idle":"2024-04-11T13:28:57.598195Z","shell.execute_reply.started":"2024-04-11T13:28:57.591552Z","shell.execute_reply":"2024-04-11T13:28:57.596845Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ulimit = np.percentile(train_df.logerror.values, 99) \nllimit = np.percentile(train_df.logerror.values, 1) \ntrain_df['logerror'].loc[train_df['logerror'] > ulimit] = ulimit\ntrain_df['logerror'].loc[train_df['logerror'] < llimit] = llimit\nsns.histplot(train2016['logerror'],bins=50)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:09:02.780212Z","iopub.execute_input":"2024-04-11T04:09:02.781752Z","iopub.status.idle":"2024-04-11T04:09:03.223546Z","shell.execute_reply.started":"2024-04-11T04:09:02.781689Z","shell.execute_reply":"2024-04-11T04:09:03.222526Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (12,12))\nsns.jointplot(x = train_df.latitude.values, y = train_df.longitude.values, size = 10)\nplt.ylabel('Longitude', fontsize = 12)\nplt.xlabel('Latitude', fontsize = 12)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:17:29.833323Z","iopub.execute_input":"2024-04-11T04:17:29.834557Z","iopub.status.idle":"2024-04-11T04:18:47.518003Z","shell.execute_reply.started":"2024-04-11T04:17:29.834511Z","shell.execute_reply":"2024-04-11T04:18:47.516403Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n\n#profile.to_file('eda_report.html')","metadata":{"execution":{"iopub.status.busy":"2024-04-11T06:56:45.321577Z","iopub.execute_input":"2024-04-11T06:56:45.323238Z","iopub.status.idle":"2024-04-11T06:56:45.333516Z","shell.execute_reply.started":"2024-04-11T06:56:45.323179Z","shell.execute_reply":"2024-04-11T06:56:45.331730Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# #life of property\n# df_train['N-life'] = 2018 - df_train['yearbuilt']\n\n# #error in calculation of the finished living area of home\n# df_train['N-LivingAreaError'] = df_train['calculatedfinishedsquarefeet']/df_train['finishedsquarefeet12']\n\n# #proportion of living area\n# df_train['N-LivingAreaProp'] = df_train['calculatedfinishedsquarefeet']/df_train['lotsizesquarefeet']\n# df_train['N-LivingAreaProp2'] = df_train['finishedsquarefeet12']/df_train['finishedsquarefeet15']\n\n# #Amout of extra space\n# df_train['N-ExtraSpace'] = df_train['lotsizesquarefeet'] - df_train['calculatedfinishedsquarefeet'] \n# df_train['N-ExtraSpace-2'] = df_train['finishedsquarefeet15'] - df_train['finishedsquarefeet12'] \n\n# #Total number of rooms\n# df_train['N-TotalRooms'] = df_train['bathroomcnt']*df_train['bedroomcnt']\n\n# #Average room size\n# df_train['N-AvRoomSize'] = df_train['calculatedfinishedsquarefeet']/df_train['roomcnt'] \n\n# # Number of Extra rooms\n# df_train['N-ExtraRooms'] = df_train['roomcnt'] - df_train['N-TotalRooms'] \n\n# #Ratio of the built structure value to land area\n# df_train['N-ValueProp'] = df_train['structuretaxvaluedollarcnt']/df_train['landtaxvaluedollarcnt']\n\n# #Does property have a garage, pool or hot tub and AC?\n# df_train['N-GarPoolAC'] = ((df_train['garagecarcnt']>0) & (df_train['pooltypeid10']>0) & (df_train['airconditioningtypeid']!=5))*1 \n\n# df_train[\"N-location\"] = df_train[\"latitude\"] + df_train[\"longitude\"]\n# df_train[\"N-location-2\"] = df_train[\"latitude\"]*df_train[\"longitude\"]\n# df_train[\"N-location-2round\"] = df_train[\"N-location-2\"].round(-4)\n\n# df_train[\"N-latitude-round\"] = df_train[\"latitude\"].round(-4)\n# df_train[\"N-longitude-round\"] = df_train[\"longitude\"].round(-4)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:13.578140Z","iopub.execute_input":"2024-04-11T03:06:13.579732Z","iopub.status.idle":"2024-04-11T03:06:13.640723Z","shell.execute_reply.started":"2024-04-11T03:06:13.579670Z","shell.execute_reply":"2024-04-11T03:06:13.639056Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:16.258844Z","iopub.execute_input":"2024-04-11T03:06:16.259578Z","iopub.status.idle":"2024-04-11T03:06:20.105095Z","shell.execute_reply.started":"2024-04-11T03:06:16.259536Z","shell.execute_reply":"2024-04-11T03:06:20.103645Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T12:24:51.585562Z","iopub.execute_input":"2024-04-11T12:24:51.586245Z","iopub.status.idle":"2024-04-11T12:24:52.366726Z","shell.execute_reply.started":"2024-04-11T12:24:51.586212Z","shell.execute_reply":"2024-04-11T12:24:52.365669Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"del num_rows, missing_perc_thresh\ngc.collect();","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:41.273500Z","iopub.execute_input":"2024-04-11T03:06:41.274777Z","iopub.status.idle":"2024-04-11T03:06:41.478086Z","shell.execute_reply.started":"2024-04-11T03:06:41.274725Z","shell.execute_reply":"2024-04-11T03:06:41.476642Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## STEP 3 : Model training and Evaluation","metadata":{}},{"cell_type":"code","source":"print (\"Training time !!\")\nX_train = train_df[train_features]\ny_train = train_df.logerror\nprint(X_train.shape, y_train.shape)\n\ntest_df['transactiondate'] = pd.Timestamp('2016-12-01') \ntest_df = add_date_features(test_df)\nX_test = test_df[train_features]\nprint(X_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T12:25:51.154033Z","iopub.execute_input":"2024-04-11T12:25:51.154467Z","iopub.status.idle":"2024-04-11T12:25:52.410010Z","shell.execute_reply.started":"2024-04-11T12:25:51.154434Z","shell.execute_reply":"2024-04-11T12:25:52.408793Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # for i in list(X_train.columns):\n# #     if X_train[i].dtype == 'float64' :\n# #        X_train[i] = X_train[i].astype(int)\n# num_ensembles = 5\n# y_pred = 0.0\n# for i in tqdm(range(num_ensembles)):\n#     model = CatBoostRegressor(\n#         iterations=630, learning_rate=0.3,\n#         depth=6, l2_leaf_reg=3,\n#         loss_function='MAE',\n#         eval_metric='MAE',\n#         random_seed=i)\n#     model.fit(\n#         X_train, y_train,\n#         cat_features=cat_feature_inds)\n#     y_pred += model.predict(X_test)\n# y_pred /= num_ensembles","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:16:06.381713Z","iopub.execute_input":"2024-04-11T03:16:06.382165Z","iopub.status.idle":"2024-04-11T03:16:06.436951Z","shell.execute_reply.started":"2024-04-11T03:16:06.382135Z","shell.execute_reply":"2024-04-11T03:16:06.435617Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\ncat_columns = ['taxdelinquencyflag']\n\nfor i in cat_columns:\n    le = LabelEncoder()\n    X_train[i]= le.fit_transform(X_train[i])\n    X_test[i] = le.transform(X_test[i])\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T12:29:10.573813Z","iopub.execute_input":"2024-04-11T12:29:10.574609Z","iopub.status.idle":"2024-04-11T12:29:11.106439Z","shell.execute_reply.started":"2024-04-11T12:29:10.574561Z","shell.execute_reply":"2024-04-11T12:29:11.105165Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train['taxdelinquencyflag'].head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T12:29:13.145142Z","iopub.execute_input":"2024-04-11T12:29:13.145513Z","iopub.status.idle":"2024-04-11T12:29:13.154970Z","shell.execute_reply.started":"2024-04-11T12:29:13.145486Z","shell.execute_reply":"2024-04-11T12:29:13.153561Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import xgboost as xgb\n##### RUN XGBOOST\n\nprint(\"\\nSetting up data for XGBoost ...\")\n# xgboost params\ny_mean = np.mean(y_train)\nxgb_params = {\n    'eta': 0.037,\n    'max_depth': 5,\n    'subsample': 0.80,\n    'objective': 'reg:linear',\n    'eval_metric': 'mae',\n    'lambda': 0.8,   \n    'alpha': 0.4, \n    'base_score': y_mean,\n    'silent': 1\n}\n\ndtrain = xgb.DMatrix(X_train, y_train)\ndtest = xgb.DMatrix(X_test)\n\nnum_boost_rounds = 50\nprint('num_boost_rounds = '+str(num_boost_rounds))","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:37:09.840714Z","iopub.execute_input":"2024-04-11T13:37:09.841197Z","iopub.status.idle":"2024-04-11T13:37:38.562441Z","shell.execute_reply.started":"2024-04-11T13:37:09.841166Z","shell.execute_reply":"2024-04-11T13:37:38.561280Z"},"trusted":true},"execution_count":175,"outputs":[{"name":"stdout","text":"\nSetting up data for XGBoost ...\nnum_boost_rounds = 50\n","output_type":"stream"}]},{"cell_type":"code","source":"# train model\nprint('\\nTraining XGBoost')\nmodel = xgb.train(dict(xgb_params, verbosity=0),\n                  dtrain, num_boost_round=num_boost_rounds)\n\nprint('\\nPredicting with XGBoost....')\nxgb_pred1 = model.predict(dtest)\n\nprint('\\nFirst XGBoost predictinos:')\nprint(pd.DataFrame(xgb_pred1).head())\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:37:38.564440Z","iopub.execute_input":"2024-04-11T13:37:38.564800Z","iopub.status.idle":"2024-04-11T13:37:41.552608Z","shell.execute_reply.started":"2024-04-11T13:37:38.564772Z","shell.execute_reply":"2024-04-11T13:37:41.551355Z"},"trusted":true},"execution_count":176,"outputs":[{"name":"stdout","text":"\nTraining XGBoost\n\nPredicting with XGBoost....\n\nFirst XGBoost predictinos:\n          0\n0  0.134717\n1 -0.003379\n2  0.098576\n3  0.056807\n4  0.017245\n","output_type":"stream"}]},{"cell_type":"code","source":"xgb.plot_importance(model)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:39:04.459208Z","iopub.execute_input":"2024-04-11T13:39:04.459638Z","iopub.status.idle":"2024-04-11T13:39:05.176486Z","shell.execute_reply.started":"2024-04-11T13:39:04.459592Z","shell.execute_reply":"2024-04-11T13:39:05.175664Z"},"trusted":true},"execution_count":178,"outputs":[{"execution_count":178,"output_type":"execute_result","data":{"text/plain":"<Axes: title={'center': 'Feature importance'}, xlabel='F score', ylabel='Features'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"xgb.plot_tree(model, num_trees=2)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:39:44.381674Z","iopub.execute_input":"2024-04-11T13:39:44.382084Z","iopub.status.idle":"2024-04-11T13:39:46.347764Z","shell.execute_reply.started":"2024-04-11T13:39:44.382055Z","shell.execute_reply":"2024-04-11T13:39:46.346473Z"},"trusted":true},"execution_count":179,"outputs":[{"execution_count":179,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"xgb.to_graphviz(model, num_trees=2)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:39:57.925706Z","iopub.execute_input":"2024-04-11T13:39:57.926834Z","iopub.status.idle":"2024-04-11T13:39:57.971319Z","shell.execute_reply.started":"2024-04-11T13:39:57.926796Z","shell.execute_reply":"2024-04-11T13:39:57.970222Z"},"trusted":true},"execution_count":180,"outputs":[{"execution_count":180,"output_type":"execute_result","data":{"image/svg+xml":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 9.0.0 (20231125.0833)\n -->\n<!-- Pages: 1 -->\n<svg width=\"5958pt\" height=\"490pt\"\n viewBox=\"0.00 0.00 5957.94 490.25\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 486.25)\">\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-486.25 5953.94,-486.25 5953.94,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"4176.97\" cy=\"-464.25\" rx=\"150.64\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"4176.97\" y=\"-459.57\" font-family=\"Times,serif\" font-size=\"14.00\">finishedsquarefeet12&lt;2930</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"3129.97\" cy=\"-375\" rx=\"133.28\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"3129.97\" y=\"-370.32\" font-family=\"Times,serif\" font-size=\"14.00\">taxamount&lt;2718.31006</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M4056.1,-453.18C3855.06,-436.42 3454.14,-403.01 3252.2,-386.19\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"3252.73,-382.72 3242.47,-385.38 3252.15,-389.69 3252.73,-382.72\"/>\n<text text-anchor=\"middle\" x=\"3792.22\" y=\"-414.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"4999.97\" cy=\"-375\" rx=\"92.24\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"4999.97\" y=\"-370.32\" font-family=\"Times,serif\" font-size=\"14.00\">bedroomcnt&lt;11</text>\n</g>\n<!-- 0&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>0&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M4286.69,-451.62C4450.74,-434.23 4756.93,-401.77 4909.18,-385.62\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"4909.24,-389.14 4918.81,-384.6 4908.5,-382.18 4909.24,-389.14\"/>\n<text text-anchor=\"middle\" x=\"4671.6\" y=\"-414.95\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1452.97\" cy=\"-285.75\" rx=\"185.37\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1452.97\" y=\"-281.07\" font-family=\"Times,serif\" font-size=\"14.00\">structuretaxvaluedollarcnt&lt;14469</text>\n</g>\n<!-- 1&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>1&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M3007.34,-367.62C2712.62,-352.29 1963.92,-313.33 1624.69,-295.68\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"1624.97,-292.19 1614.8,-295.17 1624.61,-299.18 1624.97,-292.19\"/>\n<text text-anchor=\"middle\" x=\"2486.22\" y=\"-325.7\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"3129.97\" cy=\"-285.75\" rx=\"144.86\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"3129.97\" y=\"-281.07\" font-family=\"Times,serif\" font-size=\"14.00\">taxvaluedollarcnt&lt;180331</text>\n</g>\n<!-- 1&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>1&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M3129.97,-356.76C3129.97,-344.93 3129.97,-328.95 3129.97,-315.25\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"3133.47,-315.47 3129.97,-305.47 3126.47,-315.47 3133.47,-315.47\"/>\n<text text-anchor=\"middle\" x=\"3138.6\" y=\"-325.7\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n</g>\n<!-- 5 -->\n<g id=\"node34\" class=\"node\">\n<title>5</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"4999.97\" cy=\"-285.75\" rx=\"107.5\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"4999.97\" y=\"-281.07\" font-family=\"Times,serif\" font-size=\"14.00\">regionidzip&lt;96121</text>\n</g>\n<!-- 2&#45;&gt;5 -->\n<g id=\"edge33\" class=\"edge\">\n<title>2&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M4999.97,-356.76C4999.97,-344.93 4999.97,-328.95 4999.97,-315.25\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"5003.47,-315.47 4999.97,-305.47 4996.47,-315.47 5003.47,-315.47\"/>\n<text text-anchor=\"middle\" x=\"5011.97\" y=\"-325.7\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 6 -->\n<g id=\"node35\" class=\"node\">\n<title>6</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"5472.97\" cy=\"-285.75\" rx=\"125.92\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"5472.97\" y=\"-281.07\" font-family=\"Times,serif\" font-size=\"14.00\">transaction_month&lt;15</text>\n</g>\n<!-- 2&#45;&gt;6 -->\n<g id=\"edge34\" class=\"edge\">\n<title>2&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M5065.24,-361.96C5148.81,-346.54 5293.86,-319.79 5386.53,-302.7\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"5387.16,-306.14 5396.35,-300.88 5385.89,-299.25 5387.16,-306.14\"/>\n<text text-anchor=\"middle\" x=\"5319.85\" y=\"-325.7\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 7 -->\n<g id=\"node6\" class=\"node\">\n<title>7</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"761.97\" cy=\"-196.5\" rx=\"90.14\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"761.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">bathroomcnt&lt;1</text>\n</g>\n<!-- 3&#45;&gt;7 -->\n<g id=\"edge5\" class=\"edge\">\n<title>3&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M1343.1,-270.88C1205.55,-253.51 972.83,-224.12 847.69,-208.32\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"848.16,-204.85 837.8,-207.07 847.28,-211.8 848.16,-204.85\"/>\n<text text-anchor=\"middle\" x=\"1181.97\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 8 -->\n<g id=\"node7\" class=\"node\">\n<title>8</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1452.97\" cy=\"-196.5\" rx=\"90.14\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1452.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">yearbuilt&lt;1966</text>\n</g>\n<!-- 3&#45;&gt;8 -->\n<g id=\"edge6\" class=\"edge\">\n<title>3&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M1452.97,-267.51C1452.97,-255.68 1452.97,-239.7 1452.97,-226\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"1456.47,-226.22 1452.97,-216.22 1449.47,-226.22 1456.47,-226.22\"/>\n<text text-anchor=\"middle\" x=\"1493.85\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 9 -->\n<g id=\"node20\" class=\"node\">\n<title>9</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"2777.97\" cy=\"-196.5\" rx=\"107.5\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"2777.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">regionidzip&lt;95997</text>\n</g>\n<!-- 4&#45;&gt;9 -->\n<g id=\"edge19\" class=\"edge\">\n<title>4&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M3067.04,-269.15C3005.39,-253.87 2911.63,-230.63 2847.73,-214.79\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"2848.57,-211.39 2838.03,-212.39 2846.89,-218.19 2848.57,-211.39\"/>\n<text text-anchor=\"middle\" x=\"2997.97\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 10 -->\n<g id=\"node21\" class=\"node\">\n<title>10</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"3359.97\" cy=\"-196.5\" rx=\"104.87\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"3359.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">regionidcity&lt;4406</text>\n</g>\n<!-- 4&#45;&gt;10 -->\n<g id=\"edge20\" class=\"edge\">\n<title>4&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M3173.77,-268.13C3211.86,-253.69 3267.12,-232.72 3307.55,-217.39\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"3308.75,-220.68 3316.85,-213.86 3306.26,-214.13 3308.75,-220.68\"/>\n<text text-anchor=\"middle\" x=\"3306.85\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 15 -->\n<g id=\"node8\" class=\"node\">\n<title>15</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"362.97\" cy=\"-107.25\" rx=\"90.14\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"362.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">yearbuilt&lt;1988</text>\n</g>\n<!-- 7&#45;&gt;15 -->\n<g id=\"edge7\" class=\"edge\">\n<title>7&#45;&gt;15</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M702.67,-182.53C630.77,-166.81 509.74,-140.34 433.23,-123.61\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"434.27,-120.26 423.75,-121.54 432.77,-127.1 434.27,-120.26\"/>\n<text text-anchor=\"middle\" x=\"610.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 16 -->\n<g id=\"node9\" class=\"node\">\n<title>16</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"761.97\" cy=\"-107.25\" rx=\"111.18\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"761.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">regionidcity&lt;14906</text>\n</g>\n<!-- 7&#45;&gt;16 -->\n<g id=\"edge8\" class=\"edge\">\n<title>7&#45;&gt;16</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M761.97,-178.26C761.97,-166.43 761.97,-150.45 761.97,-136.75\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"765.47,-136.97 761.97,-126.97 758.47,-136.97 765.47,-136.97\"/>\n<text text-anchor=\"middle\" x=\"802.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 17 -->\n<g id=\"node14\" class=\"node\">\n<title>17</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1336.97\" cy=\"-107.25\" rx=\"182.74\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1336.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">calculatedfinishedsquarefeet&lt;529</text>\n</g>\n<!-- 8&#45;&gt;17 -->\n<g id=\"edge13\" class=\"edge\">\n<title>8&#45;&gt;17</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M1430.61,-178.68C1413.07,-165.49 1388.43,-146.95 1368.83,-132.21\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"1370.97,-129.44 1360.87,-126.23 1366.76,-135.04 1370.97,-129.44\"/>\n<text text-anchor=\"middle\" x=\"1450.22\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n</g>\n<!-- 18 -->\n<g id=\"node15\" class=\"node\">\n<title>18</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1687.97\" cy=\"-107.25\" rx=\"150.64\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1687.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">finishedsquarefeet12&lt;1583</text>\n</g>\n<!-- 8&#45;&gt;18 -->\n<g id=\"edge14\" class=\"edge\">\n<title>8&#45;&gt;18</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M1494.44,-180.1C1532.87,-165.84 1590.3,-144.51 1632.63,-128.8\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"1633.74,-132.12 1641.9,-125.36 1631.3,-125.56 1633.74,-132.12\"/>\n<text text-anchor=\"middle\" x=\"1600.6\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n</g>\n<!-- 27 -->\n<g id=\"node10\" class=\"node\">\n<title>27</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"116.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"116.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00667323312</text>\n</g>\n<!-- 15&#45;&gt;27 -->\n<g id=\"edge9\" class=\"edge\">\n<title>15&#45;&gt;27</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M320.12,-91.05C279.3,-76.57 217.62,-54.7 172.93,-38.85\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"174.27,-35.61 163.67,-35.56 171.93,-42.2 174.27,-35.61\"/>\n<text text-anchor=\"middle\" x=\"307.22\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n</g>\n<!-- 28 -->\n<g id=\"node11\" class=\"node\">\n<title>28</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"362.97\" cy=\"-18\" rx=\"110.66\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"362.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.0415502302</text>\n</g>\n<!-- 15&#45;&gt;28 -->\n<g id=\"edge10\" class=\"edge\">\n<title>15&#45;&gt;28</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M362.97,-89.01C362.97,-77.18 362.97,-61.2 362.97,-47.5\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"366.47,-47.72 362.97,-37.72 359.47,-47.72 366.47,-47.72\"/>\n<text text-anchor=\"middle\" x=\"371.6\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n</g>\n<!-- 29 -->\n<g id=\"node12\" class=\"node\">\n<title>29</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"617.97\" cy=\"-18\" rx=\"126.44\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"617.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.000102965918</text>\n</g>\n<!-- 16&#45;&gt;29 -->\n<g id=\"edge11\" class=\"edge\">\n<title>16&#45;&gt;29</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M734.21,-89.43C711.8,-75.85 680.05,-56.61 655.39,-41.67\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"657.31,-38.74 646.95,-36.56 653.68,-44.73 657.31,-38.74\"/>\n<text text-anchor=\"middle\" x=\"714.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 30 -->\n<g id=\"node13\" class=\"node\">\n<title>30</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"878.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"878.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00305046863</text>\n</g>\n<!-- 16&#45;&gt;30 -->\n<g id=\"edge12\" class=\"edge\">\n<title>16&#45;&gt;30</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M784.81,-89.22C802.52,-76.01 827.3,-57.53 846.99,-42.85\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"849.06,-45.68 854.98,-36.89 844.87,-40.06 849.06,-45.68\"/>\n<text text-anchor=\"middle\" x=\"871.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 31 -->\n<g id=\"node16\" class=\"node\">\n<title>31</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1130.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1130.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00364469527</text>\n</g>\n<!-- 17&#45;&gt;31 -->\n<g id=\"edge15\" class=\"edge\">\n<title>17&#45;&gt;31</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M1296.76,-89.22C1263.3,-75.05 1215.54,-54.82 1179.87,-39.71\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"1181.65,-36.66 1171.08,-35.99 1178.92,-43.11 1181.65,-36.66\"/>\n<text text-anchor=\"middle\" x=\"1264.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 32 -->\n<g id=\"node17\" class=\"node\">\n<title>32</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1382.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1382.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00043011966</text>\n</g>\n<!-- 17&#45;&gt;32 -->\n<g id=\"edge16\" class=\"edge\">\n<title>17&#45;&gt;32</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M1346.06,-89.01C1352.49,-76.82 1361.23,-60.23 1368.6,-46.26\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"1371.63,-48.02 1373.2,-37.54 1365.44,-44.75 1371.63,-48.02\"/>\n<text text-anchor=\"middle\" x=\"1405.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 33 -->\n<g id=\"node18\" class=\"node\">\n<title>33</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1640.97\" cy=\"-18\" rx=\"122.76\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1640.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;4.66580204e&#45;05</text>\n</g>\n<!-- 18&#45;&gt;33 -->\n<g id=\"edge17\" class=\"edge\">\n<title>18&#45;&gt;33</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M1678.69,-89.01C1672.12,-76.82 1663.18,-60.23 1655.66,-46.26\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"1658.78,-44.68 1650.96,-37.53 1652.62,-48 1658.78,-44.68\"/>\n<text text-anchor=\"middle\" x=\"1680.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 34 -->\n<g id=\"node19\" class=\"node\">\n<title>34</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1904.97\" cy=\"-18\" rx=\"123.29\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1904.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.000415945717</text>\n</g>\n<!-- 18&#45;&gt;34 -->\n<g id=\"edge18\" class=\"edge\">\n<title>18&#45;&gt;34</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M1729.55,-89.53C1764.99,-75.28 1816.05,-54.75 1853.95,-39.52\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"1854.89,-42.91 1862.86,-35.93 1852.28,-36.42 1854.89,-42.91\"/>\n<text text-anchor=\"middle\" x=\"1856.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 19 -->\n<g id=\"node22\" class=\"node\">\n<title>19</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"2437.97\" cy=\"-107.25\" rx=\"131.18\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"2437.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">lotsizesquarefeet&lt;4991</text>\n</g>\n<!-- 9&#45;&gt;19 -->\n<g id=\"edge21\" class=\"edge\">\n<title>9&#45;&gt;19</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M2721.06,-180.9C2662.75,-165.93 2571.94,-142.63 2508.96,-126.47\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"2509.95,-123.11 2499.4,-124.01 2508.21,-129.89 2509.95,-123.11\"/>\n<text text-anchor=\"middle\" x=\"2650.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 20 -->\n<g id=\"node23\" class=\"node\">\n<title>20</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"2777.97\" cy=\"-107.25\" rx=\"90.14\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"2777.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">yearbuilt&lt;1977</text>\n</g>\n<!-- 9&#45;&gt;20 -->\n<g id=\"edge22\" class=\"edge\">\n<title>9&#45;&gt;20</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M2777.97,-178.26C2777.97,-166.43 2777.97,-150.45 2777.97,-136.75\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"2781.47,-136.97 2777.97,-126.97 2774.47,-136.97 2781.47,-136.97\"/>\n<text text-anchor=\"middle\" x=\"2818.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 21 -->\n<g id=\"node28\" class=\"node\">\n<title>21</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"3359.97\" cy=\"-107.25\" rx=\"90.14\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"3359.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">yearbuilt&lt;1987</text>\n</g>\n<!-- 10&#45;&gt;21 -->\n<g id=\"edge27\" class=\"edge\">\n<title>10&#45;&gt;21</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M3359.97,-178.26C3359.97,-166.43 3359.97,-150.45 3359.97,-136.75\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"3363.47,-136.97 3359.97,-126.97 3356.47,-136.97 3363.47,-136.97\"/>\n<text text-anchor=\"middle\" x=\"3371.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 22 -->\n<g id=\"node29\" class=\"node\">\n<title>22</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"3659.97\" cy=\"-107.25\" rx=\"150.64\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"3659.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">finishedsquarefeet12&lt;1685</text>\n</g>\n<!-- 10&#45;&gt;22 -->\n<g id=\"edge28\" class=\"edge\">\n<title>10&#45;&gt;22</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M3411.89,-180.4C3462.17,-165.78 3538.64,-143.54 3593.38,-127.62\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"3594.3,-131 3602.92,-124.84 3592.34,-124.27 3594.3,-131\"/>\n<text text-anchor=\"middle\" x=\"3577.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 35 -->\n<g id=\"node24\" class=\"node\">\n<title>35</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"2172.97\" cy=\"-18\" rx=\"126.44\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"2172.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.000576840248</text>\n</g>\n<!-- 19&#45;&gt;35 -->\n<g id=\"edge23\" class=\"edge\">\n<title>19&#45;&gt;35</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M2389.06,-90.15C2344.8,-75.57 2279.51,-54.08 2232.29,-38.53\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"2233.63,-35.29 2223.04,-35.48 2231.44,-41.94 2233.63,-35.29\"/>\n<text text-anchor=\"middle\" x=\"2374.22\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n</g>\n<!-- 36 -->\n<g id=\"node25\" class=\"node\">\n<title>36</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"2437.97\" cy=\"-18\" rx=\"120.13\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"2437.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.00863969792</text>\n</g>\n<!-- 19&#45;&gt;36 -->\n<g id=\"edge24\" class=\"edge\">\n<title>19&#45;&gt;36</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M2437.97,-89.01C2437.97,-77.18 2437.97,-61.2 2437.97,-47.5\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"2441.47,-47.72 2437.97,-37.72 2434.47,-47.72 2441.47,-47.72\"/>\n<text text-anchor=\"middle\" x=\"2446.6\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n</g>\n<!-- 37 -->\n<g id=\"node26\" class=\"node\">\n<title>37</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"2695.97\" cy=\"-18\" rx=\"120.13\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"2695.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.00164554664</text>\n</g>\n<!-- 20&#45;&gt;37 -->\n<g id=\"edge25\" class=\"edge\">\n<title>20&#45;&gt;37</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M2762.16,-89.43C2750.1,-76.59 2733.29,-58.71 2719.63,-44.18\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"2722.45,-42.06 2713.05,-37.17 2717.35,-46.86 2722.45,-42.06\"/>\n<text text-anchor=\"middle\" x=\"2789.22\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n</g>\n<!-- 38 -->\n<g id=\"node27\" class=\"node\">\n<title>38</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"2960.97\" cy=\"-18\" rx=\"126.44\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"2960.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.000267641561</text>\n</g>\n<!-- 20&#45;&gt;38 -->\n<g id=\"edge26\" class=\"edge\">\n<title>20&#45;&gt;38</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M2811.54,-90.25C2840.87,-76.26 2883.69,-55.85 2915.98,-40.45\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"2917.18,-43.76 2924.7,-36.3 2914.16,-37.44 2917.18,-43.76\"/>\n<text text-anchor=\"middle\" x=\"2894.6\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n</g>\n<!-- 39 -->\n<g id=\"node30\" class=\"node\">\n<title>39</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"3221.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"3221.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00047974629</text>\n</g>\n<!-- 21&#45;&gt;39 -->\n<g id=\"edge29\" class=\"edge\">\n<title>21&#45;&gt;39</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M3333.69,-89.63C3312.34,-76.14 3282,-56.95 3258.32,-41.98\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"3260.23,-39.05 3249.9,-36.66 3256.49,-44.96 3260.23,-39.05\"/>\n<text text-anchor=\"middle\" x=\"3315.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 40 -->\n<g id=\"node31\" class=\"node\">\n<title>40</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"3435.97\" cy=\"-18\" rx=\"79.09\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"3435.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.02434</text>\n</g>\n<!-- 21&#45;&gt;40 -->\n<g id=\"edge30\" class=\"edge\">\n<title>21&#45;&gt;40</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M3374.99,-89.01C3386.09,-76.26 3401.39,-58.7 3413.89,-44.35\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"3416.32,-46.89 3420.25,-37.05 3411.04,-42.29 3416.32,-46.89\"/>\n<text text-anchor=\"middle\" x=\"3445.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 41 -->\n<g id=\"node32\" class=\"node\">\n<title>41</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"3659.97\" cy=\"-18\" rx=\"126.44\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"3659.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.000243956223</text>\n</g>\n<!-- 22&#45;&gt;41 -->\n<g id=\"edge31\" class=\"edge\">\n<title>22&#45;&gt;41</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M3659.97,-89.01C3659.97,-77.18 3659.97,-61.2 3659.97,-47.5\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"3663.47,-47.72 3659.97,-37.72 3656.47,-47.72 3663.47,-47.72\"/>\n<text text-anchor=\"middle\" x=\"3704.22\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n</g>\n<!-- 42 -->\n<g id=\"node33\" class=\"node\">\n<title>42</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"3923.97\" cy=\"-18\" rx=\"119.6\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"3923.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=4.42597557e&#45;05</text>\n</g>\n<!-- 22&#45;&gt;42 -->\n<g id=\"edge32\" class=\"edge\">\n<title>22&#45;&gt;42</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M3709.63,-89.84C3753.74,-75.26 3818.28,-53.93 3865,-38.49\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"3866.04,-41.83 3874.44,-35.37 3863.84,-35.19 3866.04,-41.83\"/>\n<text text-anchor=\"middle\" x=\"3824.6\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n</g>\n<!-- 11 -->\n<g id=\"node36\" class=\"node\">\n<title>11</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"4819.97\" cy=\"-196.5\" rx=\"133.28\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"4819.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">taxamount&lt;14512.0098</text>\n</g>\n<!-- 5&#45;&gt;11 -->\n<g id=\"edge35\" class=\"edge\">\n<title>5&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M4966.12,-268.34C4937.48,-254.46 4896.21,-234.45 4864.83,-219.24\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"4866.48,-216.16 4855.96,-214.94 4863.43,-222.45 4866.48,-216.16\"/>\n<text text-anchor=\"middle\" x=\"4971.22\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n</g>\n<!-- 12 -->\n<g id=\"node37\" class=\"node\">\n<title>12</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"5180.97\" cy=\"-196.5\" rx=\"150.64\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"5180.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">finishedsquarefeet12&lt;6339</text>\n</g>\n<!-- 5&#45;&gt;12 -->\n<g id=\"edge36\" class=\"edge\">\n<title>5&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M5034.02,-268.34C5062.72,-254.5 5104.04,-234.58 5135.56,-219.39\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"5136.99,-222.58 5144.48,-215.09 5133.95,-216.28 5136.99,-222.58\"/>\n<text text-anchor=\"middle\" x=\"5115.6\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n</g>\n<!-- 13 -->\n<g id=\"node50\" class=\"node\">\n<title>13</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"5472.97\" cy=\"-196.5\" rx=\"123.29\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"5472.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.000699364406</text>\n</g>\n<!-- 6&#45;&gt;13 -->\n<g id=\"edge49\" class=\"edge\">\n<title>6&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M5472.97,-267.51C5472.97,-255.68 5472.97,-239.7 5472.97,-226\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"5476.47,-226.22 5472.97,-216.22 5469.47,-226.22 5476.47,-226.22\"/>\n<text text-anchor=\"middle\" x=\"5484.97\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 14 -->\n<g id=\"node51\" class=\"node\">\n<title>14</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"5724.97\" cy=\"-196.5\" rx=\"110.66\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"5724.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.0695547685</text>\n</g>\n<!-- 6&#45;&gt;14 -->\n<g id=\"edge50\" class=\"edge\">\n<title>6&#45;&gt;14</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M5519.49,-268.65C5561.66,-254.04 5623.91,-232.49 5668.84,-216.93\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"5669.84,-220.29 5678.15,-213.71 5667.55,-213.68 5669.84,-220.29\"/>\n<text text-anchor=\"middle\" x=\"5662.85\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 23 -->\n<g id=\"node38\" class=\"node\">\n<title>23</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"4436.97\" cy=\"-107.25\" rx=\"209.57\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"4436.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">censustractandblock&lt;6.03726566e+13</text>\n</g>\n<!-- 11&#45;&gt;23 -->\n<g id=\"edge37\" class=\"edge\">\n<title>11&#45;&gt;23</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M4754.13,-180.5C4689.27,-165.72 4589.97,-143.1 4519.78,-127.12\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"4520.78,-123.75 4510.26,-124.94 4519.23,-130.58 4520.78,-123.75\"/>\n<text text-anchor=\"middle\" x=\"4674.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 24 -->\n<g id=\"node39\" class=\"node\">\n<title>24</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"4819.97\" cy=\"-107.25\" rx=\"126.44\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"4819.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">calculatedbathnbr&lt;7.5</text>\n</g>\n<!-- 11&#45;&gt;24 -->\n<g id=\"edge38\" class=\"edge\">\n<title>11&#45;&gt;24</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M4819.97,-178.26C4819.97,-166.43 4819.97,-150.45 4819.97,-136.75\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"4823.47,-136.97 4819.97,-126.97 4816.47,-136.97 4823.47,-136.97\"/>\n<text text-anchor=\"middle\" x=\"4860.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 25 -->\n<g id=\"node44\" class=\"node\">\n<title>25</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"5210.97\" cy=\"-107.25\" rx=\"125.92\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"5210.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">transaction_month&lt;21</text>\n</g>\n<!-- 12&#45;&gt;25 -->\n<g id=\"edge43\" class=\"edge\">\n<title>12&#45;&gt;25</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M5186.9,-178.26C5191.01,-166.31 5196.57,-150.13 5201.32,-136.33\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"5204.62,-137.48 5204.56,-126.88 5198,-135.2 5204.62,-137.48\"/>\n<text text-anchor=\"middle\" x=\"5210.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 26 -->\n<g id=\"node45\" class=\"node\">\n<title>26</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"5650.97\" cy=\"-107.25\" rx=\"109.08\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"5650.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">latitude&lt;33598948</text>\n</g>\n<!-- 12&#45;&gt;26 -->\n<g id=\"edge44\" class=\"edge\">\n<title>12&#45;&gt;26</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M5260.17,-180.8C5346.01,-164.86 5482.33,-139.56 5569.17,-123.44\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"5569.62,-126.91 5578.81,-121.65 5568.34,-120.03 5569.62,-126.91\"/>\n<text text-anchor=\"middle\" x=\"5499.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 43 -->\n<g id=\"node40\" class=\"node\">\n<title>43</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"4184.97\" cy=\"-18\" rx=\"123.29\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"4184.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.000275176659</text>\n</g>\n<!-- 23&#45;&gt;43 -->\n<g id=\"edge39\" class=\"edge\">\n<title>23&#45;&gt;43</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M4388.08,-89.32C4346.26,-74.84 4286.01,-53.98 4241.99,-38.74\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"4243.2,-35.46 4232.6,-35.49 4240.91,-42.07 4243.2,-35.46\"/>\n<text text-anchor=\"middle\" x=\"4378.22\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n</g>\n<!-- 44 -->\n<g id=\"node41\" class=\"node\">\n<title>44</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"4436.97\" cy=\"-18\" rx=\"110.66\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"4436.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.0020444952</text>\n</g>\n<!-- 23&#45;&gt;44 -->\n<g id=\"edge40\" class=\"edge\">\n<title>23&#45;&gt;44</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M4436.97,-89.01C4436.97,-77.18 4436.97,-61.2 4436.97,-47.5\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"4440.47,-47.72 4436.97,-37.72 4433.47,-47.72 4440.47,-47.72\"/>\n<text text-anchor=\"middle\" x=\"4445.6\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n</g>\n<!-- 45 -->\n<g id=\"node42\" class=\"node\">\n<title>45</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"4691.97\" cy=\"-18\" rx=\"126.44\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"4691.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.000845640083</text>\n</g>\n<!-- 24&#45;&gt;45 -->\n<g id=\"edge41\" class=\"edge\">\n<title>24&#45;&gt;45</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M4794.99,-89.22C4775.43,-75.89 4748.01,-57.2 4726.38,-42.45\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"4728.38,-39.58 4718.14,-36.84 4724.43,-45.36 4728.38,-39.58\"/>\n<text text-anchor=\"middle\" x=\"4779.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 46 -->\n<g id=\"node43\" class=\"node\">\n<title>46</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"4952.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"4952.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00266904081</text>\n</g>\n<!-- 24&#45;&gt;46 -->\n<g id=\"edge42\" class=\"edge\">\n<title>24&#45;&gt;46</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M4845.93,-89.22C4866.35,-75.83 4895,-57.03 4917.53,-42.25\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"4919.37,-45.23 4925.81,-36.82 4915.53,-39.38 4919.37,-45.23\"/>\n<text text-anchor=\"middle\" x=\"4939.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 47 -->\n<g id=\"node46\" class=\"node\">\n<title>47</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"5210.97\" cy=\"-18\" rx=\"123.29\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"5210.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.000647695852</text>\n</g>\n<!-- 25&#45;&gt;47 -->\n<g id=\"edge45\" class=\"edge\">\n<title>25&#45;&gt;47</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M5210.97,-89.01C5210.97,-77.18 5210.97,-61.2 5210.97,-47.5\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"5214.47,-47.72 5210.97,-37.72 5207.47,-47.72 5214.47,-47.72\"/>\n<text text-anchor=\"middle\" x=\"5222.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 48 -->\n<g id=\"node47\" class=\"node\">\n<title>48</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"5468.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"5468.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00283299969</text>\n</g>\n<!-- 25&#45;&gt;48 -->\n<g id=\"edge46\" class=\"edge\">\n<title>25&#45;&gt;48</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M5258.59,-90.15C5301.73,-75.56 5365.38,-54.03 5411.36,-38.48\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"5412.28,-41.87 5420.63,-35.35 5410.03,-35.24 5412.28,-41.87\"/>\n<text text-anchor=\"middle\" x=\"5404.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n<!-- 49 -->\n<g id=\"node48\" class=\"node\">\n<title>49</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"5650.97\" cy=\"-18\" rx=\"47.53\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"5650.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0</text>\n</g>\n<!-- 26&#45;&gt;49 -->\n<g id=\"edge47\" class=\"edge\">\n<title>26&#45;&gt;49</title>\n<path fill=\"none\" stroke=\"#ff0000\" d=\"M5650.97,-89.01C5650.97,-77.18 5650.97,-61.2 5650.97,-47.5\"/>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"5654.47,-47.72 5650.97,-37.72 5647.47,-47.72 5654.47,-47.72\"/>\n<text text-anchor=\"middle\" x=\"5662.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n</g>\n<!-- 50 -->\n<g id=\"node49\" class=\"node\">\n<title>50</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"5832.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"5832.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00380872167</text>\n</g>\n<!-- 26&#45;&gt;50 -->\n<g id=\"edge48\" class=\"edge\">\n<title>26&#45;&gt;50</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M5685.2,-89.84C5714.25,-75.91 5756.15,-55.83 5787.92,-40.6\"/>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"5789.4,-43.77 5796.91,-36.29 5786.38,-37.46 5789.4,-43.77\"/>\n<text text-anchor=\"middle\" x=\"5798.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n</g>\n</g>\n</svg>\n","text/plain":"<graphviz.sources.Source at 0x797b5fa0c7f0>"},"metadata":{}}]},{"cell_type":"code","source":"import xgboost\nfrom sklearn.model_selection import GridSearchCV\nxgb1 = xgboost.XGBRegressor()\nparameters = {'nthread':[4], #when use hyperthread, xgboost may become slower\n              'objective':['reg:linear'],\n              'learning_rate': [.03, 0.05, .07], #so called `eta` value\n              'max_depth': [5, 6, 7],\n              'min_child_weight': [4],\n              'silent': [1],\n              'subsample': [0.7],\n              'colsample_bytree': [0.7],\n              'n_estimators': [500]}\n\nxgb_grid = GridSearchCV(xgb1,\n                        parameters,\n                        cv = 2,\n                        n_jobs = 5,\n                        verbose=True)\n\nxgb_grid.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T12:49:29.056871Z","iopub.execute_input":"2024-04-11T12:49:29.057565Z","iopub.status.idle":"2024-04-11T13:21:49.437843Z","shell.execute_reply.started":"2024-04-11T12:49:29.057522Z","shell.execute_reply":"2024-04-11T13:21:49.434968Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(xgb_grid.best_score_)\nprint(xgb_grid.best_params_)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:21:55.534365Z","iopub.execute_input":"2024-04-11T13:21:55.534838Z","iopub.status.idle":"2024-04-11T13:21:55.540623Z","shell.execute_reply.started":"2024-04-11T13:21:55.534793Z","shell.execute_reply":"2024-04-11T13:21:55.539682Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# xgb_best = xgboost.XGBRegressor(xgb_grid.best_params_)\n# xgb_best.fit(X_train,y_train)\nxgb_final = xgb_grid.best_estimator_.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:26:43.072794Z","iopub.execute_input":"2024-04-11T13:26:43.073210Z","iopub.status.idle":"2024-04-11T13:27:10.113898Z","shell.execute_reply.started":"2024-04-11T13:26:43.073181Z","shell.execute_reply":"2024-04-11T13:27:10.112978Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## STEP 5 : Submission","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'ParcelId': test_df['ParcelId'],\n})\ntest_dates = {\n    '201610': pd.Timestamp('2016-09-30'),\n    '201611': pd.Timestamp('2016-10-31'),\n    '201612': pd.Timestamp('2016-11-30'),\n    '201710': pd.Timestamp('2017-09-30'),\n    '201711': pd.Timestamp('2017-10-31'),\n    '201712': pd.Timestamp('2017-11-30')\n}\nfor label, test_date in test_dates.items():\n    print(\"Predicting for: %s ... \" % (label))\n    submission[label] = xgb_final\n    \nsubmission.to_csv('submission2.csv', float_format='%.6f',index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:28:10.211860Z","iopub.execute_input":"2024-04-11T13:28:10.212270Z","iopub.status.idle":"2024-04-11T13:28:46.427489Z","shell.execute_reply.started":"2024-04-11T13:28:10.212240Z","shell.execute_reply":"2024-04-11T13:28:46.426315Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#test_dates.items()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T12:11:55.447304Z","iopub.execute_input":"2024-04-11T12:11:55.447725Z","iopub.status.idle":"2024-04-11T12:11:55.454337Z","shell.execute_reply.started":"2024-04-11T12:11:55.447691Z","shell.execute_reply":"2024-04-11T12:11:55.453026Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}