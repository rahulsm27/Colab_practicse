{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ddd8997a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-15T14:06:16.350579Z",
     "iopub.status.busy": "2024-04-15T14:06:16.350093Z",
     "iopub.status.idle": "2024-04-15T14:06:16.364508Z",
     "shell.execute_reply": "2024-04-15T14:06:16.363332Z"
    },
    "papermill": {
     "duration": 0.049819,
     "end_time": "2024-04-15T14:06:16.366938",
     "exception": false,
     "start_time": "2024-04-15T14:06:16.317119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1354859",
   "metadata": {
    "papermill": {
     "duration": 0.028802,
     "end_time": "2024-04-15T14:06:16.426496",
     "exception": false,
     "start_time": "2024-04-15T14:06:16.397694",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## STEP1 : Import Libraries and Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "410beb56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:06:16.488174Z",
     "iopub.status.busy": "2024-04-15T14:06:16.487430Z",
     "iopub.status.idle": "2024-04-15T14:06:20.059396Z",
     "shell.execute_reply": "2024-04-15T14:06:20.058216Z"
    },
    "papermill": {
     "duration": 3.605645,
     "end_time": "2024-04-15T14:06:20.062426",
     "exception": false,
     "start_time": "2024-04-15T14:06:16.456781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_rows', 100)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import datetime as dt\n",
    "\n",
    "\n",
    "from tqdm import tqdm\n",
    "import gc\n",
    "\n",
    "\n",
    "from catboost import CatBoostRegressor\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4513724c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:06:20.127034Z",
     "iopub.status.busy": "2024-04-15T14:06:20.126089Z",
     "iopub.status.idle": "2024-04-15T14:07:28.410216Z",
     "shell.execute_reply": "2024-04-15T14:07:28.408862Z"
    },
    "papermill": {
     "duration": 68.350388,
     "end_time": "2024-04-15T14:07:28.443114",
     "exception": false,
     "start_time": "2024-04-15T14:06:20.092726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading Properties dataset..\n",
      " Properties dataset loaded\n"
     ]
    }
   ],
   "source": [
    "# Load the properties dataset\n",
    "# This file constains properties with their home features for their respective year\n",
    "# This cell takes time to execute\n",
    "\n",
    "print(\"Loading Properties dataset..\")\n",
    "properties2016 = pd.read_csv('/kaggle/input/zillow-prize-1/properties_2016.csv', low_memory = False)\n",
    "properties2017 = pd.read_csv('/kaggle/input/zillow-prize-1/properties_2017.csv', low_memory = False)\n",
    "print(\" Properties dataset loaded\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "adef1a36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:28.504212Z",
     "iopub.status.busy": "2024-04-15T14:07:28.503781Z",
     "iopub.status.idle": "2024-04-15T14:07:28.711656Z",
     "shell.execute_reply": "2024-04-15T14:07:28.710540Z"
    },
    "papermill": {
     "duration": 0.241203,
     "end_time": "2024-04-15T14:07:28.713867",
     "exception": false,
     "start_time": "2024-04-15T14:07:28.472664",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading transaction dataset..\n",
      "Transaction dataset loaded\n"
     ]
    }
   ],
   "source": [
    "# The file contain transaction details i.e. the date of sale and sale value\n",
    "#train_2016.csv - the training set with transactions from 1/1/2016 to 12/31/2016\n",
    "#train_2017.csv - the training set with transactions from 1/1/2017 to 9/15/2017\n",
    "\n",
    "print('Loading transaction dataset..')\n",
    "train2016 = pd.read_csv('/kaggle/input/zillow-prize-1/train_2016_v2.csv', parse_dates=['transactiondate'], low_memory=False)\n",
    "train2017 = pd.read_csv('/kaggle/input/zillow-prize-1/train_2017.csv', parse_dates=['transactiondate'], low_memory=False)\n",
    "print('Transaction dataset loaded')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ef4a3441",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:28.777009Z",
     "iopub.status.busy": "2024-04-15T14:07:28.775884Z",
     "iopub.status.idle": "2024-04-15T14:07:29.470393Z",
     "shell.execute_reply": "2024-04-15T14:07:29.469160Z"
    },
    "papermill": {
     "duration": 0.729779,
     "end_time": "2024-04-15T14:07:29.473353",
     "exception": false,
     "start_time": "2024-04-15T14:07:28.743574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# The processing of some of the algorithms can be made quick if data representation is made in int/float32 instead of int/float64.\n",
    "for c, dtype in zip(properties2016.columns, properties2016.dtypes):\n",
    "    if dtype == np.float64:        \n",
    "        properties2016[c] = properties2016[c].astype(np.float32)\n",
    "    if dtype == np.int64:\n",
    "        properties2016[c] = properties2016[c].astype(np.int32)\n",
    "        \n",
    "for c, dtype in zip(properties2017.columns, properties2017.dtypes):\n",
    "    if dtype == np.float64:        \n",
    "        properties2017[c] = properties2017[c].astype(np.float32)\n",
    "    if dtype == np.int64:\n",
    "        properties2017[c] = properties2017[c].astype(np.int32)\n",
    "\n",
    "\n",
    "for column in train2016.columns:\n",
    "    if train2016[column].dtype == int:\n",
    "        train2016[column] = train2016[column].astype(np.int32)\n",
    "    if train2016[column].dtype == float:\n",
    "        train2016[column] = train2016[column].astype(np.float32)\n",
    "        \n",
    "for column in train2017.columns:\n",
    "    if train2017[column].dtype == int:\n",
    "        train2017[column] = train2017[column].astype(np.int32)\n",
    "    if train2017[column].dtype == float:\n",
    "        train2017[column] = train2017[column].astype(np.float32)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76494c67",
   "metadata": {
    "papermill": {
     "duration": 0.029986,
     "end_time": "2024-04-15T14:07:29.533769",
     "exception": false,
     "start_time": "2024-04-15T14:07:29.503783",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In this competition, Zillow is asking us to predict the \n",
    "log-error between their Zestimate and the actual sale price, \n",
    "given all the features of a home. The log error is defined as\n",
    "\n",
    "𝑙𝑜𝑔𝑒𝑟𝑟𝑜𝑟=𝑙𝑜𝑔(𝑍𝑒𝑠𝑡𝑖𝑚𝑎𝑡𝑒)−𝑙𝑜𝑔(𝑆𝑎𝑙𝑒𝑃𝑟𝑖𝑐𝑒)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a04ea290",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:29.596107Z",
     "iopub.status.busy": "2024-04-15T14:07:29.595396Z",
     "iopub.status.idle": "2024-04-15T14:07:32.073969Z",
     "shell.execute_reply": "2024-04-15T14:07:32.072392Z"
    },
    "papermill": {
     "duration": 2.512935,
     "end_time": "2024-04-15T14:07:32.077255",
     "exception": false,
     "start_time": "2024-04-15T14:07:29.564320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading submission sample file\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# We need to predict 6 time points for all properties: October 2016 (201610), \n",
    "#November 2016 (201611), December 2016 (201612), October 2017 (201710),\n",
    "#November 2017 (201711), and December 2017 (201712).\n",
    "\n",
    "print('Loading submission sample file')\n",
    "sample_submission = pd.read_csv('/kaggle/input/zillow-prize-1/sample_submission.csv', low_memory = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f8eea6b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:32.139691Z",
     "iopub.status.busy": "2024-04-15T14:07:32.139313Z",
     "iopub.status.idle": "2024-04-15T14:07:32.159413Z",
     "shell.execute_reply": "2024-04-15T14:07:32.157962Z"
    },
    "papermill": {
     "duration": 0.05458,
     "end_time": "2024-04-15T14:07:32.162320",
     "exception": false,
     "start_time": "2024-04-15T14:07:32.107740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ParcelId</th>\n",
       "      <th>201610</th>\n",
       "      <th>201611</th>\n",
       "      <th>201612</th>\n",
       "      <th>201710</th>\n",
       "      <th>201711</th>\n",
       "      <th>201712</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10754147</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10759547</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10843547</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10859147</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10879947</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ParcelId  201610  201611  201612  201710  201711  201712\n",
       "0  10754147       0       0       0       0       0       0\n",
       "1  10759547       0       0       0       0       0       0\n",
       "2  10843547       0       0       0       0       0       0\n",
       "3  10859147       0       0       0       0       0       0\n",
       "4  10879947       0       0       0       0       0       0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f69294cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:32.301612Z",
     "iopub.status.busy": "2024-04-15T14:07:32.301197Z",
     "iopub.status.idle": "2024-04-15T14:07:32.309744Z",
     "shell.execute_reply": "2024-04-15T14:07:32.308631Z"
    },
    "papermill": {
     "duration": 0.118885,
     "end_time": "2024-04-15T14:07:32.311978",
     "exception": false,
     "start_time": "2024-04-15T14:07:32.193093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2985217"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(sample_submission)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9493860f",
   "metadata": {
    "papermill": {
     "duration": 0.030409,
     "end_time": "2024-04-15T14:07:32.374845",
     "exception": false,
     "start_time": "2024-04-15T14:07:32.344436",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## STEP 2 : EDA &  Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b045a57d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:32.439522Z",
     "iopub.status.busy": "2024-04-15T14:07:32.439122Z",
     "iopub.status.idle": "2024-04-15T14:07:32.443761Z",
     "shell.execute_reply": "2024-04-15T14:07:32.442632Z"
    },
    "papermill": {
     "duration": 0.040043,
     "end_time": "2024-04-15T14:07:32.446301",
     "exception": false,
     "start_time": "2024-04-15T14:07:32.406258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lets check the basic attributes of all the four datasets like \n",
    "#shape, number of null values and few records to get a sense of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d5e99cca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:32.509003Z",
     "iopub.status.busy": "2024-04-15T14:07:32.508222Z",
     "iopub.status.idle": "2024-04-15T14:07:32.589502Z",
     "shell.execute_reply": "2024-04-15T14:07:32.588184Z"
    },
    "papermill": {
     "duration": 0.116117,
     "end_time": "2024-04-15T14:07:32.592509",
     "exception": false,
     "start_time": "2024-04-15T14:07:32.476392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <th>architecturalstyletypeid</th>\n",
       "      <th>basementsqft</th>\n",
       "      <th>bathroomcnt</th>\n",
       "      <th>bedroomcnt</th>\n",
       "      <th>buildingclasstypeid</th>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <th>calculatedbathnbr</th>\n",
       "      <th>decktypeid</th>\n",
       "      <th>finishedfloor1squarefeet</th>\n",
       "      <th>calculatedfinishedsquarefeet</th>\n",
       "      <th>finishedsquarefeet12</th>\n",
       "      <th>finishedsquarefeet13</th>\n",
       "      <th>finishedsquarefeet15</th>\n",
       "      <th>finishedsquarefeet50</th>\n",
       "      <th>finishedsquarefeet6</th>\n",
       "      <th>fips</th>\n",
       "      <th>fireplacecnt</th>\n",
       "      <th>fullbathcnt</th>\n",
       "      <th>garagecarcnt</th>\n",
       "      <th>garagetotalsqft</th>\n",
       "      <th>hashottuborspa</th>\n",
       "      <th>heatingorsystemtypeid</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>lotsizesquarefeet</th>\n",
       "      <th>poolcnt</th>\n",
       "      <th>poolsizesum</th>\n",
       "      <th>pooltypeid10</th>\n",
       "      <th>pooltypeid2</th>\n",
       "      <th>pooltypeid7</th>\n",
       "      <th>propertycountylandusecode</th>\n",
       "      <th>propertylandusetypeid</th>\n",
       "      <th>propertyzoningdesc</th>\n",
       "      <th>rawcensustractandblock</th>\n",
       "      <th>regionidcity</th>\n",
       "      <th>regionidcounty</th>\n",
       "      <th>regionidneighborhood</th>\n",
       "      <th>regionidzip</th>\n",
       "      <th>roomcnt</th>\n",
       "      <th>storytypeid</th>\n",
       "      <th>threequarterbathnbr</th>\n",
       "      <th>typeconstructiontypeid</th>\n",
       "      <th>unitcnt</th>\n",
       "      <th>yardbuildingsqft17</th>\n",
       "      <th>yardbuildingsqft26</th>\n",
       "      <th>yearbuilt</th>\n",
       "      <th>numberofstories</th>\n",
       "      <th>fireplaceflag</th>\n",
       "      <th>structuretaxvaluedollarcnt</th>\n",
       "      <th>taxvaluedollarcnt</th>\n",
       "      <th>assessmentyear</th>\n",
       "      <th>landtaxvaluedollarcnt</th>\n",
       "      <th>taxamount</th>\n",
       "      <th>taxdelinquencyflag</th>\n",
       "      <th>taxdelinquencyyear</th>\n",
       "      <th>censustractandblock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10754147</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6037.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34144440.0</td>\n",
       "      <td>-118654080.0</td>\n",
       "      <td>85768.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>010D</td>\n",
       "      <td>269.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>60378004.0</td>\n",
       "      <td>37688.0</td>\n",
       "      <td>3101.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>96337.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10759547</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6037.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34140432.0</td>\n",
       "      <td>-118625360.0</td>\n",
       "      <td>4083.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0109</td>\n",
       "      <td>261.0</td>\n",
       "      <td>LCA11*</td>\n",
       "      <td>60378000.0</td>\n",
       "      <td>37688.0</td>\n",
       "      <td>3101.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>96337.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>27516.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>27516.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10843547</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>73026.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>73026.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6037.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33989360.0</td>\n",
       "      <td>-118394632.0</td>\n",
       "      <td>63085.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1200</td>\n",
       "      <td>47.0</td>\n",
       "      <td>LAC2</td>\n",
       "      <td>60377032.0</td>\n",
       "      <td>51617.0</td>\n",
       "      <td>3101.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>96095.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>650756.0</td>\n",
       "      <td>1413387.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>762631.0</td>\n",
       "      <td>20800.369141</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10859147</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5068.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5068.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6037.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34148864.0</td>\n",
       "      <td>-118437208.0</td>\n",
       "      <td>7521.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1200</td>\n",
       "      <td>47.0</td>\n",
       "      <td>LAC2</td>\n",
       "      <td>60371412.0</td>\n",
       "      <td>12447.0</td>\n",
       "      <td>3101.0</td>\n",
       "      <td>27080.0</td>\n",
       "      <td>96424.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1948.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>571346.0</td>\n",
       "      <td>1156834.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>585488.0</td>\n",
       "      <td>14557.570312</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10879947</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1776.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1776.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6037.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34194168.0</td>\n",
       "      <td>-118385816.0</td>\n",
       "      <td>8512.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1210</td>\n",
       "      <td>31.0</td>\n",
       "      <td>LAM1</td>\n",
       "      <td>60371232.0</td>\n",
       "      <td>12447.0</td>\n",
       "      <td>3101.0</td>\n",
       "      <td>46795.0</td>\n",
       "      <td>96450.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1947.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>193796.0</td>\n",
       "      <td>433491.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>239695.0</td>\n",
       "      <td>5725.169922</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10898347</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6037.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34171872.0</td>\n",
       "      <td>-118380904.0</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1210</td>\n",
       "      <td>31.0</td>\n",
       "      <td>LAC4</td>\n",
       "      <td>60371252.0</td>\n",
       "      <td>12447.0</td>\n",
       "      <td>3101.0</td>\n",
       "      <td>46795.0</td>\n",
       "      <td>96446.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1943.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>176383.0</td>\n",
       "      <td>283315.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>106932.0</td>\n",
       "      <td>3661.280029</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10933547</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6037.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34131928.0</td>\n",
       "      <td>-118351472.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>010V</td>\n",
       "      <td>260.0</td>\n",
       "      <td>LAC2</td>\n",
       "      <td>60371436.0</td>\n",
       "      <td>12447.0</td>\n",
       "      <td>3101.0</td>\n",
       "      <td>274049.0</td>\n",
       "      <td>96049.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>397945.0</td>\n",
       "      <td>554573.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>156628.0</td>\n",
       "      <td>6773.339844</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10940747</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3611.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3611.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6037.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34171344.0</td>\n",
       "      <td>-118314896.0</td>\n",
       "      <td>5333.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1210</td>\n",
       "      <td>31.0</td>\n",
       "      <td>BUC4YY</td>\n",
       "      <td>60373108.0</td>\n",
       "      <td>396054.0</td>\n",
       "      <td>3101.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>96434.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>101998.0</td>\n",
       "      <td>688486.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>586488.0</td>\n",
       "      <td>7857.839844</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>10954547</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6037.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34218208.0</td>\n",
       "      <td>-118331312.0</td>\n",
       "      <td>145865.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>010D</td>\n",
       "      <td>269.0</td>\n",
       "      <td>BUR1*</td>\n",
       "      <td>60373100.0</td>\n",
       "      <td>396054.0</td>\n",
       "      <td>3101.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>96436.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10976347</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3754.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3754.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6037.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34289776.0</td>\n",
       "      <td>-118432088.0</td>\n",
       "      <td>7494.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1210</td>\n",
       "      <td>31.0</td>\n",
       "      <td>SFC2*</td>\n",
       "      <td>60373204.0</td>\n",
       "      <td>47547.0</td>\n",
       "      <td>3101.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>96366.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1978.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>218440.0</td>\n",
       "      <td>261201.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>42761.0</td>\n",
       "      <td>4054.760010</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   parcelid  airconditioningtypeid  architecturalstyletypeid  basementsqft  \\\n",
       "0  10754147                    NaN                       NaN           NaN   \n",
       "1  10759547                    NaN                       NaN           NaN   \n",
       "2  10843547                    NaN                       NaN           NaN   \n",
       "3  10859147                    NaN                       NaN           NaN   \n",
       "4  10879947                    NaN                       NaN           NaN   \n",
       "5  10898347                    NaN                       NaN           NaN   \n",
       "6  10933547                    NaN                       NaN           NaN   \n",
       "7  10940747                    NaN                       NaN           NaN   \n",
       "8  10954547                    NaN                       NaN           NaN   \n",
       "9  10976347                    NaN                       NaN           NaN   \n",
       "\n",
       "   bathroomcnt  bedroomcnt  buildingclasstypeid  buildingqualitytypeid  \\\n",
       "0          0.0         0.0                  NaN                    NaN   \n",
       "1          0.0         0.0                  NaN                    NaN   \n",
       "2          0.0         0.0                  NaN                    NaN   \n",
       "3          0.0         0.0                  3.0                    7.0   \n",
       "4          0.0         0.0                  4.0                    NaN   \n",
       "5          0.0         0.0                  4.0                    7.0   \n",
       "6          0.0         0.0                  NaN                    NaN   \n",
       "7          0.0         0.0                  NaN                    NaN   \n",
       "8          0.0         0.0                  NaN                    NaN   \n",
       "9          0.0         0.0                  3.0                    7.0   \n",
       "\n",
       "   calculatedbathnbr  decktypeid  finishedfloor1squarefeet  \\\n",
       "0                NaN         NaN                       NaN   \n",
       "1                NaN         NaN                       NaN   \n",
       "2                NaN         NaN                       NaN   \n",
       "3                NaN         NaN                       NaN   \n",
       "4                NaN         NaN                       NaN   \n",
       "5                NaN         NaN                       NaN   \n",
       "6                NaN         NaN                       NaN   \n",
       "7                NaN         NaN                       NaN   \n",
       "8                NaN         NaN                       NaN   \n",
       "9                NaN         NaN                       NaN   \n",
       "\n",
       "   calculatedfinishedsquarefeet  finishedsquarefeet12  finishedsquarefeet13  \\\n",
       "0                           NaN                   NaN                   NaN   \n",
       "1                           NaN                   NaN                   NaN   \n",
       "2                       73026.0                   NaN                   NaN   \n",
       "3                        5068.0                   NaN                   NaN   \n",
       "4                        1776.0                   NaN                   NaN   \n",
       "5                        2400.0                   NaN                   NaN   \n",
       "6                           NaN                   NaN                   NaN   \n",
       "7                        3611.0                   NaN                   NaN   \n",
       "8                           NaN                   NaN                   NaN   \n",
       "9                        3754.0                   NaN                   NaN   \n",
       "\n",
       "   finishedsquarefeet15  finishedsquarefeet50  finishedsquarefeet6    fips  \\\n",
       "0                   NaN                   NaN                  NaN  6037.0   \n",
       "1                   NaN                   NaN                  NaN  6037.0   \n",
       "2               73026.0                   NaN                  NaN  6037.0   \n",
       "3                5068.0                   NaN                  NaN  6037.0   \n",
       "4                1776.0                   NaN                  NaN  6037.0   \n",
       "5                2400.0                   NaN                  NaN  6037.0   \n",
       "6                   NaN                   NaN                  NaN  6037.0   \n",
       "7                3611.0                   NaN                  NaN  6037.0   \n",
       "8                   NaN                   NaN                  NaN  6037.0   \n",
       "9                3754.0                   NaN                  NaN  6037.0   \n",
       "\n",
       "   fireplacecnt  fullbathcnt  garagecarcnt  garagetotalsqft hashottuborspa  \\\n",
       "0           NaN          NaN           NaN              NaN            NaN   \n",
       "1           NaN          NaN           NaN              NaN            NaN   \n",
       "2           NaN          NaN           NaN              NaN            NaN   \n",
       "3           NaN          NaN           NaN              NaN            NaN   \n",
       "4           NaN          NaN           NaN              NaN            NaN   \n",
       "5           NaN          NaN           NaN              NaN            NaN   \n",
       "6           NaN          NaN           NaN              NaN            NaN   \n",
       "7           NaN          NaN           NaN              NaN            NaN   \n",
       "8           NaN          NaN           NaN              NaN            NaN   \n",
       "9           NaN          NaN           NaN              NaN            NaN   \n",
       "\n",
       "   heatingorsystemtypeid    latitude    longitude  lotsizesquarefeet  poolcnt  \\\n",
       "0                    NaN  34144440.0 -118654080.0            85768.0      NaN   \n",
       "1                    NaN  34140432.0 -118625360.0             4083.0      NaN   \n",
       "2                    NaN  33989360.0 -118394632.0            63085.0      NaN   \n",
       "3                    NaN  34148864.0 -118437208.0             7521.0      NaN   \n",
       "4                    NaN  34194168.0 -118385816.0             8512.0      NaN   \n",
       "5                    NaN  34171872.0 -118380904.0             2500.0      NaN   \n",
       "6                    NaN  34131928.0 -118351472.0                NaN      NaN   \n",
       "7                    NaN  34171344.0 -118314896.0             5333.0      NaN   \n",
       "8                    NaN  34218208.0 -118331312.0           145865.0      NaN   \n",
       "9                    NaN  34289776.0 -118432088.0             7494.0      NaN   \n",
       "\n",
       "   poolsizesum  pooltypeid10  pooltypeid2  pooltypeid7  \\\n",
       "0          NaN           NaN          NaN          NaN   \n",
       "1          NaN           NaN          NaN          NaN   \n",
       "2          NaN           NaN          NaN          NaN   \n",
       "3          NaN           NaN          NaN          NaN   \n",
       "4          NaN           NaN          NaN          NaN   \n",
       "5          NaN           NaN          NaN          NaN   \n",
       "6          NaN           NaN          NaN          NaN   \n",
       "7          NaN           NaN          NaN          NaN   \n",
       "8          NaN           NaN          NaN          NaN   \n",
       "9          NaN           NaN          NaN          NaN   \n",
       "\n",
       "  propertycountylandusecode  propertylandusetypeid propertyzoningdesc  \\\n",
       "0                      010D                  269.0                NaN   \n",
       "1                      0109                  261.0             LCA11*   \n",
       "2                      1200                   47.0               LAC2   \n",
       "3                      1200                   47.0               LAC2   \n",
       "4                      1210                   31.0               LAM1   \n",
       "5                      1210                   31.0               LAC4   \n",
       "6                      010V                  260.0               LAC2   \n",
       "7                      1210                   31.0             BUC4YY   \n",
       "8                      010D                  269.0              BUR1*   \n",
       "9                      1210                   31.0              SFC2*   \n",
       "\n",
       "   rawcensustractandblock  regionidcity  regionidcounty  regionidneighborhood  \\\n",
       "0              60378004.0       37688.0          3101.0                   NaN   \n",
       "1              60378000.0       37688.0          3101.0                   NaN   \n",
       "2              60377032.0       51617.0          3101.0                   NaN   \n",
       "3              60371412.0       12447.0          3101.0               27080.0   \n",
       "4              60371232.0       12447.0          3101.0               46795.0   \n",
       "5              60371252.0       12447.0          3101.0               46795.0   \n",
       "6              60371436.0       12447.0          3101.0              274049.0   \n",
       "7              60373108.0      396054.0          3101.0                   NaN   \n",
       "8              60373100.0      396054.0          3101.0                   NaN   \n",
       "9              60373204.0       47547.0          3101.0                   NaN   \n",
       "\n",
       "   regionidzip  roomcnt  storytypeid  threequarterbathnbr  \\\n",
       "0      96337.0      0.0          NaN                  NaN   \n",
       "1      96337.0      0.0          NaN                  NaN   \n",
       "2      96095.0      0.0          NaN                  NaN   \n",
       "3      96424.0      0.0          NaN                  NaN   \n",
       "4      96450.0      0.0          NaN                  NaN   \n",
       "5      96446.0      0.0          NaN                  NaN   \n",
       "6      96049.0      0.0          NaN                  NaN   \n",
       "7      96434.0      0.0          NaN                  NaN   \n",
       "8      96436.0      0.0          NaN                  NaN   \n",
       "9      96366.0      0.0          NaN                  NaN   \n",
       "\n",
       "   typeconstructiontypeid  unitcnt  yardbuildingsqft17  yardbuildingsqft26  \\\n",
       "0                     NaN      NaN                 NaN                 NaN   \n",
       "1                     NaN      NaN                 NaN                 NaN   \n",
       "2                     NaN      2.0                 NaN                 NaN   \n",
       "3                     NaN      NaN                 NaN                 NaN   \n",
       "4                     NaN      1.0                 NaN                 NaN   \n",
       "5                     NaN      NaN                 NaN                 NaN   \n",
       "6                     NaN      NaN                 NaN                 NaN   \n",
       "7                     NaN      NaN                 NaN                 NaN   \n",
       "8                     NaN      NaN                 NaN                 NaN   \n",
       "9                     NaN      NaN                 NaN                 NaN   \n",
       "\n",
       "   yearbuilt  numberofstories fireplaceflag  structuretaxvaluedollarcnt  \\\n",
       "0        NaN              NaN           NaN                         NaN   \n",
       "1        NaN              NaN           NaN                         NaN   \n",
       "2        NaN              NaN           NaN                    650756.0   \n",
       "3     1948.0              1.0           NaN                    571346.0   \n",
       "4     1947.0              NaN           NaN                    193796.0   \n",
       "5     1943.0              1.0           NaN                    176383.0   \n",
       "6        NaN              NaN           NaN                    397945.0   \n",
       "7     1946.0              1.0           NaN                    101998.0   \n",
       "8        NaN              NaN           NaN                         NaN   \n",
       "9     1978.0              1.0           NaN                    218440.0   \n",
       "\n",
       "   taxvaluedollarcnt  assessmentyear  landtaxvaluedollarcnt     taxamount  \\\n",
       "0                9.0          2015.0                    9.0           NaN   \n",
       "1            27516.0          2015.0                27516.0           NaN   \n",
       "2          1413387.0          2015.0               762631.0  20800.369141   \n",
       "3          1156834.0          2015.0               585488.0  14557.570312   \n",
       "4           433491.0          2015.0               239695.0   5725.169922   \n",
       "5           283315.0          2015.0               106932.0   3661.280029   \n",
       "6           554573.0          2015.0               156628.0   6773.339844   \n",
       "7           688486.0          2015.0               586488.0   7857.839844   \n",
       "8                9.0          2015.0                    9.0           NaN   \n",
       "9           261201.0          2015.0                42761.0   4054.760010   \n",
       "\n",
       "  taxdelinquencyflag  taxdelinquencyyear  censustractandblock  \n",
       "0                NaN                 NaN                  NaN  \n",
       "1                NaN                 NaN                  NaN  \n",
       "2                NaN                 NaN                  NaN  \n",
       "3                NaN                 NaN                  NaN  \n",
       "4                NaN                 NaN                  NaN  \n",
       "5                NaN                 NaN                  NaN  \n",
       "6                NaN                 NaN                  NaN  \n",
       "7                NaN                 NaN                  NaN  \n",
       "8                NaN                 NaN                  NaN  \n",
       "9                NaN                 NaN                  NaN  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "properties2016.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "18711ad4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:32.657590Z",
     "iopub.status.busy": "2024-04-15T14:07:32.656790Z",
     "iopub.status.idle": "2024-04-15T14:07:32.663867Z",
     "shell.execute_reply": "2024-04-15T14:07:32.662746Z"
    },
    "papermill": {
     "duration": 0.042309,
     "end_time": "2024-04-15T14:07:32.666373",
     "exception": false,
     "start_time": "2024-04-15T14:07:32.624064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2985217, 58)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "properties2016.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bd03dace",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:32.732223Z",
     "iopub.status.busy": "2024-04-15T14:07:32.731223Z",
     "iopub.status.idle": "2024-04-15T14:07:38.437377Z",
     "shell.execute_reply": "2024-04-15T14:07:38.436159Z"
    },
    "papermill": {
     "duration": 5.74202,
     "end_time": "2024-04-15T14:07:38.440051",
     "exception": false,
     "start_time": "2024-04-15T14:07:32.698031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <th>architecturalstyletypeid</th>\n",
       "      <th>basementsqft</th>\n",
       "      <th>bathroomcnt</th>\n",
       "      <th>bedroomcnt</th>\n",
       "      <th>buildingclasstypeid</th>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <th>calculatedbathnbr</th>\n",
       "      <th>decktypeid</th>\n",
       "      <th>finishedfloor1squarefeet</th>\n",
       "      <th>calculatedfinishedsquarefeet</th>\n",
       "      <th>finishedsquarefeet12</th>\n",
       "      <th>finishedsquarefeet13</th>\n",
       "      <th>finishedsquarefeet15</th>\n",
       "      <th>finishedsquarefeet50</th>\n",
       "      <th>finishedsquarefeet6</th>\n",
       "      <th>fips</th>\n",
       "      <th>fireplacecnt</th>\n",
       "      <th>fullbathcnt</th>\n",
       "      <th>garagecarcnt</th>\n",
       "      <th>garagetotalsqft</th>\n",
       "      <th>heatingorsystemtypeid</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>lotsizesquarefeet</th>\n",
       "      <th>poolcnt</th>\n",
       "      <th>poolsizesum</th>\n",
       "      <th>pooltypeid10</th>\n",
       "      <th>pooltypeid2</th>\n",
       "      <th>pooltypeid7</th>\n",
       "      <th>propertylandusetypeid</th>\n",
       "      <th>rawcensustractandblock</th>\n",
       "      <th>regionidcity</th>\n",
       "      <th>regionidcounty</th>\n",
       "      <th>regionidneighborhood</th>\n",
       "      <th>regionidzip</th>\n",
       "      <th>roomcnt</th>\n",
       "      <th>storytypeid</th>\n",
       "      <th>threequarterbathnbr</th>\n",
       "      <th>typeconstructiontypeid</th>\n",
       "      <th>unitcnt</th>\n",
       "      <th>yardbuildingsqft17</th>\n",
       "      <th>yardbuildingsqft26</th>\n",
       "      <th>yearbuilt</th>\n",
       "      <th>numberofstories</th>\n",
       "      <th>structuretaxvaluedollarcnt</th>\n",
       "      <th>taxvaluedollarcnt</th>\n",
       "      <th>assessmentyear</th>\n",
       "      <th>landtaxvaluedollarcnt</th>\n",
       "      <th>taxamount</th>\n",
       "      <th>taxdelinquencyyear</th>\n",
       "      <th>censustractandblock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.985217e+06</td>\n",
       "      <td>811519.000000</td>\n",
       "      <td>6061.000000</td>\n",
       "      <td>1628.000000</td>\n",
       "      <td>2.973755e+06</td>\n",
       "      <td>2.973767e+06</td>\n",
       "      <td>12629.000000</td>\n",
       "      <td>1.938488e+06</td>\n",
       "      <td>2.856305e+06</td>\n",
       "      <td>17096.0</td>\n",
       "      <td>202717.000000</td>\n",
       "      <td>2.929652e+06</td>\n",
       "      <td>2.709184e+06</td>\n",
       "      <td>7672.000000</td>\n",
       "      <td>190798.000000</td>\n",
       "      <td>202717.000000</td>\n",
       "      <td>22001.000000</td>\n",
       "      <td>2.973780e+06</td>\n",
       "      <td>312637.000000</td>\n",
       "      <td>2.856305e+06</td>\n",
       "      <td>883267.000000</td>\n",
       "      <td>883267.000000</td>\n",
       "      <td>1.806401e+06</td>\n",
       "      <td>2.973780e+06</td>\n",
       "      <td>2.973780e+06</td>\n",
       "      <td>2.709118e+06</td>\n",
       "      <td>517534.0</td>\n",
       "      <td>27960.000000</td>\n",
       "      <td>36939.0</td>\n",
       "      <td>32075.0</td>\n",
       "      <td>485459.0</td>\n",
       "      <td>2.973780e+06</td>\n",
       "      <td>2.973780e+06</td>\n",
       "      <td>2.922372e+06</td>\n",
       "      <td>2.973780e+06</td>\n",
       "      <td>1.156402e+06</td>\n",
       "      <td>2.971237e+06</td>\n",
       "      <td>2.973742e+06</td>\n",
       "      <td>1624.0</td>\n",
       "      <td>311631.000000</td>\n",
       "      <td>6747.000000</td>\n",
       "      <td>1.977490e+06</td>\n",
       "      <td>80355.000000</td>\n",
       "      <td>2647.000000</td>\n",
       "      <td>2.925289e+06</td>\n",
       "      <td>682069.000000</td>\n",
       "      <td>2.930235e+06</td>\n",
       "      <td>2.942667e+06</td>\n",
       "      <td>2.973778e+06</td>\n",
       "      <td>2.917484e+06</td>\n",
       "      <td>2.953967e+06</td>\n",
       "      <td>56464.000000</td>\n",
       "      <td>2.910091e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.332586e+07</td>\n",
       "      <td>1.931166</td>\n",
       "      <td>7.202607</td>\n",
       "      <td>646.883301</td>\n",
       "      <td>2.209142e+00</td>\n",
       "      <td>3.088949e+00</td>\n",
       "      <td>3.725948</td>\n",
       "      <td>5.784787e+00</td>\n",
       "      <td>2.299263e+00</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1380.630493</td>\n",
       "      <td>1.827163e+03</td>\n",
       "      <td>1.760001e+03</td>\n",
       "      <td>1178.900635</td>\n",
       "      <td>2739.187256</td>\n",
       "      <td>1388.945068</td>\n",
       "      <td>2414.340088</td>\n",
       "      <td>6.048034e+03</td>\n",
       "      <td>1.168710</td>\n",
       "      <td>2.244165e+00</td>\n",
       "      <td>1.823517</td>\n",
       "      <td>383.769318</td>\n",
       "      <td>4.012053e+00</td>\n",
       "      <td>3.400148e+07</td>\n",
       "      <td>-1.182019e+08</td>\n",
       "      <td>2.282280e+04</td>\n",
       "      <td>1.0</td>\n",
       "      <td>519.710999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.600484e+02</td>\n",
       "      <td>6.048344e+07</td>\n",
       "      <td>3.499336e+04</td>\n",
       "      <td>2.570461e+03</td>\n",
       "      <td>1.934764e+05</td>\n",
       "      <td>9.655263e+04</td>\n",
       "      <td>1.475018e+00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.010009</td>\n",
       "      <td>5.999556</td>\n",
       "      <td>1.181171e+00</td>\n",
       "      <td>319.803375</td>\n",
       "      <td>278.296570</td>\n",
       "      <td>1.964261e+03</td>\n",
       "      <td>1.401464</td>\n",
       "      <td>1.708836e+05</td>\n",
       "      <td>4.204791e+05</td>\n",
       "      <td>2.015000e+03</td>\n",
       "      <td>2.524780e+05</td>\n",
       "      <td>5.377607e+03</td>\n",
       "      <td>13.892409</td>\n",
       "      <td>6.048431e+13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7.909966e+06</td>\n",
       "      <td>3.148588</td>\n",
       "      <td>2.436291</td>\n",
       "      <td>538.793457</td>\n",
       "      <td>1.077754e+00</td>\n",
       "      <td>1.275859e+00</td>\n",
       "      <td>0.501700</td>\n",
       "      <td>1.805352e+00</td>\n",
       "      <td>1.000736e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>632.868530</td>\n",
       "      <td>1.819781e+03</td>\n",
       "      <td>9.710610e+02</td>\n",
       "      <td>357.073029</td>\n",
       "      <td>5447.428223</td>\n",
       "      <td>664.488708</td>\n",
       "      <td>7695.303223</td>\n",
       "      <td>2.023278e+01</td>\n",
       "      <td>0.461273</td>\n",
       "      <td>9.912054e-01</td>\n",
       "      <td>0.610035</td>\n",
       "      <td>245.443420</td>\n",
       "      <td>3.293733e+00</td>\n",
       "      <td>2.433812e+05</td>\n",
       "      <td>3.453171e+05</td>\n",
       "      <td>3.375924e+05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>191.323288</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.590817e+01</td>\n",
       "      <td>2.008117e+05</td>\n",
       "      <td>5.072747e+04</td>\n",
       "      <td>7.880712e+02</td>\n",
       "      <td>1.657133e+05</td>\n",
       "      <td>3.673175e+03</td>\n",
       "      <td>2.840403e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.117709</td>\n",
       "      <td>0.384050</td>\n",
       "      <td>2.447896e+00</td>\n",
       "      <td>233.086319</td>\n",
       "      <td>369.731506</td>\n",
       "      <td>2.344132e+01</td>\n",
       "      <td>0.539076</td>\n",
       "      <td>4.020683e+05</td>\n",
       "      <td>7.263466e+05</td>\n",
       "      <td>3.683165e-02</td>\n",
       "      <td>4.450132e+05</td>\n",
       "      <td>9.183107e+03</td>\n",
       "      <td>2.581006</td>\n",
       "      <td>3.249034e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.071172e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>66.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>112.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>6.037000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>3.332439e+07</td>\n",
       "      <td>-1.194758e+08</td>\n",
       "      <td>1.000000e+02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.100000e+01</td>\n",
       "      <td>6.037101e+07</td>\n",
       "      <td>3.491000e+03</td>\n",
       "      <td>1.286000e+03</td>\n",
       "      <td>6.952000e+03</td>\n",
       "      <td>9.598200e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.801000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.000000e+03</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.340000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.164371e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>272.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1012.000000</td>\n",
       "      <td>1.213000e+03</td>\n",
       "      <td>1.196000e+03</td>\n",
       "      <td>960.000000</td>\n",
       "      <td>1694.000000</td>\n",
       "      <td>1013.000000</td>\n",
       "      <td>1079.000000</td>\n",
       "      <td>6.037000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>324.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>3.382768e+07</td>\n",
       "      <td>-1.183930e+08</td>\n",
       "      <td>5.688000e+03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>430.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.610000e+02</td>\n",
       "      <td>6.037320e+07</td>\n",
       "      <td>1.244700e+04</td>\n",
       "      <td>2.061000e+03</td>\n",
       "      <td>4.673600e+04</td>\n",
       "      <td>9.618000e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>1.950000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.480000e+04</td>\n",
       "      <td>1.796750e+05</td>\n",
       "      <td>2.015000e+03</td>\n",
       "      <td>7.483600e+04</td>\n",
       "      <td>2.461070e+03</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>6.037400e+13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.254509e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>534.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>7.000000e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1283.000000</td>\n",
       "      <td>1.572000e+03</td>\n",
       "      <td>1.539000e+03</td>\n",
       "      <td>1296.000000</td>\n",
       "      <td>2172.000000</td>\n",
       "      <td>1284.000000</td>\n",
       "      <td>1992.000000</td>\n",
       "      <td>6.037000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>441.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>3.400825e+07</td>\n",
       "      <td>-1.181725e+08</td>\n",
       "      <td>7.000000e+03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>495.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.610000e+02</td>\n",
       "      <td>6.037571e+07</td>\n",
       "      <td>2.521800e+04</td>\n",
       "      <td>3.101000e+03</td>\n",
       "      <td>1.189200e+05</td>\n",
       "      <td>9.637700e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>1.963000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.225900e+05</td>\n",
       "      <td>3.060860e+05</td>\n",
       "      <td>2.015000e+03</td>\n",
       "      <td>1.670420e+05</td>\n",
       "      <td>3.991780e+03</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>6.037571e+13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.409712e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>847.250000</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>7.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1615.000000</td>\n",
       "      <td>2.136000e+03</td>\n",
       "      <td>2.070000e+03</td>\n",
       "      <td>1440.000000</td>\n",
       "      <td>2976.000000</td>\n",
       "      <td>1618.000000</td>\n",
       "      <td>3366.000000</td>\n",
       "      <td>6.059000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>494.000000</td>\n",
       "      <td>7.000000e+00</td>\n",
       "      <td>3.416186e+07</td>\n",
       "      <td>-1.179495e+08</td>\n",
       "      <td>9.898000e+03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>594.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.610000e+02</td>\n",
       "      <td>6.059042e+07</td>\n",
       "      <td>4.545700e+04</td>\n",
       "      <td>3.101000e+03</td>\n",
       "      <td>2.748000e+05</td>\n",
       "      <td>9.697400e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>390.000000</td>\n",
       "      <td>320.000000</td>\n",
       "      <td>1.981000e+03</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.968890e+05</td>\n",
       "      <td>4.880000e+05</td>\n",
       "      <td>2.015000e+03</td>\n",
       "      <td>3.069180e+05</td>\n",
       "      <td>6.201005e+03</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>6.059042e+13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.696019e+08</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>8516.000000</td>\n",
       "      <td>2.000000e+01</td>\n",
       "      <td>2.000000e+01</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.200000e+01</td>\n",
       "      <td>2.000000e+01</td>\n",
       "      <td>66.0</td>\n",
       "      <td>31303.000000</td>\n",
       "      <td>9.525760e+05</td>\n",
       "      <td>2.903450e+05</td>\n",
       "      <td>2688.000000</td>\n",
       "      <td>820242.000000</td>\n",
       "      <td>31303.000000</td>\n",
       "      <td>952576.000000</td>\n",
       "      <td>6.111000e+03</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2.000000e+01</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>7749.000000</td>\n",
       "      <td>2.400000e+01</td>\n",
       "      <td>3.481965e+07</td>\n",
       "      <td>-1.175543e+08</td>\n",
       "      <td>3.282638e+08</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17410.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.750000e+02</td>\n",
       "      <td>6.111009e+07</td>\n",
       "      <td>3.965560e+05</td>\n",
       "      <td>3.101000e+03</td>\n",
       "      <td>7.641670e+05</td>\n",
       "      <td>3.996750e+05</td>\n",
       "      <td>9.600000e+01</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>9.970000e+02</td>\n",
       "      <td>7983.000000</td>\n",
       "      <td>6141.000000</td>\n",
       "      <td>2.015000e+03</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>2.514860e+08</td>\n",
       "      <td>2.827860e+08</td>\n",
       "      <td>2.016000e+03</td>\n",
       "      <td>9.024622e+07</td>\n",
       "      <td>3.458861e+06</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>4.830301e+14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           parcelid  airconditioningtypeid  architecturalstyletypeid  \\\n",
       "count  2.985217e+06          811519.000000               6061.000000   \n",
       "mean   1.332586e+07               1.931166                  7.202607   \n",
       "std    7.909966e+06               3.148588                  2.436291   \n",
       "min    1.071172e+07               1.000000                  2.000000   \n",
       "25%    1.164371e+07               1.000000                  7.000000   \n",
       "50%    1.254509e+07               1.000000                  7.000000   \n",
       "75%    1.409712e+07               1.000000                  7.000000   \n",
       "max    1.696019e+08              13.000000                 27.000000   \n",
       "\n",
       "       basementsqft   bathroomcnt    bedroomcnt  buildingclasstypeid  \\\n",
       "count   1628.000000  2.973755e+06  2.973767e+06         12629.000000   \n",
       "mean     646.883301  2.209142e+00  3.088949e+00             3.725948   \n",
       "std      538.793457  1.077754e+00  1.275859e+00             0.501700   \n",
       "min       20.000000  0.000000e+00  0.000000e+00             1.000000   \n",
       "25%      272.000000  2.000000e+00  2.000000e+00             3.000000   \n",
       "50%      534.000000  2.000000e+00  3.000000e+00             4.000000   \n",
       "75%      847.250000  3.000000e+00  4.000000e+00             4.000000   \n",
       "max     8516.000000  2.000000e+01  2.000000e+01             5.000000   \n",
       "\n",
       "       buildingqualitytypeid  calculatedbathnbr  decktypeid  \\\n",
       "count           1.938488e+06       2.856305e+06     17096.0   \n",
       "mean            5.784787e+00       2.299263e+00        66.0   \n",
       "std             1.805352e+00       1.000736e+00         0.0   \n",
       "min             1.000000e+00       1.000000e+00        66.0   \n",
       "25%             4.000000e+00       2.000000e+00        66.0   \n",
       "50%             7.000000e+00       2.000000e+00        66.0   \n",
       "75%             7.000000e+00       3.000000e+00        66.0   \n",
       "max             1.200000e+01       2.000000e+01        66.0   \n",
       "\n",
       "       finishedfloor1squarefeet  calculatedfinishedsquarefeet  \\\n",
       "count             202717.000000                  2.929652e+06   \n",
       "mean                1380.630493                  1.827163e+03   \n",
       "std                  632.868530                  1.819781e+03   \n",
       "min                    3.000000                  1.000000e+00   \n",
       "25%                 1012.000000                  1.213000e+03   \n",
       "50%                 1283.000000                  1.572000e+03   \n",
       "75%                 1615.000000                  2.136000e+03   \n",
       "max                31303.000000                  9.525760e+05   \n",
       "\n",
       "       finishedsquarefeet12  finishedsquarefeet13  finishedsquarefeet15  \\\n",
       "count          2.709184e+06           7672.000000         190798.000000   \n",
       "mean           1.760001e+03           1178.900635           2739.187256   \n",
       "std            9.710610e+02            357.073029           5447.428223   \n",
       "min            1.000000e+00            120.000000            112.000000   \n",
       "25%            1.196000e+03            960.000000           1694.000000   \n",
       "50%            1.539000e+03           1296.000000           2172.000000   \n",
       "75%            2.070000e+03           1440.000000           2976.000000   \n",
       "max            2.903450e+05           2688.000000         820242.000000   \n",
       "\n",
       "       finishedsquarefeet50  finishedsquarefeet6          fips   fireplacecnt  \\\n",
       "count         202717.000000         22001.000000  2.973780e+06  312637.000000   \n",
       "mean            1388.945068          2414.340088  6.048034e+03       1.168710   \n",
       "std              664.488708          7695.303223  2.023278e+01       0.461273   \n",
       "min                3.000000           117.000000  6.037000e+03       1.000000   \n",
       "25%             1013.000000          1079.000000  6.037000e+03       1.000000   \n",
       "50%             1284.000000          1992.000000  6.037000e+03       1.000000   \n",
       "75%             1618.000000          3366.000000  6.059000e+03       1.000000   \n",
       "max            31303.000000        952576.000000  6.111000e+03       9.000000   \n",
       "\n",
       "        fullbathcnt   garagecarcnt  garagetotalsqft  heatingorsystemtypeid  \\\n",
       "count  2.856305e+06  883267.000000    883267.000000           1.806401e+06   \n",
       "mean   2.244165e+00       1.823517       383.769318           4.012053e+00   \n",
       "std    9.912054e-01       0.610035       245.443420           3.293733e+00   \n",
       "min    1.000000e+00       0.000000         0.000000           1.000000e+00   \n",
       "25%    2.000000e+00       2.000000       324.000000           2.000000e+00   \n",
       "50%    2.000000e+00       2.000000       441.000000           2.000000e+00   \n",
       "75%    3.000000e+00       2.000000       494.000000           7.000000e+00   \n",
       "max    2.000000e+01      25.000000      7749.000000           2.400000e+01   \n",
       "\n",
       "           latitude     longitude  lotsizesquarefeet   poolcnt   poolsizesum  \\\n",
       "count  2.973780e+06  2.973780e+06       2.709118e+06  517534.0  27960.000000   \n",
       "mean   3.400148e+07 -1.182019e+08       2.282280e+04       1.0    519.710999   \n",
       "std    2.433812e+05  3.453171e+05       3.375924e+05       0.0    191.323288   \n",
       "min    3.332439e+07 -1.194758e+08       1.000000e+02       1.0     19.000000   \n",
       "25%    3.382768e+07 -1.183930e+08       5.688000e+03       1.0    430.000000   \n",
       "50%    3.400825e+07 -1.181725e+08       7.000000e+03       1.0    495.000000   \n",
       "75%    3.416186e+07 -1.179495e+08       9.898000e+03       1.0    594.000000   \n",
       "max    3.481965e+07 -1.175543e+08       3.282638e+08       1.0  17410.000000   \n",
       "\n",
       "       pooltypeid10  pooltypeid2  pooltypeid7  propertylandusetypeid  \\\n",
       "count       36939.0      32075.0     485459.0           2.973780e+06   \n",
       "mean            1.0          1.0          1.0           2.600484e+02   \n",
       "std             0.0          0.0          0.0           1.590817e+01   \n",
       "min             1.0          1.0          1.0           3.100000e+01   \n",
       "25%             1.0          1.0          1.0           2.610000e+02   \n",
       "50%             1.0          1.0          1.0           2.610000e+02   \n",
       "75%             1.0          1.0          1.0           2.610000e+02   \n",
       "max             1.0          1.0          1.0           2.750000e+02   \n",
       "\n",
       "       rawcensustractandblock  regionidcity  regionidcounty  \\\n",
       "count            2.973780e+06  2.922372e+06    2.973780e+06   \n",
       "mean             6.048344e+07  3.499336e+04    2.570461e+03   \n",
       "std              2.008117e+05  5.072747e+04    7.880712e+02   \n",
       "min              6.037101e+07  3.491000e+03    1.286000e+03   \n",
       "25%              6.037320e+07  1.244700e+04    2.061000e+03   \n",
       "50%              6.037571e+07  2.521800e+04    3.101000e+03   \n",
       "75%              6.059042e+07  4.545700e+04    3.101000e+03   \n",
       "max              6.111009e+07  3.965560e+05    3.101000e+03   \n",
       "\n",
       "       regionidneighborhood   regionidzip       roomcnt  storytypeid  \\\n",
       "count          1.156402e+06  2.971237e+06  2.973742e+06       1624.0   \n",
       "mean           1.934764e+05  9.655263e+04  1.475018e+00          7.0   \n",
       "std            1.657133e+05  3.673175e+03  2.840403e+00          0.0   \n",
       "min            6.952000e+03  9.598200e+04  0.000000e+00          7.0   \n",
       "25%            4.673600e+04  9.618000e+04  0.000000e+00          7.0   \n",
       "50%            1.189200e+05  9.637700e+04  0.000000e+00          7.0   \n",
       "75%            2.748000e+05  9.697400e+04  0.000000e+00          7.0   \n",
       "max            7.641670e+05  3.996750e+05  9.600000e+01          7.0   \n",
       "\n",
       "       threequarterbathnbr  typeconstructiontypeid       unitcnt  \\\n",
       "count        311631.000000             6747.000000  1.977490e+06   \n",
       "mean              1.010009                5.999556  1.181171e+00   \n",
       "std               0.117709                0.384050  2.447896e+00   \n",
       "min               1.000000                4.000000  1.000000e+00   \n",
       "25%               1.000000                6.000000  1.000000e+00   \n",
       "50%               1.000000                6.000000  1.000000e+00   \n",
       "75%               1.000000                6.000000  1.000000e+00   \n",
       "max               7.000000               13.000000  9.970000e+02   \n",
       "\n",
       "       yardbuildingsqft17  yardbuildingsqft26     yearbuilt  numberofstories  \\\n",
       "count        80355.000000         2647.000000  2.925289e+06    682069.000000   \n",
       "mean           319.803375          278.296570  1.964261e+03         1.401464   \n",
       "std            233.086319          369.731506  2.344132e+01         0.539076   \n",
       "min             10.000000           10.000000  1.801000e+03         1.000000   \n",
       "25%            190.000000           96.000000  1.950000e+03         1.000000   \n",
       "50%            270.000000          168.000000  1.963000e+03         1.000000   \n",
       "75%            390.000000          320.000000  1.981000e+03         2.000000   \n",
       "max           7983.000000         6141.000000  2.015000e+03        41.000000   \n",
       "\n",
       "       structuretaxvaluedollarcnt  taxvaluedollarcnt  assessmentyear  \\\n",
       "count                2.930235e+06       2.942667e+06    2.973778e+06   \n",
       "mean                 1.708836e+05       4.204791e+05    2.015000e+03   \n",
       "std                  4.020683e+05       7.263466e+05    3.683165e-02   \n",
       "min                  1.000000e+00       1.000000e+00    2.000000e+03   \n",
       "25%                  7.480000e+04       1.796750e+05    2.015000e+03   \n",
       "50%                  1.225900e+05       3.060860e+05    2.015000e+03   \n",
       "75%                  1.968890e+05       4.880000e+05    2.015000e+03   \n",
       "max                  2.514860e+08       2.827860e+08    2.016000e+03   \n",
       "\n",
       "       landtaxvaluedollarcnt     taxamount  taxdelinquencyyear  \\\n",
       "count           2.917484e+06  2.953967e+06        56464.000000   \n",
       "mean            2.524780e+05  5.377607e+03           13.892409   \n",
       "std             4.450132e+05  9.183107e+03            2.581006   \n",
       "min             1.000000e+00  1.340000e+00            0.000000   \n",
       "25%             7.483600e+04  2.461070e+03           14.000000   \n",
       "50%             1.670420e+05  3.991780e+03           14.000000   \n",
       "75%             3.069180e+05  6.201005e+03           15.000000   \n",
       "max             9.024622e+07  3.458861e+06           99.000000   \n",
       "\n",
       "       censustractandblock  \n",
       "count         2.910091e+06  \n",
       "mean          6.048431e+13  \n",
       "std           3.249034e+11  \n",
       "min          -1.000000e+00  \n",
       "25%           6.037400e+13  \n",
       "50%           6.037571e+13  \n",
       "75%           6.059042e+13  \n",
       "max           4.830301e+14  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "properties2016.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "08a6e27b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:38.507818Z",
     "iopub.status.busy": "2024-04-15T14:07:38.507441Z",
     "iopub.status.idle": "2024-04-15T14:07:39.641295Z",
     "shell.execute_reply": "2024-04-15T14:07:39.639933Z"
    },
    "papermill": {
     "duration": 1.172136,
     "end_time": "2024-04-15T14:07:39.644993",
     "exception": false,
     "start_time": "2024-04-15T14:07:38.472857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "parcelid                         0.000000\n",
       "fips                             0.383121\n",
       "propertylandusetypeid            0.383121\n",
       "rawcensustractandblock           0.383121\n",
       "regionidcounty                   0.383121\n",
       "longitude                        0.383121\n",
       "latitude                         0.383121\n",
       "assessmentyear                   0.383188\n",
       "bedroomcnt                       0.383557\n",
       "bathroomcnt                      0.383959\n",
       "roomcnt                          0.384394\n",
       "propertycountylandusecode        0.411260\n",
       "regionidzip                      0.468308\n",
       "taxamount                        1.046825\n",
       "taxvaluedollarcnt                1.425357\n",
       "structuretaxvaluedollarcnt       1.841809\n",
       "calculatedfinishedsquarefeet     1.861339\n",
       "yearbuilt                        2.007492\n",
       "regionidcity                     2.105207\n",
       "landtaxvaluedollarcnt            2.268947\n",
       "censustractandblock              2.516601\n",
       "fullbathcnt                      4.318346\n",
       "calculatedbathnbr                4.318346\n",
       "finishedsquarefeet12             9.246664\n",
       "lotsizesquarefeet                9.248875\n",
       "propertyzoningdesc              33.719090\n",
       "unitcnt                         33.757244\n",
       "buildingqualitytypeid           35.063749\n",
       "heatingorsystemtypeid           39.488453\n",
       "regionidneighborhood            61.262381\n",
       "garagecarcnt                    70.411967\n",
       "garagetotalsqft                 70.411967\n",
       "airconditioningtypeid           72.815410\n",
       "numberofstories                 77.151778\n",
       "poolcnt                         82.663438\n",
       "pooltypeid7                     83.737899\n",
       "fireplacecnt                    89.527160\n",
       "threequarterbathnbr             89.560859\n",
       "finishedfloor1squarefeet        93.209304\n",
       "finishedsquarefeet50            93.209304\n",
       "finishedsquarefeet15            93.608572\n",
       "yardbuildingsqft17              97.308236\n",
       "hashottuborspa                  97.688141\n",
       "taxdelinquencyyear              98.108546\n",
       "taxdelinquencyflag              98.108613\n",
       "pooltypeid10                    98.762603\n",
       "pooltypeid2                     98.925539\n",
       "poolsizesum                     99.063385\n",
       "finishedsquarefeet6             99.263002\n",
       "decktypeid                      99.427311\n",
       "buildingclasstypeid             99.576949\n",
       "finishedsquarefeet13            99.743000\n",
       "typeconstructiontypeid          99.773986\n",
       "architecturalstyletypeid        99.796966\n",
       "fireplaceflag                   99.827048\n",
       "yardbuildingsqft26              99.911330\n",
       "basementsqft                    99.945465\n",
       "storytypeid                     99.945599\n",
       "dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(properties2016.isnull().sum()/len(properties2016)*100).sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c379f339",
   "metadata": {
    "papermill": {
     "duration": 0.040001,
     "end_time": "2024-04-15T14:07:39.718787",
     "exception": false,
     "start_time": "2024-04-15T14:07:39.678786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "00934454",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:39.801791Z",
     "iopub.status.busy": "2024-04-15T14:07:39.801285Z",
     "iopub.status.idle": "2024-04-15T14:07:39.808133Z",
     "shell.execute_reply": "2024-04-15T14:07:39.807186Z"
    },
    "papermill": {
     "duration": 0.057621,
     "end_time": "2024-04-15T14:07:39.812739",
     "exception": false,
     "start_time": "2024-04-15T14:07:39.755118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2985217, 58)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LEts check the size of the dataset\n",
    "properties2017.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d0740b8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:39.892100Z",
     "iopub.status.busy": "2024-04-15T14:07:39.891697Z",
     "iopub.status.idle": "2024-04-15T14:07:45.615017Z",
     "shell.execute_reply": "2024-04-15T14:07:45.614145Z"
    },
    "papermill": {
     "duration": 5.76149,
     "end_time": "2024-04-15T14:07:45.617421",
     "exception": false,
     "start_time": "2024-04-15T14:07:39.855931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <th>architecturalstyletypeid</th>\n",
       "      <th>basementsqft</th>\n",
       "      <th>bathroomcnt</th>\n",
       "      <th>bedroomcnt</th>\n",
       "      <th>buildingclasstypeid</th>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <th>calculatedbathnbr</th>\n",
       "      <th>decktypeid</th>\n",
       "      <th>finishedfloor1squarefeet</th>\n",
       "      <th>calculatedfinishedsquarefeet</th>\n",
       "      <th>finishedsquarefeet12</th>\n",
       "      <th>finishedsquarefeet13</th>\n",
       "      <th>finishedsquarefeet15</th>\n",
       "      <th>finishedsquarefeet50</th>\n",
       "      <th>finishedsquarefeet6</th>\n",
       "      <th>fips</th>\n",
       "      <th>fireplacecnt</th>\n",
       "      <th>fullbathcnt</th>\n",
       "      <th>garagecarcnt</th>\n",
       "      <th>garagetotalsqft</th>\n",
       "      <th>heatingorsystemtypeid</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>lotsizesquarefeet</th>\n",
       "      <th>poolcnt</th>\n",
       "      <th>poolsizesum</th>\n",
       "      <th>pooltypeid10</th>\n",
       "      <th>pooltypeid2</th>\n",
       "      <th>pooltypeid7</th>\n",
       "      <th>propertylandusetypeid</th>\n",
       "      <th>rawcensustractandblock</th>\n",
       "      <th>regionidcity</th>\n",
       "      <th>regionidcounty</th>\n",
       "      <th>regionidneighborhood</th>\n",
       "      <th>regionidzip</th>\n",
       "      <th>roomcnt</th>\n",
       "      <th>storytypeid</th>\n",
       "      <th>threequarterbathnbr</th>\n",
       "      <th>typeconstructiontypeid</th>\n",
       "      <th>unitcnt</th>\n",
       "      <th>yardbuildingsqft17</th>\n",
       "      <th>yardbuildingsqft26</th>\n",
       "      <th>yearbuilt</th>\n",
       "      <th>numberofstories</th>\n",
       "      <th>structuretaxvaluedollarcnt</th>\n",
       "      <th>taxvaluedollarcnt</th>\n",
       "      <th>assessmentyear</th>\n",
       "      <th>landtaxvaluedollarcnt</th>\n",
       "      <th>taxamount</th>\n",
       "      <th>taxdelinquencyyear</th>\n",
       "      <th>censustractandblock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.985217e+06</td>\n",
       "      <td>815362.000000</td>\n",
       "      <td>6061.000000</td>\n",
       "      <td>1627.000000</td>\n",
       "      <td>2.982260e+06</td>\n",
       "      <td>2.982272e+06</td>\n",
       "      <td>12731.000000</td>\n",
       "      <td>1.941395e+06</td>\n",
       "      <td>2.868061e+06</td>\n",
       "      <td>17379.0</td>\n",
       "      <td>203758.000000</td>\n",
       "      <td>2.940120e+06</td>\n",
       "      <td>2.720786e+06</td>\n",
       "      <td>7671.000000</td>\n",
       "      <td>190185.000000</td>\n",
       "      <td>203758.000000</td>\n",
       "      <td>21482.000000</td>\n",
       "      <td>2.982285e+06</td>\n",
       "      <td>313124.000000</td>\n",
       "      <td>2.868061e+06</td>\n",
       "      <td>891008.000000</td>\n",
       "      <td>891008.000000</td>\n",
       "      <td>1.869164e+06</td>\n",
       "      <td>2.982285e+06</td>\n",
       "      <td>2.982285e+06</td>\n",
       "      <td>2.712511e+06</td>\n",
       "      <td>539632.0</td>\n",
       "      <td>27958.000000</td>\n",
       "      <td>17006.0</td>\n",
       "      <td>33056.0</td>\n",
       "      <td>505895.0</td>\n",
       "      <td>2.982285e+06</td>\n",
       "      <td>2.982285e+06</td>\n",
       "      <td>2.923089e+06</td>\n",
       "      <td>2.982285e+06</td>\n",
       "      <td>1.156741e+06</td>\n",
       "      <td>2.972503e+06</td>\n",
       "      <td>2.982248e+06</td>\n",
       "      <td>1623.0</td>\n",
       "      <td>316357.000000</td>\n",
       "      <td>6746.000000</td>\n",
       "      <td>1.981042e+06</td>\n",
       "      <td>81588.000000</td>\n",
       "      <td>2646.000000</td>\n",
       "      <td>2.937384e+06</td>\n",
       "      <td>685676.000000</td>\n",
       "      <td>2.938753e+06</td>\n",
       "      <td>2.950951e+06</td>\n",
       "      <td>2.982284e+06</td>\n",
       "      <td>2.925291e+06</td>\n",
       "      <td>2.962465e+06</td>\n",
       "      <td>56517.000000</td>\n",
       "      <td>2.910232e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.332586e+07</td>\n",
       "      <td>1.945724</td>\n",
       "      <td>7.202607</td>\n",
       "      <td>647.220642</td>\n",
       "      <td>2.216196e+00</td>\n",
       "      <td>3.093362e+00</td>\n",
       "      <td>3.734742</td>\n",
       "      <td>6.280822e+00</td>\n",
       "      <td>2.303826e+00</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1379.780518</td>\n",
       "      <td>1.831456e+03</td>\n",
       "      <td>1.764045e+03</td>\n",
       "      <td>1178.916748</td>\n",
       "      <td>2754.870117</td>\n",
       "      <td>1392.029053</td>\n",
       "      <td>2427.554199</td>\n",
       "      <td>6.048051e+03</td>\n",
       "      <td>1.168959</td>\n",
       "      <td>2.248089e+00</td>\n",
       "      <td>1.826581</td>\n",
       "      <td>383.156219</td>\n",
       "      <td>4.083750e+00</td>\n",
       "      <td>3.400130e+07</td>\n",
       "      <td>-1.182016e+08</td>\n",
       "      <td>2.260375e+04</td>\n",
       "      <td>1.0</td>\n",
       "      <td>519.715454</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.600509e+02</td>\n",
       "      <td>6.048368e+07</td>\n",
       "      <td>3.498767e+04</td>\n",
       "      <td>2.569085e+03</td>\n",
       "      <td>1.935387e+05</td>\n",
       "      <td>9.655330e+04</td>\n",
       "      <td>1.474357e+00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.010611</td>\n",
       "      <td>5.999555</td>\n",
       "      <td>1.180303e+00</td>\n",
       "      <td>321.541626</td>\n",
       "      <td>278.365448</td>\n",
       "      <td>1.964437e+03</td>\n",
       "      <td>1.400956</td>\n",
       "      <td>1.781428e+05</td>\n",
       "      <td>4.435282e+05</td>\n",
       "      <td>2.016000e+03</td>\n",
       "      <td>2.684557e+05</td>\n",
       "      <td>5.408948e+03</td>\n",
       "      <td>13.891696</td>\n",
       "      <td>6.048433e+13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7.909966e+06</td>\n",
       "      <td>3.160507</td>\n",
       "      <td>2.436291</td>\n",
       "      <td>538.787109</td>\n",
       "      <td>1.078250e+00</td>\n",
       "      <td>1.271569e+00</td>\n",
       "      <td>0.500371</td>\n",
       "      <td>1.729923e+00</td>\n",
       "      <td>1.003243e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>634.422852</td>\n",
       "      <td>1.954198e+03</td>\n",
       "      <td>1.031383e+03</td>\n",
       "      <td>357.093567</td>\n",
       "      <td>5999.379883</td>\n",
       "      <td>682.323853</td>\n",
       "      <td>7786.185059</td>\n",
       "      <td>2.024082e+01</td>\n",
       "      <td>0.461855</td>\n",
       "      <td>9.929959e-01</td>\n",
       "      <td>0.608934</td>\n",
       "      <td>246.219421</td>\n",
       "      <td>3.286780e+00</td>\n",
       "      <td>2.435157e+05</td>\n",
       "      <td>3.455918e+05</td>\n",
       "      <td>2.499836e+05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>191.325867</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.593121e+01</td>\n",
       "      <td>2.008914e+05</td>\n",
       "      <td>5.070968e+04</td>\n",
       "      <td>7.886840e+02</td>\n",
       "      <td>1.657253e+05</td>\n",
       "      <td>3.680815e+03</td>\n",
       "      <td>2.839869e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.120602</td>\n",
       "      <td>0.384079</td>\n",
       "      <td>2.486949e+00</td>\n",
       "      <td>236.884781</td>\n",
       "      <td>369.784393</td>\n",
       "      <td>2.364428e+01</td>\n",
       "      <td>0.539056</td>\n",
       "      <td>4.600503e+05</td>\n",
       "      <td>8.163366e+05</td>\n",
       "      <td>6.039952e-02</td>\n",
       "      <td>4.865097e+05</td>\n",
       "      <td>9.675566e+03</td>\n",
       "      <td>2.562172</td>\n",
       "      <td>3.249133e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.071172e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>112.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>6.037000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>3.332439e+07</td>\n",
       "      <td>-1.194758e+08</td>\n",
       "      <td>1.000000e+02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.100000e+01</td>\n",
       "      <td>6.037101e+07</td>\n",
       "      <td>3.491000e+03</td>\n",
       "      <td>1.286000e+03</td>\n",
       "      <td>6.952000e+03</td>\n",
       "      <td>9.598200e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.801000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.000000e+03</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.400000e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.164371e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>272.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1010.000000</td>\n",
       "      <td>1.215000e+03</td>\n",
       "      <td>1.198000e+03</td>\n",
       "      <td>960.000000</td>\n",
       "      <td>1696.000000</td>\n",
       "      <td>1012.000000</td>\n",
       "      <td>1072.000000</td>\n",
       "      <td>6.037000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>312.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>3.382740e+07</td>\n",
       "      <td>-1.183929e+08</td>\n",
       "      <td>5.683000e+03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>430.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.610000e+02</td>\n",
       "      <td>6.037400e+07</td>\n",
       "      <td>1.244700e+04</td>\n",
       "      <td>1.286000e+03</td>\n",
       "      <td>4.673600e+04</td>\n",
       "      <td>9.618000e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>1.950000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.766600e+04</td>\n",
       "      <td>1.882200e+05</td>\n",
       "      <td>2.016000e+03</td>\n",
       "      <td>7.970000e+04</td>\n",
       "      <td>2.468620e+03</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>6.037400e+13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.254509e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>535.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1281.000000</td>\n",
       "      <td>1.574000e+03</td>\n",
       "      <td>1.542000e+03</td>\n",
       "      <td>1296.000000</td>\n",
       "      <td>2173.000000</td>\n",
       "      <td>1284.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>6.037000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>441.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>3.400807e+07</td>\n",
       "      <td>-1.181721e+08</td>\n",
       "      <td>7.000000e+03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>495.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.610000e+02</td>\n",
       "      <td>6.037571e+07</td>\n",
       "      <td>2.521800e+04</td>\n",
       "      <td>3.101000e+03</td>\n",
       "      <td>1.189200e+05</td>\n",
       "      <td>9.637700e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>1.963000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.270660e+05</td>\n",
       "      <td>3.211610e+05</td>\n",
       "      <td>2.016000e+03</td>\n",
       "      <td>1.766190e+05</td>\n",
       "      <td>4.007620e+03</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>6.037571e+13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.409712e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>847.500000</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1615.000000</td>\n",
       "      <td>2.140000e+03</td>\n",
       "      <td>2.075000e+03</td>\n",
       "      <td>1440.000000</td>\n",
       "      <td>2975.000000</td>\n",
       "      <td>1619.000000</td>\n",
       "      <td>3411.000000</td>\n",
       "      <td>6.059000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>494.000000</td>\n",
       "      <td>7.000000e+00</td>\n",
       "      <td>3.416186e+07</td>\n",
       "      <td>-1.179489e+08</td>\n",
       "      <td>9.893000e+03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>594.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.610000e+02</td>\n",
       "      <td>6.059042e+07</td>\n",
       "      <td>4.545700e+04</td>\n",
       "      <td>3.101000e+03</td>\n",
       "      <td>2.748000e+05</td>\n",
       "      <td>9.697400e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>390.000000</td>\n",
       "      <td>320.000000</td>\n",
       "      <td>1.981000e+03</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.040000e+05</td>\n",
       "      <td>5.140720e+05</td>\n",
       "      <td>2.016000e+03</td>\n",
       "      <td>3.261000e+05</td>\n",
       "      <td>6.230500e+03</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>6.059042e+13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.696019e+08</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>8516.000000</td>\n",
       "      <td>3.200000e+01</td>\n",
       "      <td>2.500000e+01</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.200000e+01</td>\n",
       "      <td>3.200000e+01</td>\n",
       "      <td>66.0</td>\n",
       "      <td>31303.000000</td>\n",
       "      <td>9.525760e+05</td>\n",
       "      <td>4.270790e+05</td>\n",
       "      <td>2688.000000</td>\n",
       "      <td>820242.000000</td>\n",
       "      <td>41906.000000</td>\n",
       "      <td>952576.000000</td>\n",
       "      <td>6.111000e+03</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>3.200000e+01</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>7749.000000</td>\n",
       "      <td>2.400000e+01</td>\n",
       "      <td>3.481965e+07</td>\n",
       "      <td>-1.175543e+08</td>\n",
       "      <td>3.710005e+08</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17410.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.790000e+02</td>\n",
       "      <td>6.111009e+07</td>\n",
       "      <td>3.965560e+05</td>\n",
       "      <td>3.101000e+03</td>\n",
       "      <td>7.641670e+05</td>\n",
       "      <td>3.996750e+05</td>\n",
       "      <td>9.600000e+01</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>9.970000e+02</td>\n",
       "      <td>7983.000000</td>\n",
       "      <td>6141.000000</td>\n",
       "      <td>2.016000e+03</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>2.553212e+08</td>\n",
       "      <td>3.196225e+08</td>\n",
       "      <td>2.016000e+03</td>\n",
       "      <td>9.401108e+07</td>\n",
       "      <td>3.823176e+06</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>4.830301e+14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           parcelid  airconditioningtypeid  architecturalstyletypeid  \\\n",
       "count  2.985217e+06          815362.000000               6061.000000   \n",
       "mean   1.332586e+07               1.945724                  7.202607   \n",
       "std    7.909966e+06               3.160507                  2.436291   \n",
       "min    1.071172e+07               1.000000                  2.000000   \n",
       "25%    1.164371e+07               1.000000                  7.000000   \n",
       "50%    1.254509e+07               1.000000                  7.000000   \n",
       "75%    1.409712e+07               1.000000                  7.000000   \n",
       "max    1.696019e+08              13.000000                 27.000000   \n",
       "\n",
       "       basementsqft   bathroomcnt    bedroomcnt  buildingclasstypeid  \\\n",
       "count   1627.000000  2.982260e+06  2.982272e+06         12731.000000   \n",
       "mean     647.220642  2.216196e+00  3.093362e+00             3.734742   \n",
       "std      538.787109  1.078250e+00  1.271569e+00             0.500371   \n",
       "min       20.000000  0.000000e+00  0.000000e+00             1.000000   \n",
       "25%      272.000000  2.000000e+00  2.000000e+00             3.000000   \n",
       "50%      535.000000  2.000000e+00  3.000000e+00             4.000000   \n",
       "75%      847.500000  3.000000e+00  4.000000e+00             4.000000   \n",
       "max     8516.000000  3.200000e+01  2.500000e+01             5.000000   \n",
       "\n",
       "       buildingqualitytypeid  calculatedbathnbr  decktypeid  \\\n",
       "count           1.941395e+06       2.868061e+06     17379.0   \n",
       "mean            6.280822e+00       2.303826e+00        66.0   \n",
       "std             1.729923e+00       1.003243e+00         0.0   \n",
       "min             1.000000e+00       1.000000e+00        66.0   \n",
       "25%             5.000000e+00       2.000000e+00        66.0   \n",
       "50%             6.000000e+00       2.000000e+00        66.0   \n",
       "75%             8.000000e+00       3.000000e+00        66.0   \n",
       "max             1.200000e+01       3.200000e+01        66.0   \n",
       "\n",
       "       finishedfloor1squarefeet  calculatedfinishedsquarefeet  \\\n",
       "count             203758.000000                  2.940120e+06   \n",
       "mean                1379.780518                  1.831456e+03   \n",
       "std                  634.422852                  1.954198e+03   \n",
       "min                    1.000000                  1.000000e+00   \n",
       "25%                 1010.000000                  1.215000e+03   \n",
       "50%                 1281.000000                  1.574000e+03   \n",
       "75%                 1615.000000                  2.140000e+03   \n",
       "max                31303.000000                  9.525760e+05   \n",
       "\n",
       "       finishedsquarefeet12  finishedsquarefeet13  finishedsquarefeet15  \\\n",
       "count          2.720786e+06           7671.000000         190185.000000   \n",
       "mean           1.764045e+03           1178.916748           2754.870117   \n",
       "std            1.031383e+03            357.093567           5999.379883   \n",
       "min            1.000000e+00            120.000000            112.000000   \n",
       "25%            1.198000e+03            960.000000           1696.000000   \n",
       "50%            1.542000e+03           1296.000000           2173.000000   \n",
       "75%            2.075000e+03           1440.000000           2975.000000   \n",
       "max            4.270790e+05           2688.000000         820242.000000   \n",
       "\n",
       "       finishedsquarefeet50  finishedsquarefeet6          fips   fireplacecnt  \\\n",
       "count         203758.000000         21482.000000  2.982285e+06  313124.000000   \n",
       "mean            1392.029053          2427.554199  6.048051e+03       1.168959   \n",
       "std              682.323853          7786.185059  2.024082e+01       0.461855   \n",
       "min                3.000000           117.000000  6.037000e+03       1.000000   \n",
       "25%             1012.000000          1072.000000  6.037000e+03       1.000000   \n",
       "50%             1284.000000          2008.000000  6.037000e+03       1.000000   \n",
       "75%             1619.000000          3411.000000  6.059000e+03       1.000000   \n",
       "max            41906.000000        952576.000000  6.111000e+03       9.000000   \n",
       "\n",
       "        fullbathcnt   garagecarcnt  garagetotalsqft  heatingorsystemtypeid  \\\n",
       "count  2.868061e+06  891008.000000    891008.000000           1.869164e+06   \n",
       "mean   2.248089e+00       1.826581       383.156219           4.083750e+00   \n",
       "std    9.929959e-01       0.608934       246.219421           3.286780e+00   \n",
       "min    1.000000e+00       0.000000         0.000000           1.000000e+00   \n",
       "25%    2.000000e+00       2.000000       312.000000           2.000000e+00   \n",
       "50%    2.000000e+00       2.000000       441.000000           2.000000e+00   \n",
       "75%    3.000000e+00       2.000000       494.000000           7.000000e+00   \n",
       "max    3.200000e+01      25.000000      7749.000000           2.400000e+01   \n",
       "\n",
       "           latitude     longitude  lotsizesquarefeet   poolcnt   poolsizesum  \\\n",
       "count  2.982285e+06  2.982285e+06       2.712511e+06  539632.0  27958.000000   \n",
       "mean   3.400130e+07 -1.182016e+08       2.260375e+04       1.0    519.715454   \n",
       "std    2.435157e+05  3.455918e+05       2.499836e+05       0.0    191.325867   \n",
       "min    3.332439e+07 -1.194758e+08       1.000000e+02       1.0     19.000000   \n",
       "25%    3.382740e+07 -1.183929e+08       5.683000e+03       1.0    430.000000   \n",
       "50%    3.400807e+07 -1.181721e+08       7.000000e+03       1.0    495.000000   \n",
       "75%    3.416186e+07 -1.179489e+08       9.893000e+03       1.0    594.000000   \n",
       "max    3.481965e+07 -1.175543e+08       3.710005e+08       1.0  17410.000000   \n",
       "\n",
       "       pooltypeid10  pooltypeid2  pooltypeid7  propertylandusetypeid  \\\n",
       "count       17006.0      33056.0     505895.0           2.982285e+06   \n",
       "mean            1.0          1.0          1.0           2.600509e+02   \n",
       "std             0.0          0.0          0.0           1.593121e+01   \n",
       "min             1.0          1.0          1.0           3.100000e+01   \n",
       "25%             1.0          1.0          1.0           2.610000e+02   \n",
       "50%             1.0          1.0          1.0           2.610000e+02   \n",
       "75%             1.0          1.0          1.0           2.610000e+02   \n",
       "max             1.0          1.0          1.0           2.790000e+02   \n",
       "\n",
       "       rawcensustractandblock  regionidcity  regionidcounty  \\\n",
       "count            2.982285e+06  2.923089e+06    2.982285e+06   \n",
       "mean             6.048368e+07  3.498767e+04    2.569085e+03   \n",
       "std              2.008914e+05  5.070968e+04    7.886840e+02   \n",
       "min              6.037101e+07  3.491000e+03    1.286000e+03   \n",
       "25%              6.037400e+07  1.244700e+04    1.286000e+03   \n",
       "50%              6.037571e+07  2.521800e+04    3.101000e+03   \n",
       "75%              6.059042e+07  4.545700e+04    3.101000e+03   \n",
       "max              6.111009e+07  3.965560e+05    3.101000e+03   \n",
       "\n",
       "       regionidneighborhood   regionidzip       roomcnt  storytypeid  \\\n",
       "count          1.156741e+06  2.972503e+06  2.982248e+06       1623.0   \n",
       "mean           1.935387e+05  9.655330e+04  1.474357e+00          7.0   \n",
       "std            1.657253e+05  3.680815e+03  2.839869e+00          0.0   \n",
       "min            6.952000e+03  9.598200e+04  0.000000e+00          7.0   \n",
       "25%            4.673600e+04  9.618000e+04  0.000000e+00          7.0   \n",
       "50%            1.189200e+05  9.637700e+04  0.000000e+00          7.0   \n",
       "75%            2.748000e+05  9.697400e+04  0.000000e+00          7.0   \n",
       "max            7.641670e+05  3.996750e+05  9.600000e+01          7.0   \n",
       "\n",
       "       threequarterbathnbr  typeconstructiontypeid       unitcnt  \\\n",
       "count        316357.000000             6746.000000  1.981042e+06   \n",
       "mean              1.010611                5.999555  1.180303e+00   \n",
       "std               0.120602                0.384079  2.486949e+00   \n",
       "min               1.000000                4.000000  1.000000e+00   \n",
       "25%               1.000000                6.000000  1.000000e+00   \n",
       "50%               1.000000                6.000000  1.000000e+00   \n",
       "75%               1.000000                6.000000  1.000000e+00   \n",
       "max               7.000000               13.000000  9.970000e+02   \n",
       "\n",
       "       yardbuildingsqft17  yardbuildingsqft26     yearbuilt  numberofstories  \\\n",
       "count        81588.000000         2646.000000  2.937384e+06    685676.000000   \n",
       "mean           321.541626          278.365448  1.964437e+03         1.400956   \n",
       "std            236.884781          369.784393  2.364428e+01         0.539056   \n",
       "min             10.000000           10.000000  1.801000e+03         1.000000   \n",
       "25%            190.000000           96.000000  1.950000e+03         1.000000   \n",
       "50%            270.000000          168.000000  1.963000e+03         1.000000   \n",
       "75%            390.000000          320.000000  1.981000e+03         2.000000   \n",
       "max           7983.000000         6141.000000  2.016000e+03        41.000000   \n",
       "\n",
       "       structuretaxvaluedollarcnt  taxvaluedollarcnt  assessmentyear  \\\n",
       "count                2.938753e+06       2.950951e+06    2.982284e+06   \n",
       "mean                 1.781428e+05       4.435282e+05    2.016000e+03   \n",
       "std                  4.600503e+05       8.163366e+05    6.039952e-02   \n",
       "min                  1.000000e+00       1.000000e+00    2.000000e+03   \n",
       "25%                  7.766600e+04       1.882200e+05    2.016000e+03   \n",
       "50%                  1.270660e+05       3.211610e+05    2.016000e+03   \n",
       "75%                  2.040000e+05       5.140720e+05    2.016000e+03   \n",
       "max                  2.553212e+08       3.196225e+08    2.016000e+03   \n",
       "\n",
       "       landtaxvaluedollarcnt     taxamount  taxdelinquencyyear  \\\n",
       "count           2.925291e+06  2.962465e+06        56517.000000   \n",
       "mean            2.684557e+05  5.408948e+03           13.891696   \n",
       "std             4.865097e+05  9.675566e+03            2.562172   \n",
       "min             1.000000e+00  2.400000e-01            0.000000   \n",
       "25%             7.970000e+04  2.468620e+03           14.000000   \n",
       "50%             1.766190e+05  4.007620e+03           14.000000   \n",
       "75%             3.261000e+05  6.230500e+03           15.000000   \n",
       "max             9.401108e+07  3.823176e+06           99.000000   \n",
       "\n",
       "       censustractandblock  \n",
       "count         2.910232e+06  \n",
       "mean          6.048433e+13  \n",
       "std           3.249133e+11  \n",
       "min          -1.000000e+00  \n",
       "25%           6.037400e+13  \n",
       "50%           6.037571e+13  \n",
       "75%           6.059042e+13  \n",
       "max           4.830301e+14  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "properties2017.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "302acf73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:45.688247Z",
     "iopub.status.busy": "2024-04-15T14:07:45.687530Z",
     "iopub.status.idle": "2024-04-15T14:07:46.796349Z",
     "shell.execute_reply": "2024-04-15T14:07:46.795137Z"
    },
    "papermill": {
     "duration": 1.147478,
     "end_time": "2024-04-15T14:07:46.799258",
     "exception": false,
     "start_time": "2024-04-15T14:07:45.651780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "parcelid                         0.000000\n",
       "fips                             0.098217\n",
       "propertylandusetypeid            0.098217\n",
       "rawcensustractandblock           0.098217\n",
       "regionidcounty                   0.098217\n",
       "longitude                        0.098217\n",
       "latitude                         0.098217\n",
       "assessmentyear                   0.098251\n",
       "bedroomcnt                       0.098653\n",
       "bathroomcnt                      0.099055\n",
       "roomcnt                          0.099457\n",
       "propertycountylandusecode        0.100462\n",
       "regionidzip                      0.425899\n",
       "taxamount                        0.762156\n",
       "taxvaluedollarcnt                1.147856\n",
       "calculatedfinishedsquarefeet     1.510677\n",
       "structuretaxvaluedollarcnt       1.556470\n",
       "yearbuilt                        1.602329\n",
       "landtaxvaluedollarcnt            2.007425\n",
       "regionidcity                     2.081189\n",
       "censustractandblock              2.511878\n",
       "fullbathcnt                      3.924539\n",
       "calculatedbathnbr                3.924539\n",
       "finishedsquarefeet12             8.858016\n",
       "lotsizesquarefeet                9.135215\n",
       "propertyzoningdesc              33.590389\n",
       "unitcnt                         33.638258\n",
       "buildingqualitytypeid           34.966369\n",
       "heatingorsystemtypeid           37.385992\n",
       "regionidneighborhood            61.251025\n",
       "garagecarcnt                    70.152656\n",
       "garagetotalsqft                 70.152656\n",
       "airconditioningtypeid           72.686676\n",
       "numberofstories                 77.030950\n",
       "poolcnt                         81.923190\n",
       "pooltypeid7                     83.053326\n",
       "threequarterbathnbr             89.402546\n",
       "fireplacecnt                    89.510846\n",
       "finishedfloor1squarefeet        93.174433\n",
       "finishedsquarefeet50            93.174433\n",
       "finishedsquarefeet15            93.629106\n",
       "yardbuildingsqft17              97.266932\n",
       "taxdelinquencyyear              98.106771\n",
       "taxdelinquencyflag              98.106838\n",
       "hashottuborspa                  98.323003\n",
       "pooltypeid2                     98.892677\n",
       "poolsizesum                     99.063452\n",
       "finishedsquarefeet6             99.280387\n",
       "decktypeid                      99.417831\n",
       "pooltypeid10                    99.430326\n",
       "buildingclasstypeid             99.573532\n",
       "finishedsquarefeet13            99.743034\n",
       "typeconstructiontypeid          99.774020\n",
       "architecturalstyletypeid        99.796966\n",
       "fireplaceflag                   99.827048\n",
       "yardbuildingsqft26              99.911363\n",
       "basementsqft                    99.945498\n",
       "storytypeid                     99.945632\n",
       "dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking percentage of null values\n",
    "(properties2017.isnull().sum()/len(properties2017) * 100).sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c950fa28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:46.873284Z",
     "iopub.status.busy": "2024-04-15T14:07:46.872572Z",
     "iopub.status.idle": "2024-04-15T14:07:46.930339Z",
     "shell.execute_reply": "2024-04-15T14:07:46.929160Z"
    },
    "papermill": {
     "duration": 0.097142,
     "end_time": "2024-04-15T14:07:46.932781",
     "exception": false,
     "start_time": "2024-04-15T14:07:46.835639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <th>architecturalstyletypeid</th>\n",
       "      <th>basementsqft</th>\n",
       "      <th>bathroomcnt</th>\n",
       "      <th>bedroomcnt</th>\n",
       "      <th>buildingclasstypeid</th>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <th>calculatedbathnbr</th>\n",
       "      <th>decktypeid</th>\n",
       "      <th>finishedfloor1squarefeet</th>\n",
       "      <th>calculatedfinishedsquarefeet</th>\n",
       "      <th>finishedsquarefeet12</th>\n",
       "      <th>finishedsquarefeet13</th>\n",
       "      <th>finishedsquarefeet15</th>\n",
       "      <th>finishedsquarefeet50</th>\n",
       "      <th>finishedsquarefeet6</th>\n",
       "      <th>fips</th>\n",
       "      <th>fireplacecnt</th>\n",
       "      <th>fullbathcnt</th>\n",
       "      <th>garagecarcnt</th>\n",
       "      <th>garagetotalsqft</th>\n",
       "      <th>hashottuborspa</th>\n",
       "      <th>heatingorsystemtypeid</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>lotsizesquarefeet</th>\n",
       "      <th>poolcnt</th>\n",
       "      <th>poolsizesum</th>\n",
       "      <th>pooltypeid10</th>\n",
       "      <th>pooltypeid2</th>\n",
       "      <th>pooltypeid7</th>\n",
       "      <th>propertycountylandusecode</th>\n",
       "      <th>propertylandusetypeid</th>\n",
       "      <th>propertyzoningdesc</th>\n",
       "      <th>rawcensustractandblock</th>\n",
       "      <th>regionidcity</th>\n",
       "      <th>regionidcounty</th>\n",
       "      <th>regionidneighborhood</th>\n",
       "      <th>regionidzip</th>\n",
       "      <th>roomcnt</th>\n",
       "      <th>storytypeid</th>\n",
       "      <th>threequarterbathnbr</th>\n",
       "      <th>typeconstructiontypeid</th>\n",
       "      <th>unitcnt</th>\n",
       "      <th>yardbuildingsqft17</th>\n",
       "      <th>yardbuildingsqft26</th>\n",
       "      <th>yearbuilt</th>\n",
       "      <th>numberofstories</th>\n",
       "      <th>fireplaceflag</th>\n",
       "      <th>structuretaxvaluedollarcnt</th>\n",
       "      <th>taxvaluedollarcnt</th>\n",
       "      <th>assessmentyear</th>\n",
       "      <th>landtaxvaluedollarcnt</th>\n",
       "      <th>taxamount</th>\n",
       "      <th>taxdelinquencyflag</th>\n",
       "      <th>taxdelinquencyyear</th>\n",
       "      <th>censustractandblock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2982285</th>\n",
       "      <td>13113431</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2982286</th>\n",
       "      <td>13113231</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2982287</th>\n",
       "      <td>13113631</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2982288</th>\n",
       "      <td>12244631</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2982289</th>\n",
       "      <td>11807431</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         parcelid  airconditioningtypeid  architecturalstyletypeid  \\\n",
       "2982285  13113431                    NaN                       NaN   \n",
       "2982286  13113231                    NaN                       NaN   \n",
       "2982287  13113631                    NaN                       NaN   \n",
       "2982288  12244631                    NaN                       NaN   \n",
       "2982289  11807431                    NaN                       NaN   \n",
       "\n",
       "         basementsqft  bathroomcnt  bedroomcnt  buildingclasstypeid  \\\n",
       "2982285           NaN          NaN         NaN                  NaN   \n",
       "2982286           NaN          NaN         NaN                  NaN   \n",
       "2982287           NaN          NaN         NaN                  NaN   \n",
       "2982288           NaN          NaN         NaN                  NaN   \n",
       "2982289           NaN          NaN         NaN                  NaN   \n",
       "\n",
       "         buildingqualitytypeid  calculatedbathnbr  decktypeid  \\\n",
       "2982285                    NaN                NaN         NaN   \n",
       "2982286                    NaN                NaN         NaN   \n",
       "2982287                    NaN                NaN         NaN   \n",
       "2982288                    NaN                NaN         NaN   \n",
       "2982289                    NaN                NaN         NaN   \n",
       "\n",
       "         finishedfloor1squarefeet  calculatedfinishedsquarefeet  \\\n",
       "2982285                       NaN                           NaN   \n",
       "2982286                       NaN                           NaN   \n",
       "2982287                       NaN                           NaN   \n",
       "2982288                       NaN                           NaN   \n",
       "2982289                       NaN                           NaN   \n",
       "\n",
       "         finishedsquarefeet12  finishedsquarefeet13  finishedsquarefeet15  \\\n",
       "2982285                   NaN                   NaN                   NaN   \n",
       "2982286                   NaN                   NaN                   NaN   \n",
       "2982287                   NaN                   NaN                   NaN   \n",
       "2982288                   NaN                   NaN                   NaN   \n",
       "2982289                   NaN                   NaN                   NaN   \n",
       "\n",
       "         finishedsquarefeet50  finishedsquarefeet6  fips  fireplacecnt  \\\n",
       "2982285                   NaN                  NaN   NaN           NaN   \n",
       "2982286                   NaN                  NaN   NaN           NaN   \n",
       "2982287                   NaN                  NaN   NaN           NaN   \n",
       "2982288                   NaN                  NaN   NaN           NaN   \n",
       "2982289                   NaN                  NaN   NaN           NaN   \n",
       "\n",
       "         fullbathcnt  garagecarcnt  garagetotalsqft hashottuborspa  \\\n",
       "2982285          NaN           NaN              NaN            NaN   \n",
       "2982286          NaN           NaN              NaN            NaN   \n",
       "2982287          NaN           NaN              NaN            NaN   \n",
       "2982288          NaN           NaN              NaN            NaN   \n",
       "2982289          NaN           NaN              NaN            NaN   \n",
       "\n",
       "         heatingorsystemtypeid  latitude  longitude  lotsizesquarefeet  \\\n",
       "2982285                    NaN       NaN        NaN                NaN   \n",
       "2982286                    NaN       NaN        NaN                NaN   \n",
       "2982287                    NaN       NaN        NaN                NaN   \n",
       "2982288                    NaN       NaN        NaN                NaN   \n",
       "2982289                    NaN       NaN        NaN                NaN   \n",
       "\n",
       "         poolcnt  poolsizesum  pooltypeid10  pooltypeid2  pooltypeid7  \\\n",
       "2982285      NaN          NaN           NaN          NaN          NaN   \n",
       "2982286      NaN          NaN           NaN          NaN          NaN   \n",
       "2982287      NaN          NaN           NaN          NaN          NaN   \n",
       "2982288      NaN          NaN           NaN          NaN          NaN   \n",
       "2982289      NaN          NaN           NaN          NaN          NaN   \n",
       "\n",
       "        propertycountylandusecode  propertylandusetypeid propertyzoningdesc  \\\n",
       "2982285                       NaN                    NaN                NaN   \n",
       "2982286                       NaN                    NaN                NaN   \n",
       "2982287                       NaN                    NaN                NaN   \n",
       "2982288                       NaN                    NaN                NaN   \n",
       "2982289                       NaN                    NaN                NaN   \n",
       "\n",
       "         rawcensustractandblock  regionidcity  regionidcounty  \\\n",
       "2982285                     NaN           NaN             NaN   \n",
       "2982286                     NaN           NaN             NaN   \n",
       "2982287                     NaN           NaN             NaN   \n",
       "2982288                     NaN           NaN             NaN   \n",
       "2982289                     NaN           NaN             NaN   \n",
       "\n",
       "         regionidneighborhood  regionidzip  roomcnt  storytypeid  \\\n",
       "2982285                   NaN          NaN      NaN          NaN   \n",
       "2982286                   NaN          NaN      NaN          NaN   \n",
       "2982287                   NaN          NaN      NaN          NaN   \n",
       "2982288                   NaN          NaN      NaN          NaN   \n",
       "2982289                   NaN          NaN      NaN          NaN   \n",
       "\n",
       "         threequarterbathnbr  typeconstructiontypeid  unitcnt  \\\n",
       "2982285                  NaN                     NaN      NaN   \n",
       "2982286                  NaN                     NaN      NaN   \n",
       "2982287                  NaN                     NaN      NaN   \n",
       "2982288                  NaN                     NaN      NaN   \n",
       "2982289                  NaN                     NaN      NaN   \n",
       "\n",
       "         yardbuildingsqft17  yardbuildingsqft26  yearbuilt  numberofstories  \\\n",
       "2982285                 NaN                 NaN        NaN              NaN   \n",
       "2982286                 NaN                 NaN        NaN              NaN   \n",
       "2982287                 NaN                 NaN        NaN              NaN   \n",
       "2982288                 NaN                 NaN        NaN              NaN   \n",
       "2982289                 NaN                 NaN        NaN              NaN   \n",
       "\n",
       "        fireplaceflag  structuretaxvaluedollarcnt  taxvaluedollarcnt  \\\n",
       "2982285           NaN                         NaN                NaN   \n",
       "2982286           NaN                         NaN                NaN   \n",
       "2982287           NaN                         NaN                NaN   \n",
       "2982288           NaN                         NaN                NaN   \n",
       "2982289           NaN                         NaN                NaN   \n",
       "\n",
       "         assessmentyear  landtaxvaluedollarcnt  taxamount taxdelinquencyflag  \\\n",
       "2982285             NaN                    NaN        NaN                NaN   \n",
       "2982286             NaN                    NaN        NaN                NaN   \n",
       "2982287             NaN                    NaN        NaN                NaN   \n",
       "2982288             NaN                    NaN        NaN                NaN   \n",
       "2982289             NaN                    NaN        NaN                NaN   \n",
       "\n",
       "         taxdelinquencyyear  censustractandblock  \n",
       "2982285                 NaN                  NaN  \n",
       "2982286                 NaN                  NaN  \n",
       "2982287                 NaN                  NaN  \n",
       "2982288                 NaN                  NaN  \n",
       "2982289                 NaN                  NaN  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "properties2017[properties2017['longitude'].isnull()].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d6b3e47a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:47.005871Z",
     "iopub.status.busy": "2024-04-15T14:07:47.005209Z",
     "iopub.status.idle": "2024-04-15T14:07:47.016788Z",
     "shell.execute_reply": "2024-04-15T14:07:47.015583Z"
    },
    "papermill": {
     "duration": 0.05116,
     "end_time": "2024-04-15T14:07:47.019296",
     "exception": false,
     "start_time": "2024-04-15T14:07:46.968136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>logerror</th>\n",
       "      <th>transactiondate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11016594</td>\n",
       "      <td>0.0276</td>\n",
       "      <td>2016-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14366692</td>\n",
       "      <td>-0.1684</td>\n",
       "      <td>2016-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12098116</td>\n",
       "      <td>-0.0040</td>\n",
       "      <td>2016-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12643413</td>\n",
       "      <td>0.0218</td>\n",
       "      <td>2016-01-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14432541</td>\n",
       "      <td>-0.0050</td>\n",
       "      <td>2016-01-02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   parcelid  logerror transactiondate\n",
       "0  11016594    0.0276      2016-01-01\n",
       "1  14366692   -0.1684      2016-01-01\n",
       "2  12098116   -0.0040      2016-01-01\n",
       "3  12643413    0.0218      2016-01-02\n",
       "4  14432541   -0.0050      2016-01-02"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9fae1172",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:47.092800Z",
     "iopub.status.busy": "2024-04-15T14:07:47.092139Z",
     "iopub.status.idle": "2024-04-15T14:07:47.098814Z",
     "shell.execute_reply": "2024-04-15T14:07:47.097659Z"
    },
    "papermill": {
     "duration": 0.046217,
     "end_time": "2024-04-15T14:07:47.101149",
     "exception": false,
     "start_time": "2024-04-15T14:07:47.054932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "90275"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train2016)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ea4e523c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:47.175158Z",
     "iopub.status.busy": "2024-04-15T14:07:47.174703Z",
     "iopub.status.idle": "2024-04-15T14:07:47.186500Z",
     "shell.execute_reply": "2024-04-15T14:07:47.185375Z"
    },
    "papermill": {
     "duration": 0.051519,
     "end_time": "2024-04-15T14:07:47.188887",
     "exception": false,
     "start_time": "2024-04-15T14:07:47.137368",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>logerror</th>\n",
       "      <th>transactiondate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14297519</td>\n",
       "      <td>0.025595</td>\n",
       "      <td>2017-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17052889</td>\n",
       "      <td>0.055619</td>\n",
       "      <td>2017-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>14186244</td>\n",
       "      <td>0.005383</td>\n",
       "      <td>2017-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12177905</td>\n",
       "      <td>-0.103410</td>\n",
       "      <td>2017-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10887214</td>\n",
       "      <td>0.006940</td>\n",
       "      <td>2017-01-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   parcelid  logerror transactiondate\n",
       "0  14297519  0.025595      2017-01-01\n",
       "1  17052889  0.055619      2017-01-01\n",
       "2  14186244  0.005383      2017-01-01\n",
       "3  12177905 -0.103410      2017-01-01\n",
       "4  10887214  0.006940      2017-01-01"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2017.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4df7797e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:47.264250Z",
     "iopub.status.busy": "2024-04-15T14:07:47.263542Z",
     "iopub.status.idle": "2024-04-15T14:07:47.270198Z",
     "shell.execute_reply": "2024-04-15T14:07:47.269250Z"
    },
    "papermill": {
     "duration": 0.046295,
     "end_time": "2024-04-15T14:07:47.272312",
     "exception": false,
     "start_time": "2024-04-15T14:07:47.226017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "77613"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train2017)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e6c6595b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:47.348801Z",
     "iopub.status.busy": "2024-04-15T14:07:47.347732Z",
     "iopub.status.idle": "2024-04-15T14:07:47.398173Z",
     "shell.execute_reply": "2024-04-15T14:07:47.397027Z"
    },
    "papermill": {
     "duration": 0.091341,
     "end_time": "2024-04-15T14:07:47.401014",
     "exception": false,
     "start_time": "2024-04-15T14:07:47.309673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Let us add date features as it is important for analysis. \n",
    "def add_date_features(df):\n",
    "    df[\"transaction_year\"] = df[\"transactiondate\"].dt.year\n",
    "    df[\"transaction_month\"] = (df[\"transactiondate\"].dt.year - 2016)*12 + df[\"transactiondate\"].dt.month\n",
    "    df[\"transaction_day\"] = df[\"transactiondate\"].dt.day\n",
    "    df[\"transaction_quarter\"] = (df[\"transactiondate\"].dt.year - 2016)*4 +df[\"transactiondate\"].dt.quarter\n",
    "    df.drop([\"transactiondate\"], inplace=True, axis=1)\n",
    "    return df\n",
    "\n",
    "train2016 = add_date_features(train2016)\n",
    "train2017 = add_date_features(train2017)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fc00c31b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:47.477893Z",
     "iopub.status.busy": "2024-04-15T14:07:47.477466Z",
     "iopub.status.idle": "2024-04-15T14:07:47.482379Z",
     "shell.execute_reply": "2024-04-15T14:07:47.481153Z"
    },
    "papermill": {
     "duration": 0.047187,
     "end_time": "2024-04-15T14:07:47.485025",
     "exception": false,
     "start_time": "2024-04-15T14:07:47.437838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lets merge and prepare final dataset. We will perform any feature engineering on this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7ebdb814",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:47.562041Z",
     "iopub.status.busy": "2024-04-15T14:07:47.561352Z",
     "iopub.status.idle": "2024-04-15T14:07:52.412858Z",
     "shell.execute_reply": "2024-04-15T14:07:52.411715Z"
    },
    "papermill": {
     "duration": 4.892757,
     "end_time": "2024-04-15T14:07:52.415929",
     "exception": false,
     "start_time": "2024-04-15T14:07:47.523172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preparing final dataset\n"
     ]
    }
   ],
   "source": [
    "print('Preparing final dataset')\n",
    "train2016 = pd.merge(train2016, properties2016, how = 'left', on = 'parcelid')\n",
    "train2017 = pd.merge(train2017, properties2017, how = 'left', on = 'parcelid')\n",
    "\n",
    "train_df = pd.concat([train2016, train2017], axis = 0)\n",
    "test_df = pd.merge(sample_submission[['ParcelId']], properties2016.rename(columns = {'parcelid': 'ParcelId'}), how = 'left', on = 'ParcelId')\n",
    "\n",
    "#del properties2016, properties2017, train2016, train2017\n",
    "#gc.collect();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f5ba48dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:52.492248Z",
     "iopub.status.busy": "2024-04-15T14:07:52.491788Z",
     "iopub.status.idle": "2024-04-15T14:07:57.443140Z",
     "shell.execute_reply": "2024-04-15T14:07:57.441727Z"
    },
    "papermill": {
     "duration": 4.992294,
     "end_time": "2024-04-15T14:07:57.445986",
     "exception": false,
     "start_time": "2024-04-15T14:07:52.453692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "import ydata_profiling as yp \n",
    "profile = yp.ProfileReport(train_df) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "33a55098",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:57.526511Z",
     "iopub.status.busy": "2024-04-15T14:07:57.525803Z",
     "iopub.status.idle": "2024-04-15T14:07:57.530567Z",
     "shell.execute_reply": "2024-04-15T14:07:57.529453Z"
    },
    "papermill": {
     "duration": 0.049137,
     "end_time": "2024-04-15T14:07:57.533233",
     "exception": false,
     "start_time": "2024-04-15T14:07:57.484096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## takes 10-12 minutes\n",
    "#profile.to_notebook_iframe() \n",
    "## Save to html\n",
    "#profile.to_file(\"report\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c737b8fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:57.608594Z",
     "iopub.status.busy": "2024-04-15T14:07:57.608219Z",
     "iopub.status.idle": "2024-04-15T14:07:57.612410Z",
     "shell.execute_reply": "2024-04-15T14:07:57.611251Z"
    },
    "papermill": {
     "duration": 0.044534,
     "end_time": "2024-04-15T14:07:57.614799",
     "exception": false,
     "start_time": "2024-04-15T14:07:57.570265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# There are lot of null values let us treate each of them\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d9b265c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:57.689253Z",
     "iopub.status.busy": "2024-04-15T14:07:57.688823Z",
     "iopub.status.idle": "2024-04-15T14:07:57.771534Z",
     "shell.execute_reply": "2024-04-15T14:07:57.769205Z"
    },
    "papermill": {
     "duration": 0.123343,
     "end_time": "2024-04-15T14:07:57.774487",
     "exception": false,
     "start_time": "2024-04-15T14:07:57.651144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "parcelid                         0.000000\n",
       "logerror                         0.000000\n",
       "transaction_year                 0.000000\n",
       "transaction_month                0.000000\n",
       "transaction_day                  0.000000\n",
       "transaction_quarter              0.000000\n",
       "longitude                        0.020252\n",
       "propertylandusetypeid            0.020252\n",
       "rawcensustractandblock           0.020252\n",
       "regionidcounty                   0.020252\n",
       "roomcnt                          0.020252\n",
       "bedroomcnt                       0.020252\n",
       "latitude                         0.020252\n",
       "bathroomcnt                      0.020252\n",
       "assessmentyear                   0.020252\n",
       "fips                             0.020252\n",
       "propertycountylandusecode        0.020847\n",
       "taxvaluedollarcnt                0.021443\n",
       "landtaxvaluedollarcnt            0.022039\n",
       "taxamount                        0.026804\n",
       "regionidzip                      0.070881\n",
       "structuretaxvaluedollarcnt       0.315091\n",
       "censustractandblock              0.527733\n",
       "calculatedfinishedsquarefeet     0.533689\n",
       "yearbuilt                        0.631373\n",
       "fullbathcnt                      1.091204\n",
       "calculatedbathnbr                1.091204\n",
       "regionidcity                     1.970957\n",
       "finishedsquarefeet12             4.984871\n",
       "lotsizesquarefeet               10.984704\n",
       "unitcnt                         35.042409\n",
       "propertyzoningdesc              35.201444\n",
       "buildingqualitytypeid           36.163990\n",
       "heatingorsystemtypeid           37.070547\n",
       "regionidneighborhood            60.100781\n",
       "garagetotalsqft                 66.967860\n",
       "garagecarcnt                    66.967860\n",
       "airconditioningtypeid           67.961975\n",
       "numberofstories                 77.265201\n",
       "poolcnt                         79.703731\n",
       "pooltypeid7                     81.073096\n",
       "threequarterbathnbr             86.827528\n",
       "fireplacecnt                    89.340513\n",
       "finishedfloor1squarefeet        92.320476\n",
       "finishedsquarefeet50            92.320476\n",
       "finishedsquarefeet15            96.074168\n",
       "yardbuildingsqft17              96.998594\n",
       "taxdelinquencyflag              97.210640\n",
       "taxdelinquencyyear              97.210640\n",
       "hashottuborspa                  97.674640\n",
       "pooltypeid2                     98.643143\n",
       "poolsizesum                     98.905223\n",
       "pooltypeid10                    99.031497\n",
       "decktypeid                      99.242352\n",
       "finishedsquarefeet6             99.519322\n",
       "typeconstructiontypeid          99.689078\n",
       "architecturalstyletypeid        99.721243\n",
       "fireplaceflag                   99.765320\n",
       "yardbuildingsqft26              99.901720\n",
       "storytypeid                     99.944606\n",
       "basementsqft                    99.944606\n",
       "finishedsquarefeet13            99.955327\n",
       "buildingclasstypeid             99.981535\n",
       "dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#checking percentage of null values in final dataset\n",
    "(train_df.isnull().sum() / len(train_df) * 100).sort_values()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7c77c67d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:57.850738Z",
     "iopub.status.busy": "2024-04-15T14:07:57.849644Z",
     "iopub.status.idle": "2024-04-15T14:07:57.856814Z",
     "shell.execute_reply": "2024-04-15T14:07:57.855711Z"
    },
    "papermill": {
     "duration": 0.047339,
     "end_time": "2024-04-15T14:07:57.859098",
     "exception": false,
     "start_time": "2024-04-15T14:07:57.811759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "167888"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9cc0a958",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:57.934803Z",
     "iopub.status.busy": "2024-04-15T14:07:57.934391Z",
     "iopub.status.idle": "2024-04-15T14:07:57.969088Z",
     "shell.execute_reply": "2024-04-15T14:07:57.967742Z"
    },
    "papermill": {
     "duration": 0.075285,
     "end_time": "2024-04-15T14:07:57.971568",
     "exception": false,
     "start_time": "2024-04-15T14:07:57.896283",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column : airconditioningtypeid\n",
      "**************************************************\n",
      "Value counts before missing imputation\n",
      "airconditioningtypeid\n",
      "1.0     49854\n",
      "13.0     3408\n",
      "5.0       382\n",
      "11.0      116\n",
      "9.0        27\n",
      "3.0         1\n",
      "Name: count, dtype: int64\n",
      "**************************************************\n",
      "Value counts after missing imputation\n",
      "airconditioningtypeid\n",
      "6.0     114100\n",
      "1.0      49854\n",
      "13.0      3408\n",
      "5.0        382\n",
      "11.0       116\n",
      "9.0         27\n",
      "3.0          1\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "i = 'airconditioningtypeid'\n",
    "print(f\"Column : {i}\")\n",
    "print(\"*\"*50)\n",
    "\n",
    "print(\"Value counts before missing imputation\")\n",
    "print(train_df[i].value_counts())\n",
    "\n",
    "\n",
    "train_df[i].fillna(6.0,inplace=True) # filling with 'other' as per data dictionary 6 indicates other  \n",
    "test_df[i].fillna(6.0,inplace=True)\n",
    "\n",
    "print(\"*\"*50)\n",
    "print(\"Value counts after missing imputation\")\n",
    "print(train_df[i].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9fe1ce74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:58.047765Z",
     "iopub.status.busy": "2024-04-15T14:07:58.046945Z",
     "iopub.status.idle": "2024-04-15T14:07:58.080655Z",
     "shell.execute_reply": "2024-04-15T14:07:58.079114Z"
    },
    "papermill": {
     "duration": 0.075029,
     "end_time": "2024-04-15T14:07:58.083394",
     "exception": false,
     "start_time": "2024-04-15T14:07:58.008365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df[train_df['poolcnt'] == 1][['poolcnt','pooltypeid7','poolsizesum','pooltypeid10']].head(5)\n",
    "\n",
    "# we will keep only poolcnt column.Drop other columns related to pool. We will fill 0 for poolcnt columns wheren it is nan assuming no pools\n",
    "train_df['poolcnt'].fillna(0,inplace = True)\n",
    "test_df['poolcnt'].fillna(0,inplace =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f5da33a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:58.162713Z",
     "iopub.status.busy": "2024-04-15T14:07:58.162285Z",
     "iopub.status.idle": "2024-04-15T14:07:58.374780Z",
     "shell.execute_reply": "2024-04-15T14:07:58.373475Z"
    },
    "papermill": {
     "duration": 0.255552,
     "end_time": "2024-04-15T14:07:58.377520",
     "exception": false,
     "start_time": "2024-04-15T14:07:58.121968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "taxdelinquencyflag\n",
      "Y    4683\n",
      "Name: count, dtype: int64\n",
      "4683\n"
     ]
    }
   ],
   "source": [
    "print(train_df['taxdelinquencyflag'].value_counts())\n",
    "print(train_df['taxdelinquencyyear'].value_counts().sum())\n",
    "\n",
    "# We observer that no of records in both the columns is same. This means the flag is 'Y' only when there is an overdue of tax. We can fill other rows with N for delinquency column and 0 for year column\n",
    "\n",
    "train_df['taxdelinquencyflag'].fillna('N',inplace=True)\n",
    "test_df['taxdelinquencyflag'].fillna('N',inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "49819e96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:58.453303Z",
     "iopub.status.busy": "2024-04-15T14:07:58.452893Z",
     "iopub.status.idle": "2024-04-15T14:07:58.466740Z",
     "shell.execute_reply": "2024-04-15T14:07:58.465639Z"
    },
    "papermill": {
     "duration": 0.055015,
     "end_time": "2024-04-15T14:07:58.469447",
     "exception": false,
     "start_time": "2024-04-15T14:07:58.414432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# no of missing values is same in garagecarcnt and sqft column. SO we will fill o in missing values assuming no garage\n",
    "train_df['garagecarcnt'].value_counts()\n",
    "train_df['garagecarcnt'].fillna(0,inplace = True)\n",
    "train_df['garagecarcnt'].fillna(0,inplace = True)\n",
    "\n",
    "train_df['garagetotalsqft'].fillna(0,inplace = True)\n",
    "train_df['garagetotalsqft'].fillna(0,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "624472e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:58.547396Z",
     "iopub.status.busy": "2024-04-15T14:07:58.546993Z",
     "iopub.status.idle": "2024-04-15T14:07:58.602238Z",
     "shell.execute_reply": "2024-04-15T14:07:58.601286Z"
    },
    "papermill": {
     "duration": 0.097528,
     "end_time": "2024-04-15T14:07:58.604729",
     "exception": false,
     "start_time": "2024-04-15T14:07:58.507201",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>logerror</th>\n",
       "      <th>transaction_year</th>\n",
       "      <th>transaction_month</th>\n",
       "      <th>transaction_day</th>\n",
       "      <th>transaction_quarter</th>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <th>architecturalstyletypeid</th>\n",
       "      <th>basementsqft</th>\n",
       "      <th>bathroomcnt</th>\n",
       "      <th>bedroomcnt</th>\n",
       "      <th>buildingclasstypeid</th>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <th>calculatedbathnbr</th>\n",
       "      <th>decktypeid</th>\n",
       "      <th>finishedfloor1squarefeet</th>\n",
       "      <th>calculatedfinishedsquarefeet</th>\n",
       "      <th>finishedsquarefeet12</th>\n",
       "      <th>finishedsquarefeet13</th>\n",
       "      <th>finishedsquarefeet15</th>\n",
       "      <th>finishedsquarefeet50</th>\n",
       "      <th>finishedsquarefeet6</th>\n",
       "      <th>fips</th>\n",
       "      <th>fireplacecnt</th>\n",
       "      <th>fullbathcnt</th>\n",
       "      <th>garagecarcnt</th>\n",
       "      <th>garagetotalsqft</th>\n",
       "      <th>hashottuborspa</th>\n",
       "      <th>heatingorsystemtypeid</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>lotsizesquarefeet</th>\n",
       "      <th>poolcnt</th>\n",
       "      <th>poolsizesum</th>\n",
       "      <th>pooltypeid10</th>\n",
       "      <th>pooltypeid2</th>\n",
       "      <th>pooltypeid7</th>\n",
       "      <th>propertycountylandusecode</th>\n",
       "      <th>propertylandusetypeid</th>\n",
       "      <th>propertyzoningdesc</th>\n",
       "      <th>rawcensustractandblock</th>\n",
       "      <th>regionidcity</th>\n",
       "      <th>regionidcounty</th>\n",
       "      <th>regionidneighborhood</th>\n",
       "      <th>regionidzip</th>\n",
       "      <th>roomcnt</th>\n",
       "      <th>storytypeid</th>\n",
       "      <th>threequarterbathnbr</th>\n",
       "      <th>typeconstructiontypeid</th>\n",
       "      <th>unitcnt</th>\n",
       "      <th>yardbuildingsqft17</th>\n",
       "      <th>yardbuildingsqft26</th>\n",
       "      <th>yearbuilt</th>\n",
       "      <th>numberofstories</th>\n",
       "      <th>fireplaceflag</th>\n",
       "      <th>structuretaxvaluedollarcnt</th>\n",
       "      <th>taxvaluedollarcnt</th>\n",
       "      <th>assessmentyear</th>\n",
       "      <th>landtaxvaluedollarcnt</th>\n",
       "      <th>taxamount</th>\n",
       "      <th>taxdelinquencyflag</th>\n",
       "      <th>taxdelinquencyyear</th>\n",
       "      <th>censustractandblock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>388</th>\n",
       "      <td>10813418</td>\n",
       "      <td>-0.008083</td>\n",
       "      <td>2017</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1083</th>\n",
       "      <td>12133448</td>\n",
       "      <td>-1.062436</td>\n",
       "      <td>2017</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3576</th>\n",
       "      <td>11905748</td>\n",
       "      <td>0.084014</td>\n",
       "      <td>2017</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3726</th>\n",
       "      <td>12961343</td>\n",
       "      <td>0.559867</td>\n",
       "      <td>2017</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3782</th>\n",
       "      <td>12006414</td>\n",
       "      <td>-0.795601</td>\n",
       "      <td>2017</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      parcelid  logerror  transaction_year  transaction_month  \\\n",
       "388   10813418 -0.008083              2017                 13   \n",
       "1083  12133448 -1.062436              2017                 13   \n",
       "3576  11905748  0.084014              2017                 13   \n",
       "3726  12961343  0.559867              2017                 13   \n",
       "3782  12006414 -0.795601              2017                 13   \n",
       "\n",
       "      transaction_day  transaction_quarter  airconditioningtypeid  \\\n",
       "388                 3                    5                    6.0   \n",
       "1083                5                    5                    6.0   \n",
       "3576               18                    5                    6.0   \n",
       "3726               18                    5                    6.0   \n",
       "3782               18                    5                    6.0   \n",
       "\n",
       "      architecturalstyletypeid  basementsqft  bathroomcnt  bedroomcnt  \\\n",
       "388                        NaN           NaN          NaN         NaN   \n",
       "1083                       NaN           NaN          NaN         NaN   \n",
       "3576                       NaN           NaN          NaN         NaN   \n",
       "3726                       NaN           NaN          NaN         NaN   \n",
       "3782                       NaN           NaN          NaN         NaN   \n",
       "\n",
       "      buildingclasstypeid  buildingqualitytypeid  calculatedbathnbr  \\\n",
       "388                   NaN                    NaN                NaN   \n",
       "1083                  NaN                    NaN                NaN   \n",
       "3576                  NaN                    NaN                NaN   \n",
       "3726                  NaN                    NaN                NaN   \n",
       "3782                  NaN                    NaN                NaN   \n",
       "\n",
       "      decktypeid  finishedfloor1squarefeet  calculatedfinishedsquarefeet  \\\n",
       "388          NaN                       NaN                           NaN   \n",
       "1083         NaN                       NaN                           NaN   \n",
       "3576         NaN                       NaN                           NaN   \n",
       "3726         NaN                       NaN                           NaN   \n",
       "3782         NaN                       NaN                           NaN   \n",
       "\n",
       "      finishedsquarefeet12  finishedsquarefeet13  finishedsquarefeet15  \\\n",
       "388                    NaN                   NaN                   NaN   \n",
       "1083                   NaN                   NaN                   NaN   \n",
       "3576                   NaN                   NaN                   NaN   \n",
       "3726                   NaN                   NaN                   NaN   \n",
       "3782                   NaN                   NaN                   NaN   \n",
       "\n",
       "      finishedsquarefeet50  finishedsquarefeet6  fips  fireplacecnt  \\\n",
       "388                    NaN                  NaN   NaN           NaN   \n",
       "1083                   NaN                  NaN   NaN           NaN   \n",
       "3576                   NaN                  NaN   NaN           NaN   \n",
       "3726                   NaN                  NaN   NaN           NaN   \n",
       "3782                   NaN                  NaN   NaN           NaN   \n",
       "\n",
       "      fullbathcnt  garagecarcnt  garagetotalsqft hashottuborspa  \\\n",
       "388           NaN           0.0              0.0            NaN   \n",
       "1083          NaN           0.0              0.0            NaN   \n",
       "3576          NaN           0.0              0.0            NaN   \n",
       "3726          NaN           0.0              0.0            NaN   \n",
       "3782          NaN           0.0              0.0            NaN   \n",
       "\n",
       "      heatingorsystemtypeid  latitude  longitude  lotsizesquarefeet  poolcnt  \\\n",
       "388                     NaN       NaN        NaN                NaN      0.0   \n",
       "1083                    NaN       NaN        NaN                NaN      0.0   \n",
       "3576                    NaN       NaN        NaN                NaN      0.0   \n",
       "3726                    NaN       NaN        NaN                NaN      0.0   \n",
       "3782                    NaN       NaN        NaN                NaN      0.0   \n",
       "\n",
       "      poolsizesum  pooltypeid10  pooltypeid2  pooltypeid7  \\\n",
       "388           NaN           NaN          NaN          NaN   \n",
       "1083          NaN           NaN          NaN          NaN   \n",
       "3576          NaN           NaN          NaN          NaN   \n",
       "3726          NaN           NaN          NaN          NaN   \n",
       "3782          NaN           NaN          NaN          NaN   \n",
       "\n",
       "     propertycountylandusecode  propertylandusetypeid propertyzoningdesc  \\\n",
       "388                        NaN                    NaN                NaN   \n",
       "1083                       NaN                    NaN                NaN   \n",
       "3576                       NaN                    NaN                NaN   \n",
       "3726                       NaN                    NaN                NaN   \n",
       "3782                       NaN                    NaN                NaN   \n",
       "\n",
       "      rawcensustractandblock  regionidcity  regionidcounty  \\\n",
       "388                      NaN           NaN             NaN   \n",
       "1083                     NaN           NaN             NaN   \n",
       "3576                     NaN           NaN             NaN   \n",
       "3726                     NaN           NaN             NaN   \n",
       "3782                     NaN           NaN             NaN   \n",
       "\n",
       "      regionidneighborhood  regionidzip  roomcnt  storytypeid  \\\n",
       "388                    NaN          NaN      NaN          NaN   \n",
       "1083                   NaN          NaN      NaN          NaN   \n",
       "3576                   NaN          NaN      NaN          NaN   \n",
       "3726                   NaN          NaN      NaN          NaN   \n",
       "3782                   NaN          NaN      NaN          NaN   \n",
       "\n",
       "      threequarterbathnbr  typeconstructiontypeid  unitcnt  \\\n",
       "388                   NaN                     NaN      NaN   \n",
       "1083                  NaN                     NaN      NaN   \n",
       "3576                  NaN                     NaN      NaN   \n",
       "3726                  NaN                     NaN      NaN   \n",
       "3782                  NaN                     NaN      NaN   \n",
       "\n",
       "      yardbuildingsqft17  yardbuildingsqft26  yearbuilt  numberofstories  \\\n",
       "388                  NaN                 NaN        NaN              NaN   \n",
       "1083                 NaN                 NaN        NaN              NaN   \n",
       "3576                 NaN                 NaN        NaN              NaN   \n",
       "3726                 NaN                 NaN        NaN              NaN   \n",
       "3782                 NaN                 NaN        NaN              NaN   \n",
       "\n",
       "     fireplaceflag  structuretaxvaluedollarcnt  taxvaluedollarcnt  \\\n",
       "388            NaN                         NaN                NaN   \n",
       "1083           NaN                         NaN                NaN   \n",
       "3576           NaN                         NaN                NaN   \n",
       "3726           NaN                         NaN                NaN   \n",
       "3782           NaN                         NaN                NaN   \n",
       "\n",
       "      assessmentyear  landtaxvaluedollarcnt  taxamount taxdelinquencyflag  \\\n",
       "388              NaN                    NaN        NaN                  N   \n",
       "1083             NaN                    NaN        NaN                  N   \n",
       "3576             NaN                    NaN        NaN                  N   \n",
       "3726             NaN                    NaN        NaN                  N   \n",
       "3782             NaN                    NaN        NaN                  N   \n",
       "\n",
       "      taxdelinquencyyear  censustractandblock  \n",
       "388                  NaN                  NaN  \n",
       "1083                 NaN                  NaN  \n",
       "3576                 NaN                  NaN  \n",
       "3726                 NaN                  NaN  \n",
       "3782                 NaN                  NaN  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df[train_df['longitude'].isnull()].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4ae4826f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:58.682857Z",
     "iopub.status.busy": "2024-04-15T14:07:58.682346Z",
     "iopub.status.idle": "2024-04-15T14:07:59.103962Z",
     "shell.execute_reply": "2024-04-15T14:07:59.102738Z"
    },
    "papermill": {
     "duration": 0.463746,
     "end_time": "2024-04-15T14:07:59.106653",
     "exception": false,
     "start_time": "2024-04-15T14:07:58.642907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column : fireplaceflag\n",
      "**************************************************\n",
      "Value counts before missing imputation\n",
      "fireplaceflag\n",
      "True    394\n",
      "Name: count, dtype: int64\n",
      "**************************************************\n",
      "Value counts after missing imputation\n",
      "fireplaceflag\n",
      "False    167494\n",
      "True        394\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "i = 'fireplaceflag'\n",
    "print(f\"Column : {i}\")\n",
    "print(\"*\"*50)\n",
    "\n",
    "print(\"Value counts before missing imputation\")\n",
    "print(train_df[i].value_counts())\n",
    "\n",
    "# it means we only have data for true values. Data for false is missing. Therefore we can replace nan with false\n",
    "\n",
    "train_df[i].fillna(False,inplace=True) \n",
    "test_df[i].fillna(False,inplace=True)\n",
    "\n",
    "print(\"*\"*50)\n",
    "print(\"Value counts after missing imputation\")\n",
    "print(train_df[i].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "af4ee74b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:59.187908Z",
     "iopub.status.busy": "2024-04-15T14:07:59.187512Z",
     "iopub.status.idle": "2024-04-15T14:07:59.225759Z",
     "shell.execute_reply": "2024-04-15T14:07:59.224496Z"
    },
    "papermill": {
     "duration": 0.082723,
     "end_time": "2024-04-15T14:07:59.228709",
     "exception": false,
     "start_time": "2024-04-15T14:07:59.145986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Dropping rows having all NA values except parcelid\n",
    "train_df.dropna(subset=[\"longitude\"], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c5d56121",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:59.311198Z",
     "iopub.status.busy": "2024-04-15T14:07:59.309947Z",
     "iopub.status.idle": "2024-04-15T14:07:59.467985Z",
     "shell.execute_reply": "2024-04-15T14:07:59.466816Z"
    },
    "papermill": {
     "duration": 0.203352,
     "end_time": "2024-04-15T14:07:59.470814",
     "exception": false,
     "start_time": "2024-04-15T14:07:59.267462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total columns having null value  41\n",
      "\n",
      "['architecturalstyletypeid', 'basementsqft', 'buildingclasstypeid', 'buildingqualitytypeid', 'calculatedbathnbr', 'decktypeid', 'finishedfloor1squarefeet', 'calculatedfinishedsquarefeet', 'finishedsquarefeet12', 'finishedsquarefeet13', 'finishedsquarefeet15', 'finishedsquarefeet50', 'finishedsquarefeet6', 'fireplacecnt', 'fullbathcnt', 'hashottuborspa', 'heatingorsystemtypeid', 'lotsizesquarefeet', 'poolsizesum', 'pooltypeid10', 'pooltypeid2', 'pooltypeid7', 'propertycountylandusecode', 'propertyzoningdesc', 'regionidcity', 'regionidneighborhood', 'regionidzip', 'storytypeid', 'threequarterbathnbr', 'typeconstructiontypeid', 'unitcnt', 'yardbuildingsqft17', 'yardbuildingsqft26', 'yearbuilt', 'numberofstories', 'structuretaxvaluedollarcnt', 'taxvaluedollarcnt', 'landtaxvaluedollarcnt', 'taxamount', 'taxdelinquencyyear', 'censustractandblock']\n",
      "\n",
      "We exclude: 23\n",
      "['architecturalstyletypeid', 'basementsqft', 'buildingclasstypeid', 'decktypeid', 'finishedfloor1squarefeet', 'finishedsquarefeet13', 'finishedsquarefeet15', 'finishedsquarefeet50', 'finishedsquarefeet6', 'fireplacecnt', 'hashottuborspa', 'poolsizesum', 'pooltypeid10', 'pooltypeid2', 'pooltypeid7', 'regionidneighborhood', 'storytypeid', 'threequarterbathnbr', 'typeconstructiontypeid', 'yardbuildingsqft17', 'yardbuildingsqft26', 'numberofstories', 'taxdelinquencyyear']\n"
     ]
    }
   ],
   "source": [
    "null_columns = list(train_df.columns[train_df.isnull().any()])\n",
    "print(\"Total columns having null value \", len(null_columns))\n",
    "print()\n",
    "print(null_columns)\n",
    "\n",
    "\n",
    "# Drop columns having greter than 60 % missing values\n",
    "missing_perc_thresh = 0.60\n",
    "exclude_missing = []\n",
    "num_rows = train_df.shape[0]\n",
    "for c in train_df.columns:\n",
    "    num_missing = train_df[c].isnull().sum()\n",
    "    if num_missing == 0:\n",
    "        continue\n",
    "    missing_frac = num_missing / float(num_rows)\n",
    "    if missing_frac > missing_perc_thresh:\n",
    "        exclude_missing.append(c)\n",
    "print()\n",
    "print(\"We exclude: %s\" % len(exclude_missing))\n",
    "print(exclude_missing)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "771164c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:07:59.550645Z",
     "iopub.status.busy": "2024-04-15T14:07:59.549960Z",
     "iopub.status.idle": "2024-04-15T14:07:59.967426Z",
     "shell.execute_reply": "2024-04-15T14:07:59.966130Z"
    },
    "papermill": {
     "duration": 0.46147,
     "end_time": "2024-04-15T14:07:59.970404",
     "exception": false,
     "start_time": "2024-04-15T14:07:59.508934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df.drop(['propertycountylandusecode'],inplace= True, axis=1)\n",
    "test_df.drop(['propertycountylandusecode'],inplace= True,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e055a220",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:00.049525Z",
     "iopub.status.busy": "2024-04-15T14:08:00.049128Z",
     "iopub.status.idle": "2024-04-15T14:08:00.056888Z",
     "shell.execute_reply": "2024-04-15T14:08:00.055432Z"
    },
    "papermill": {
     "duration": 0.051086,
     "end_time": "2024-04-15T14:08:00.059413",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.008327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Define training features !!\n",
      "We use these for training: 36\n"
     ]
    }
   ],
   "source": [
    "print (\"Define training features !!\")\n",
    "exclude_other = ['parcelid', 'logerror','propertyzoningdesc']\n",
    "train_features = []\n",
    "for c in train_df.columns:\n",
    "    if c not in exclude_missing and c not in exclude_other :\n",
    "        train_features.append(c)\n",
    "print(\"We use these for training: %s\" % len(train_features))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "4406b6c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:00.140883Z",
     "iopub.status.busy": "2024-04-15T14:08:00.140469Z",
     "iopub.status.idle": "2024-04-15T14:08:00.145386Z",
     "shell.execute_reply": "2024-04-15T14:08:00.144274Z"
    },
    "papermill": {
     "duration": 0.048453,
     "end_time": "2024-04-15T14:08:00.147738",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.099285",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Checking columsn that we plan to drop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6f5f6b29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:00.228497Z",
     "iopub.status.busy": "2024-04-15T14:08:00.228092Z",
     "iopub.status.idle": "2024-04-15T14:08:00.236304Z",
     "shell.execute_reply": "2024-04-15T14:08:00.235118Z"
    },
    "papermill": {
     "duration": 0.051018,
     "end_time": "2024-04-15T14:08:00.238933",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.187915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "storytypeid\n",
      "7.0    93\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "i='storytypeid'\n",
    "print(train_df[i].value_counts())\n",
    "# We will drop this column as number of na is too high\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "df81c8f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:00.319027Z",
     "iopub.status.busy": "2024-04-15T14:08:00.318199Z",
     "iopub.status.idle": "2024-04-15T14:08:00.326473Z",
     "shell.execute_reply": "2024-04-15T14:08:00.325274Z"
    },
    "papermill": {
     "duration": 0.051289,
     "end_time": "2024-04-15T14:08:00.328753",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.277464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "architecturalstyletypeid\n",
      "7.0     394\n",
      "8.0      35\n",
      "2.0      16\n",
      "21.0     15\n",
      "3.0       7\n",
      "10.0      1\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "i = 'architecturalstyletypeid'\n",
    "print(train_df[i].value_counts())\n",
    "# We will drop this colum as no of missing values is too high\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "649ef053",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:00.409524Z",
     "iopub.status.busy": "2024-04-15T14:08:00.409120Z",
     "iopub.status.idle": "2024-04-15T14:08:00.413812Z",
     "shell.execute_reply": "2024-04-15T14:08:00.412456Z"
    },
    "papermill": {
     "duration": 0.048175,
     "end_time": "2024-04-15T14:08:00.416413",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.368238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "i = 'basementsqft'\n",
    "#print(train_df[i].value_counts())\n",
    "# We will drop this colum as no of missing values is too high\n",
    "# if i not in to_drop:\n",
    "#     to_drop.append(i)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "1a560f26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:00.496920Z",
     "iopub.status.busy": "2024-04-15T14:08:00.496512Z",
     "iopub.status.idle": "2024-04-15T14:08:00.503671Z",
     "shell.execute_reply": "2024-04-15T14:08:00.502748Z"
    },
    "papermill": {
     "duration": 0.050083,
     "end_time": "2024-04-15T14:08:00.505996",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.455913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "buildingclasstypeid\n",
      "4.0    30\n",
      "3.0     1\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "i = 'buildingclasstypeid'\n",
    "print(train_df[i].value_counts())\n",
    "# We will drop this colum as no of missing values is too high\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9d397590",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:00.586822Z",
     "iopub.status.busy": "2024-04-15T14:08:00.586390Z",
     "iopub.status.idle": "2024-04-15T14:08:00.595322Z",
     "shell.execute_reply": "2024-04-15T14:08:00.594139Z"
    },
    "papermill": {
     "duration": 0.051543,
     "end_time": "2024-04-15T14:08:00.597795",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.546252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "taxdelinquencyyear\n",
      "15.0    2078\n",
      "14.0    1429\n",
      "13.0     397\n",
      "12.0     267\n",
      "11.0     183\n",
      "10.0     155\n",
      "9.0      110\n",
      "8.0       38\n",
      "7.0       18\n",
      "6.0        4\n",
      "99.0       2\n",
      "3.0        1\n",
      "4.0        1\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# We will drop taxlinquencyyear as we already have the flag column\n",
    "\n",
    "i ='taxdelinquencyyear'\n",
    "print(train_df[i].value_counts())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "04760734",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:00.679464Z",
     "iopub.status.busy": "2024-04-15T14:08:00.678339Z",
     "iopub.status.idle": "2024-04-15T14:08:00.689809Z",
     "shell.execute_reply": "2024-04-15T14:08:00.688274Z"
    },
    "papermill": {
     "duration": 0.054667,
     "end_time": "2024-04-15T14:08:00.692266",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.637599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "buildingqualitytypeid\n",
      "7.0     35291\n",
      "4.0     33347\n",
      "8.0     14690\n",
      "6.0     13503\n",
      "1.0      2653\n",
      "9.0      2303\n",
      "5.0      2099\n",
      "10.0     1774\n",
      "11.0      934\n",
      "3.0       335\n",
      "12.0      235\n",
      "2.0         9\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Overall assessment of condition of the building from best (lowest) to worst (highest)\n",
    "i = 'buildingqualitytypeid'\n",
    "print(train_df[i].value_counts())\n",
    "# We will drop this colum as no of missing values is too high\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "999d014c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:00.772500Z",
     "iopub.status.busy": "2024-04-15T14:08:00.772101Z",
     "iopub.status.idle": "2024-04-15T14:08:00.779282Z",
     "shell.execute_reply": "2024-04-15T14:08:00.778113Z"
    },
    "papermill": {
     "duration": 0.050502,
     "end_time": "2024-04-15T14:08:00.781918",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.731416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "decktypeid\n",
      "66.0    1272\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "i = 'decktypeid'\n",
    "print(train_df[i].value_counts())\n",
    "# We will drop this colum as no of missing values is too high\n",
    "# if i not in to_drop:\n",
    "#     to_drop.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ad8fa253",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:00.863825Z",
     "iopub.status.busy": "2024-04-15T14:08:00.863413Z",
     "iopub.status.idle": "2024-04-15T14:08:00.871253Z",
     "shell.execute_reply": "2024-04-15T14:08:00.869972Z"
    },
    "papermill": {
     "duration": 0.051927,
     "end_time": "2024-04-15T14:08:00.873536",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.821609",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "storytypeid\n",
      "7.0    93\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "i = 'storytypeid'\n",
    "print(train_df[i].value_counts())\n",
    "# We will drop this colum as no of missing values is too high\n",
    "# if i not in to_drop:\n",
    "#     to_drop.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0efdb151",
   "metadata": {
    "papermill": {
     "duration": 0.039091,
     "end_time": "2024-04-15T14:08:00.951669",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.912578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "70918bd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:01.034040Z",
     "iopub.status.busy": "2024-04-15T14:08:01.033586Z",
     "iopub.status.idle": "2024-04-15T14:08:01.038374Z",
     "shell.execute_reply": "2024-04-15T14:08:01.037286Z"
    },
    "papermill": {
     "duration": 0.048381,
     "end_time": "2024-04-15T14:08:01.040532",
     "exception": false,
     "start_time": "2024-04-15T14:08:00.992151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# We will drop all pool related column as we have pool cnt colun\n",
    "# We will drop all other area related column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2061defa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:01.122171Z",
     "iopub.status.busy": "2024-04-15T14:08:01.120967Z",
     "iopub.status.idle": "2024-04-15T14:08:01.125573Z",
     "shell.execute_reply": "2024-04-15T14:08:01.124703Z"
    },
    "papermill": {
     "duration": 0.047667,
     "end_time": "2024-04-15T14:08:01.127684",
     "exception": false,
     "start_time": "2024-04-15T14:08:01.080017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#train_df['propertycountylandusecode'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "148aab11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:01.209291Z",
     "iopub.status.busy": "2024-04-15T14:08:01.208309Z",
     "iopub.status.idle": "2024-04-15T14:08:01.741283Z",
     "shell.execute_reply": "2024-04-15T14:08:01.740086Z"
    },
    "papermill": {
     "duration": 0.576552,
     "end_time": "2024-04-15T14:08:01.743730",
     "exception": false,
     "start_time": "2024-04-15T14:08:01.167178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='logerror', ylabel='Count'>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ulimit = np.percentile(train_df.logerror.values, 99) \n",
    "llimit = np.percentile(train_df.logerror.values, 1) \n",
    "train_df['logerror'].loc[train_df['logerror'] > ulimit] = ulimit\n",
    "train_df['logerror'].loc[train_df['logerror'] < llimit] = llimit\n",
    "sns.histplot(train2016['logerror'],bins=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7cae1b35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:01.825774Z",
     "iopub.status.busy": "2024-04-15T14:08:01.824864Z",
     "iopub.status.idle": "2024-04-15T14:08:08.034207Z",
     "shell.execute_reply": "2024-04-15T14:08:08.032999Z"
    },
    "papermill": {
     "duration": 6.255296,
     "end_time": "2024-04-15T14:08:08.039056",
     "exception": false,
     "start_time": "2024-04-15T14:08:01.783760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1200x1200 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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YTQaiY2N5amnnjrTVIUQokdIiQzArNf4LLs+rTcxIfI+aCF6sh5bLDY2NjJz5kzuuOOOdm9TW1vL2LFj+fOf/9zm+smTJ6NSqdi0aRNbtmyhsbGRqVOn4vH4/sX86KOPUlxc7P389re/9a6z2+1MnjyZuLg4vv/+e55++mmWLl3KypUrzyxZIYToAUbEBfPSTSOY1D+clIgAFl+RwqwRsV0dlhDiLPXYAS7Lli0D4NVXX233NjfddBMAubm5ra7fsmULubm57Nq1yzuSas2aNQQHB7Np0yYmTZrkbRsQEEBkZGSr+3njjTdobGzklVdeQa/XM3DgQDIyMnj22WdZsGBBu+MVQoieRKVSMa6vlVHxIThcbiwmmYBbiPNBj72z2BkcDgcqlQqDweBdZjQaUavVfPPNNz5tV6xYQWhoKMOGDePpp5/G5XJ5123dupXx48ej1/90opwyZQqZmZlUVla2eWy73e7zEUKInsio00ihKDqdXDfPHSkWTzB69GjMZjOLFy+mrq6O2tpaFi1ahNvtpri42Ntu4cKFrFu3jvT0dG677TaefPJJHnzwQe/6Y8eOERER4bPv5u/Hjh1r9djLly/HYrF4P7Gx8uhGCCGEaItcN8+dblUs/v73v28xcOTnn4MHD3ba8a1WK2+99Rbvv/8+/v7+WCwWqqqqGD58OGr1Tz+q++67jwkTJjBkyBBuv/12nnnmGV544QUcDscZH/uhhx7CZrN5PwUFBR2RkhBCCHFekuvmudOt+izef//9zJ0796RtEhMTOzWGyZMnk52dTXl5OVqtlqCgICIjI0963LS0NFwuF7m5uaSkpBAZGdliBHXz97b6ORoMBp/H30IIIYRom1w3z51uVSxarVasVmtXhwFAWFgYAJs2baK0tJRp06a12TYjIwO1Wk14eDgAF198MQ8//DBOpxOdruk1V5999hkpKSkEBwd3fvBCCCGEEB2kWz2GPh35+flkZGSQn5+P2+0mIyODjIwMampqvG369evHO++84/1eUVFBRkYGBw4cACAzM5OMjAyffoSrV69m27ZtZGdns3btWmbOnMm9995LSkoK0DR45bnnnmP37t0cOXKEN954g3vvvZcbb7zRWwhef/316PV65s2bx/79+3nzzTd5/vnnue+++87Fj0YIIYQQouMoPdScOXMUoMUnPT3d2wZQVq9e7f2+evXqVrdZsmSJt83ixYuViIgIRafTKX379lWeeeYZxePxeNd///33SlpammKxWBSj0aj0799fefLJJ5WGhgaf+Hbv3q2MHTtWMRgMSnR0tLJixYrTys9msymAYrPZTms7IYQQ4kIk183Oo1IURemSKlWclN1ux2KxYLPZvHM+CiGEEKJ1ct3sPD32MbQQQgghhOh8UiwKIYQQQog2SbEohBBCCCHaJMWiEEIIIYRokxSLQgghhBCiTVIsCiGEEEKINkmxKIQQQggh2iTFohBCCCGEaFO3eje0+EnzXOl2u72LIxFCCCHOnYCAAFQqVVeHIU4gxWI3VV1dDUBsbGwXRyKEEEKcO/IGlu5HXvfXTXk8HoqKirrVX1h2u53Y2FgKCgrOu//IklvPJLn1POdrXiC5dZQzve4pikJ1dXW3um6eL+TOYjelVquJiYnp6jBaFRgYeN6dCJtJbj2T5NbznK95geTWVVQqVbeNraeTAS5CCCGEEKJNUiwKIYQQQog2SbEo2s1gMLBkyRIMBkNXh9LhJLeeSXLrec7XvEByE+cvGeAihBBCCCHaJHcWhRBCCCFEm6RYFEIIIYQQbZJiUQghhBBCtEmKRSGEEEII0SYpFi9QL774IkOGDPFOsHrxxRfz0Ucftdl+/fr1jBw5kqCgIMxmM6mpqbz++utttr/99ttRqVQ899xznRD9yXVWbj/88APTpk3DYrFgNpsZNWoU+fn5nZlKC52RW01NDXfffTcxMTGYTCYGDBjASy+91Nmp+DjdvE60bt06VCoV06dP91muKAqPPPIIvXr1wmQyMWnSJA4fPtwJ0Z9cR+fmdDpZvHgxgwcPxmw2ExUVxc0330xRUVEnZdC2zvi9nagnnUdOdLLceuJ55ERt5dYdziOiEynigrRhwwZl48aNyqFDh5TMzEzlD3/4g6LT6ZR9+/a12j49PV1Zv369cuDAASUrK0t57rnnFI1Go3z88cct2q5fv14ZOnSoEhUVpfz1r3/t5Exa6ozcsrKylJCQEOWBBx5Qdu7cqWRlZSnvvfeeUlJScq7SUhSlc3KbP3++kpSUpKSnpys5OTnKP//5T0Wj0SjvvffeuUrrtPNqlpOTo0RHRyvjxo1TfvWrX/msW7FihWKxWJR3331X2b17tzJt2jQlISFBqa+v78RMWuro3KqqqpRJkyYpb775pnLw4EFl69atykUXXaSMGDGikzNpqTN+b8162nmk2cly66nnkWYny607nEdE55FiUXgFBwcrq1atanf7YcOGKX/84x99lh09elSJjo5W9u3bp8TFxXXJSb41Z5vbtddeq9x4442dEdpZO9vcBg4cqDz66KM+bYYPH648/PDDHRbjmThVXi6XSxkzZoyyatUqZc6cOT4XL4/Ho0RGRipPP/20d1lVVZViMBiUf//7350ZdrucTW6t2b59uwIoeXl5HRzp6euI3HrqeeRUufXk88ipcuuu5xHRMeQxtMDtdrNu3Tpqa2u5+OKLT9leURS++OILMjMzGT9+vHe5x+Phpptu4oEHHmDgwIGdGXK7dURuHo+HjRs3kpyczJQpUwgPDyctLY133323k6M/uY76vY0ZM4YNGzZQWFiIoiikp6dz6NAhJk+e3Jnht6m9eT366KOEh4czb968FutycnI4duwYkyZN8i6zWCykpaWxdevWTom7PToit9bYbDZUKhVBQUEdFOnp66jcevJ55GS59fTzyKl+b93tPCI6WJeWqqJL7dmzRzGbzYpGo1EsFouycePGk7avqqpSzGazotVqFYPBoLz88ss+65988knl8ssvVzwej6IoSpfeEejI3IqLixVA8fPzU5599lll165dyvLlyxWVSqV8+eWXnZ1KCx39e2toaFBuvvlmBVC0Wq2i1+uVNWvWdGYKrTqdvDZv3qxER0crZWVliqIoLe50bNmyRQGUoqIin+1mzpypzJo1q1PiP5mOzO3n6uvrleHDhyvXX399R4fdLh2dW089j5wqt558HmnP7627nEdE55Bi8QLmcDiUw4cPKzt27FB+//vfK2FhYcr+/fvbbO92u5XDhw8ru3btUv7yl78oFotFSU9PVxRFUXbs2KFEREQohYWF3vZdeZLvyNwKCwsVQLnuuut8tpk6daoye/bszkyjVR2Zm6IoytNPP60kJycrGzZsUHbv3q288MILir+/v/LZZ5+dg2x+0t687Ha7Eh8fr3z44YfeZd29WOzI3E7U2NioTJ06VRk2bJhis9k6K/yT6sjceup5pD259dTzSHv/TXaX84joHFIsCq/LLrtMWbBgQbvbz5s3T5k8ebKiKIry17/+VVGpVIpGo/F+AEWtVitxcXGdFHH7nU1uDodD0Wq1ymOPPebT5sEHH1TGjBnToXGeibPJra6uTtHpdMoHH3zQos2UKVM6NM7T1VZeu3btUgCff2sqlcr77y8rK0vJzs5WAGXXrl0+244fP15ZuHDhOcqgbWeTW7PGxkZl+vTpypAhQ5Ty8vJzGf5JnU1uPfU80p7ceup5pD25defziOgY2nP/4Ft0Vx6PB4fDcUbtb7rpJp/+YQBTpkzhpptu4pZbbunQOM/E2eSm1+sZNWoUmZmZPm0OHTpEXFxch8Z5Js4mN6fTidPpRK327b6s0WjweDwdGufpaiuvfv36sXfvXp9lf/zjH6murub5558nNjYWnU5HZGQkX3zxBampqQDY7Xa+/fZb7rjjjnMR/kmdTW7Q9HubNWsWhw8fJj09ndDQ0HMSd3ucTW499TzSntx66nmkPbk1NDR02/OI6BhSLF6gHnroIa688kp69+5NdXU1//rXv/jyyy/55JNPALj55puJjo5m+fLlACxfvpyRI0eSlJSEw+Hgww8/5PXXX+fFF18EIDQ0tMUFq/mCnZKS0qNzA3jggQe49tprGT9+PBMnTuTjjz/m/fff58svv+zRuQUGBnLJJZfwwAMPYDKZiIuL46uvvuK1117j2Wef7ZZ5GY1GBg0a5LN988COE5ffc889PP744/Tt25eEhAT+9Kc/ERUVddJ5/TpDR+fmdDq55ppr2LlzJx988AFut5tjx44BEBISgl6v77G59dTzSHv/TfbE80h7ctPr9d3iPCI6jxSLF6jS0lJuvvlmiouLsVgsDBkyhE8++YTLL78cgPz8fJ+/Emtra7nzzjs5evQoJpOJfv36sXbtWq699tquSqFNnZHbjBkzeOmll1i+fDkLFy4kJSWFt99+m7Fjx/b43NatW8dDDz3EDTfcQEVFBXFxcTzxxBPcfvvt3Tav9njwwQepra1lwYIFVFVVMXbsWD7++GOMRmNnpNCmjs6tsLCQDRs2AHjvmjZLT09nwoQJHRX6KXXG76276Izceup5pD26w3lEdB6VoihKVwchhBBCCCG6p575J58QQgghhDgnpFgUQgghhBBtkmJRCCGEEEK0SYpFIYQQQgjRJikWhRBCCCFEm6RYFEIIIYQQbZJiUQghhBBCtEmKRSGEEEK0y9dff83UqVOJiopCpVLx7rvvntb2S5cuRaVStfiYzebOCVh0CCkWhRAXpOaL1rmiUqlYunTpOTueEJ2htraWoUOH8ve///2Mtl+0aBHFxcU+nwEDBjBz5swOjlR0JCkWhRDdzquvvopKpWLHjh1ntZ+6ujqWLl3a7nfvPvnkk6d9p0SIC8mVV17J448/zowZM1pd73A4WLRoEdHR0ZjNZtLS0nz+//n7+xMZGen9lJSUcODAAebNm3eOMhBnQopFIcR5q66ujmXLlrVaLP7xj3+kvr7eZ5kUi0KcnbvvvputW7eybt069uzZw8yZM7niiis4fPhwq+1XrVpFcnIy48aNO8eRitMhxaIQ4oKk1WoxGo1dHYYQ5438/HxWr17NW2+9xbhx40hKSmLRokWMHTuW1atXt2jf0NDAG2+8IXcVewApFoUQPU5jYyOPPPIII0aMwGKxYDabGTduHOnp6d42ubm5WK1WAJYtW+btSN/cb/DnfRZVKhW1tbWsWbPG23bu3LkAzJ07l/j4+BZxtNbv0eFwcO+992K1WgkICGDatGkcPXq01TwKCwv5zW9+Q0REBAaDgYEDB/LKK6+cxU9GiK6zd+9e3G43ycnJ+Pv7ez9fffUV2dnZLdq/8847VFdXM2fOnC6IVpwObVcHIIQQp8tut7Nq1Squu+465s+fT3V1NS+//DJTpkxh+/btpKamYrVaefHFF7njjjuYMWMGV199NQBDhgxpdZ+vv/46t956KxdddBELFiwAICkp6bRju/XWW1m7di3XX389Y8aMYdOmTfzyl79s0a6kpITRo0ejUqm4++67sVqtfPTRR8ybNw+73c4999xz2scWoivV1NSg0Wj4/vvv0Wg0Puv8/f1btF+1ahVXXXUVERER5ypEcYakWBRC9DjBwcHk5uai1+u9y+bPn0+/fv144YUXePnllzGbzVxzzTXccccdDBkyhBtvvPGk+7zxxhu5/fbbSUxMPGXbtuzevZu1a9dy5513ekeL3nXXXdxwww3s2bPHp+3DDz+M2+1m7969hIaGAnD77bdz3XXXsXTpUm677TZMJtMZxSFEVxg2bBhut5vS0tJT9kHMyckhPT2dDRs2nKPoxNmQx9BCiB5Ho9F4C0WPx0NFRQUul4uRI0eyc+fOLovrww8/BGDhwoU+y39+l1BRFN5++22mTp2KoiiUl5d7P1OmTMFms3VpHkK0paamhoyMDDIyMoCmoi8jI4P8/HySk5O54YYbuPnmm1m/fj05OTls376d5cuXs3HjRp/9vPLKK/Tq1Ysrr7yyC7IQp0vuLAoheqQ1a9bwzDPPcPDgQZxOp3d5QkJCl8WUl5eHWq1u8fg6JSXF53tZWRlVVVWsXLmSlStXtrqv0tLSTotTiDO1Y8cOJk6c6P1+3333ATBnzhxeffVVVq9ezeOPP879999PYWEhYWFhjB49mquuusq7jcfj4dVXX2Xu3LktHleL7kmKRSFEj7N27Vrmzp3L9OnTeeCBBwgPD0ej0bB8+fJWO9KfrbYm73a73We0P4/HAzQ9+m6rc39bfSuF6EoTJkxAUZQ21+t0OpYtW8ayZcvabKNWqykoKOiM8EQnkWJRCNHj/Oc//yExMZH169f7FHJLlizxaXe6b2hpq31wcDBVVVUtlufl5fl8j4uLw+PxkJ2d7XM3MTMz06dd80hpt9vNpEmTTitGIYQ416TPohCix2l+dHXiHY5vv/2WrVu3+rTz8/MDaLXQa43ZbG61bVJSEjabzWeQSnFxMe+8845Pu+b+V3/72998lj/33HMt4v/1r3/N22+/zb59+1ocr6ysrF3xCiHEuSB3FoUQ3dYrr7zCxx9/3GL5hAkTWL9+PTNmzOCXv/wlOTk5vPTSSwwYMICamhpvO5PJxIABA3jzzTdJTk4mJCSEQYMGMWjQoFaPN2LECD7//HOeffZZoqKiSEhIIC0tjdmzZ7N48WJmzJjBwoULqaur48UXXyQ5OdlnIEpqairXXXcd//jHP7DZbIwZM4YvvviCrKysFsdasWIF6enppKWlMX/+fAYMGEBFRQU7d+7k888/p6KiogN+gkII0QEUIYToZlavXq0AbX7y8/OVJ598UomLi1MMBoMybNgw5YMPPlDmzJmjxMXF+ezrv//9rzJixAhFr9crgLJkyRJFURRlyZIlys9PgQcPHlTGjx+vmEwmBVDmzJnjXffpp58qgwYNUvR6vZKSkqKsXbu21X3U19crCxcuVEJDQxWz2axMnTpVKSgo8Dl2s5KSEuWuu+5SYmNjFZ1Op0RGRiqXXXaZsnLlyo76UQohxFlTKcpJeqoKIYQQQogLmvRZFEIIIYQQbZJiUQghhBBCtEmKRSGEEEII0SYpFoUQQgghRJukWBRCCCGEEG2SYlEIIYQQQrRJikUhhBBCCNEmKRaFEEIIIUSbpFgUQgghhBBtkmJRCCGEEEK0SYpFIYQQQgjRJikWhRBCCCFEm/4/8s2TwuTrRYMAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 600x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (12,12))\n",
    "sns.jointplot(x = train_df.latitude.values, y = train_df.longitude.values, size = 10)\n",
    "plt.ylabel('Longitude', fontsize = 12)\n",
    "plt.xlabel('Latitude', fontsize = 12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "314321cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:08.128058Z",
     "iopub.status.busy": "2024-04-15T14:08:08.127570Z",
     "iopub.status.idle": "2024-04-15T14:08:08.132997Z",
     "shell.execute_reply": "2024-04-15T14:08:08.131816Z"
    },
    "papermill": {
     "duration": 0.05329,
     "end_time": "2024-04-15T14:08:08.135645",
     "exception": false,
     "start_time": "2024-04-15T14:08:08.082355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "#profile.to_file('eda_report.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "e16828e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:08.225538Z",
     "iopub.status.busy": "2024-04-15T14:08:08.225042Z",
     "iopub.status.idle": "2024-04-15T14:08:08.232017Z",
     "shell.execute_reply": "2024-04-15T14:08:08.230531Z"
    },
    "papermill": {
     "duration": 0.054623,
     "end_time": "2024-04-15T14:08:08.234628",
     "exception": false,
     "start_time": "2024-04-15T14:08:08.180005",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #life of property\n",
    "# df_train['N-life'] = 2018 - df_train['yearbuilt']\n",
    "\n",
    "# #error in calculation of the finished living area of home\n",
    "# df_train['N-LivingAreaError'] = df_train['calculatedfinishedsquarefeet']/df_train['finishedsquarefeet12']\n",
    "\n",
    "# #proportion of living area\n",
    "# df_train['N-LivingAreaProp'] = df_train['calculatedfinishedsquarefeet']/df_train['lotsizesquarefeet']\n",
    "# df_train['N-LivingAreaProp2'] = df_train['finishedsquarefeet12']/df_train['finishedsquarefeet15']\n",
    "\n",
    "# #Amout of extra space\n",
    "# df_train['N-ExtraSpace'] = df_train['lotsizesquarefeet'] - df_train['calculatedfinishedsquarefeet'] \n",
    "# df_train['N-ExtraSpace-2'] = df_train['finishedsquarefeet15'] - df_train['finishedsquarefeet12'] \n",
    "\n",
    "# #Total number of rooms\n",
    "# df_train['N-TotalRooms'] = df_train['bathroomcnt']*df_train['bedroomcnt']\n",
    "\n",
    "# #Average room size\n",
    "# df_train['N-AvRoomSize'] = df_train['calculatedfinishedsquarefeet']/df_train['roomcnt'] \n",
    "\n",
    "# # Number of Extra rooms\n",
    "# df_train['N-ExtraRooms'] = df_train['roomcnt'] - df_train['N-TotalRooms'] \n",
    "\n",
    "# #Ratio of the built structure value to land area\n",
    "# df_train['N-ValueProp'] = df_train['structuretaxvaluedollarcnt']/df_train['landtaxvaluedollarcnt']\n",
    "\n",
    "# #Does property have a garage, pool or hot tub and AC?\n",
    "# df_train['N-GarPoolAC'] = ((df_train['garagecarcnt']>0) & (df_train['pooltypeid10']>0) & (df_train['airconditioningtypeid']!=5))*1 \n",
    "\n",
    "# df_train[\"N-location\"] = df_train[\"latitude\"] + df_train[\"longitude\"]\n",
    "# df_train[\"N-location-2\"] = df_train[\"latitude\"]*df_train[\"longitude\"]\n",
    "# df_train[\"N-location-2round\"] = df_train[\"N-location-2\"].round(-4)\n",
    "\n",
    "# df_train[\"N-latitude-round\"] = df_train[\"latitude\"].round(-4)\n",
    "# df_train[\"N-longitude-round\"] = df_train[\"longitude\"].round(-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9cf15fe5",
   "metadata": {
    "papermill": {
     "duration": 0.044114,
     "end_time": "2024-04-15T14:08:08.322490",
     "exception": false,
     "start_time": "2024-04-15T14:08:08.278376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3768914",
   "metadata": {
    "papermill": {
     "duration": 0.04331,
     "end_time": "2024-04-15T14:08:08.410243",
     "exception": false,
     "start_time": "2024-04-15T14:08:08.366933",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb25573f",
   "metadata": {
    "papermill": {
     "duration": 0.043578,
     "end_time": "2024-04-15T14:08:08.498316",
     "exception": false,
     "start_time": "2024-04-15T14:08:08.454738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "8028f88d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:08.589399Z",
     "iopub.status.busy": "2024-04-15T14:08:08.588962Z",
     "iopub.status.idle": "2024-04-15T14:08:08.735459Z",
     "shell.execute_reply": "2024-04-15T14:08:08.734015Z"
    },
    "papermill": {
     "duration": 0.195611,
     "end_time": "2024-04-15T14:08:08.737983",
     "exception": false,
     "start_time": "2024-04-15T14:08:08.542372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "del num_rows, missing_perc_thresh\n",
    "gc.collect();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d5dec97",
   "metadata": {
    "papermill": {
     "duration": 0.042745,
     "end_time": "2024-04-15T14:08:08.823785",
     "exception": false,
     "start_time": "2024-04-15T14:08:08.781040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "4ec1cd5c",
   "metadata": {
    "papermill": {
     "duration": 0.043453,
     "end_time": "2024-04-15T14:08:08.910191",
     "exception": false,
     "start_time": "2024-04-15T14:08:08.866738",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## STEP 3 : Model training and Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "5e9c5981",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:09.000374Z",
     "iopub.status.busy": "2024-04-15T14:08:08.998924Z",
     "iopub.status.idle": "2024-04-15T14:08:10.108917Z",
     "shell.execute_reply": "2024-04-15T14:08:10.107703Z"
    },
    "papermill": {
     "duration": 1.158189,
     "end_time": "2024-04-15T14:08:10.111527",
     "exception": false,
     "start_time": "2024-04-15T14:08:08.953338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training time !!\n",
      "(167854, 36) (167854,)\n",
      "(2985217, 36)\n"
     ]
    }
   ],
   "source": [
    "print (\"Training time !!\")\n",
    "X_train = train_df[train_features]\n",
    "y_train = train_df.logerror\n",
    "print(X_train.shape, y_train.shape)\n",
    "\n",
    "test_df['transactiondate'] = pd.Timestamp('2016-12-01') \n",
    "test_df = add_date_features(test_df)\n",
    "X_test = test_df[train_features]\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "87742ece",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:10.199929Z",
     "iopub.status.busy": "2024-04-15T14:08:10.199462Z",
     "iopub.status.idle": "2024-04-15T14:08:10.921251Z",
     "shell.execute_reply": "2024-04-15T14:08:10.919837Z"
    },
    "papermill": {
     "duration": 0.769366,
     "end_time": "2024-04-15T14:08:10.924232",
     "exception": false,
     "start_time": "2024-04-15T14:08:10.154866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "cat_columns = ['taxdelinquencyflag']\n",
    "\n",
    "for i in cat_columns:\n",
    "    le = LabelEncoder()\n",
    "    X_train[i]= le.fit_transform(X_train[i])\n",
    "    X_test[i] = le.transform(X_test[i])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2f466b26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:11.029317Z",
     "iopub.status.busy": "2024-04-15T14:08:11.028435Z",
     "iopub.status.idle": "2024-04-15T14:08:11.075267Z",
     "shell.execute_reply": "2024-04-15T14:08:11.074346Z"
    },
    "papermill": {
     "duration": 0.097464,
     "end_time": "2024-04-15T14:08:11.077915",
     "exception": false,
     "start_time": "2024-04-15T14:08:10.980451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_train,y_train,test_size=.1, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "8f19ce13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:11.173684Z",
     "iopub.status.busy": "2024-04-15T14:08:11.173130Z",
     "iopub.status.idle": "2024-04-15T14:08:12.198261Z",
     "shell.execute_reply": "2024-04-15T14:08:12.196425Z"
    },
    "papermill": {
     "duration": 1.078844,
     "end_time": "2024-04-15T14:08:12.202705",
     "exception": false,
     "start_time": "2024-04-15T14:08:11.123861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import xgboost as xgb\n",
    "dtrain = xgb.DMatrix(X_train, label=y_train)\n",
    "dtest = xgb.DMatrix(X_val, label=y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "ab512f9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:08:12.317881Z",
     "iopub.status.busy": "2024-04-15T14:08:12.317491Z",
     "iopub.status.idle": "2024-04-15T14:09:57.247729Z",
     "shell.execute_reply": "2024-04-15T14:09:57.246725Z"
    },
    "papermill": {
     "duration": 104.98617,
     "end_time": "2024-04-15T14:09:57.250344",
     "exception": false,
     "start_time": "2024-04-15T14:08:12.264174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV with max_depth=5, min_child_weight=2\n",
      "\tMAE 0.060659579617404515 for 12 rounds\n",
      "CV with max_depth=5, min_child_weight=3\n",
      "\tMAE 0.06067386550336222 for 14 rounds\n",
      "CV with max_depth=5, min_child_weight=4\n",
      "\tMAE 0.06066632093139349 for 8 rounds\n",
      "CV with max_depth=5, min_child_weight=5\n",
      "\tMAE 0.06067286438425266 for 9 rounds\n",
      "CV with max_depth=5, min_child_weight=6\n",
      "\tMAE 0.06065477957777905 for 8 rounds\n",
      "CV with max_depth=5, min_child_weight=7\n",
      "\tMAE 0.06065894959532907 for 9 rounds\n",
      "CV with max_depth=6, min_child_weight=2\n",
      "\tMAE 0.06071142967085029 for 7 rounds\n",
      "CV with max_depth=6, min_child_weight=3\n",
      "\tMAE 0.060716341929867815 for 6 rounds\n",
      "CV with max_depth=6, min_child_weight=4\n",
      "\tMAE 0.06071535519658017 for 9 rounds\n",
      "CV with max_depth=6, min_child_weight=5\n",
      "\tMAE 0.060707336949809364 for 7 rounds\n",
      "CV with max_depth=6, min_child_weight=6\n",
      "\tMAE 0.060697422222571 for 7 rounds\n",
      "CV with max_depth=6, min_child_weight=7\n",
      "\tMAE 0.06068324008980548 for 7 rounds\n",
      "CV with max_depth=7, min_child_weight=2\n",
      "\tMAE 0.06075097982336708 for 4 rounds\n",
      "CV with max_depth=7, min_child_weight=3\n",
      "\tMAE 0.06074715452797276 for 5 rounds\n",
      "CV with max_depth=7, min_child_weight=4\n",
      "\tMAE 0.06073917031892008 for 4 rounds\n",
      "CV with max_depth=7, min_child_weight=5\n",
      "\tMAE 0.06075724228050451 for 5 rounds\n",
      "CV with max_depth=7, min_child_weight=6\n",
      "\tMAE 0.060751451040202166 for 5 rounds\n",
      "CV with max_depth=7, min_child_weight=7\n",
      "\tMAE 0.060744025958935265 for 3 rounds\n",
      "CV with max_depth=8, min_child_weight=2\n",
      "\tMAE 0.06080133865480377 for 1 rounds\n",
      "CV with max_depth=8, min_child_weight=3\n",
      "\tMAE 0.06079583440813356 for 1 rounds\n",
      "CV with max_depth=8, min_child_weight=4\n",
      "\tMAE 0.06079100163581582 for 2 rounds\n",
      "CV with max_depth=8, min_child_weight=5\n",
      "\tMAE 0.060790811820273974 for 2 rounds\n",
      "CV with max_depth=8, min_child_weight=6\n",
      "\tMAE 0.06079288743391498 for 1 rounds\n",
      "CV with max_depth=8, min_child_weight=7\n",
      "\tMAE 0.060788712029058126 for 1 rounds\n",
      "CV with max_depth=9, min_child_weight=2\n",
      "\tMAE 0.06081867911097925 for 2 rounds\n",
      "CV with max_depth=9, min_child_weight=3\n",
      "\tMAE 0.06079716059509147 for 1 rounds\n",
      "CV with max_depth=9, min_child_weight=4\n",
      "\tMAE 0.06079589531973465 for 1 rounds\n",
      "CV with max_depth=9, min_child_weight=5\n",
      "\tMAE 0.06079916873416229 for 1 rounds\n",
      "CV with max_depth=9, min_child_weight=6\n",
      "\tMAE 0.060817780234061744 for 1 rounds\n",
      "CV with max_depth=9, min_child_weight=7\n",
      "\tMAE 0.060816767091601366 for 1 rounds\n",
      "Best params: 5, 6, MAE: 0.06065477957777905\n"
     ]
    }
   ],
   "source": [
    "\n",
    "params = {\n",
    "    # Parameters that we are going to tune.\n",
    "    'max_depth':6,\n",
    "    'min_child_weight': 1,\n",
    "    'eta':.3,\n",
    "    'subsample': 1,\n",
    "    'colsample_bytree': 1,\n",
    "    # Other parameters\n",
    "    'objective':'reg:linear',\n",
    "    'verbose' : 0\n",
    "  \n",
    "}\n",
    "\n",
    "num_boost_rounds=100\n",
    "gridsearch_params = [\n",
    "    (max_depth, min_child_weight)\n",
    "    for max_depth in range(5,10)\n",
    "    for min_child_weight in range(2,8)\n",
    "]\n",
    "\n",
    "# Define initial best params and MAE\n",
    "min_mae = float(\"Inf\")\n",
    "best_params = None\n",
    "for max_depth, min_child_weight in gridsearch_params:\n",
    "    print(\"CV with max_depth={}, min_child_weight={}\".format(\n",
    "                             max_depth,\n",
    "                             min_child_weight))\n",
    "    # Update our parameters\n",
    "    params['max_depth'] = max_depth\n",
    "    params['min_child_weight'] = min_child_weight\n",
    "    # Run CV\n",
    "    cv_results = xgb.cv(\n",
    "        dict(params,verbose=0),\n",
    "        dtrain,\n",
    "        num_boost_round=num_boost_rounds,\n",
    "        seed=42,\n",
    "        nfold=5,\n",
    "        metrics={'mae'},\n",
    "        early_stopping_rounds=10\n",
    "    )\n",
    "    # Update best MAE\n",
    "    mean_mae = cv_results['test-mae-mean'].min()\n",
    "    boost_rounds = cv_results['test-mae-mean'].argmin()\n",
    "    print(\"\\tMAE {} for {} rounds\".format(mean_mae, boost_rounds))\n",
    "    if mean_mae < min_mae:\n",
    "        min_mae = mean_mae\n",
    "        best_params = (max_depth,min_child_weight)\n",
    "print(\"Best params: {}, {}, MAE: {}\".format(best_params[0], best_params[1], min_mae))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "b5c70f46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:09:57.350048Z",
     "iopub.status.busy": "2024-04-15T14:09:57.348236Z",
     "iopub.status.idle": "2024-04-15T14:09:57.354918Z",
     "shell.execute_reply": "2024-04-15T14:09:57.353594Z"
    },
    "papermill": {
     "duration": 0.059054,
     "end_time": "2024-04-15T14:09:57.357520",
     "exception": false,
     "start_time": "2024-04-15T14:09:57.298466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "params['max_depth'] = best_params[0]\n",
    "params['min_child_weight'] = best_params[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "7969a189",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:09:57.453634Z",
     "iopub.status.busy": "2024-04-15T14:09:57.453221Z",
     "iopub.status.idle": "2024-04-15T14:10:28.830099Z",
     "shell.execute_reply": "2024-04-15T14:10:28.828760Z"
    },
    "papermill": {
     "duration": 31.46418,
     "end_time": "2024-04-15T14:10:28.868302",
     "exception": false,
     "start_time": "2024-04-15T14:09:57.404122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV with subsample=1.0, colsample=1.0\n",
      "\tMAE 0.06065477957777905 for 8 rounds\n",
      "CV with subsample=1.0, colsample=0.9\n",
      "\tMAE 0.060659623980453284 for 11 rounds\n",
      "CV with subsample=1.0, colsample=0.8\n",
      "\tMAE 0.060666121723022534 for 9 rounds\n",
      "CV with subsample=0.9, colsample=1.0\n",
      "\tMAE 0.06070211541015415 for 7 rounds\n",
      "CV with subsample=0.9, colsample=0.9\n",
      "\tMAE 0.060668764233089735 for 11 rounds\n",
      "CV with subsample=0.9, colsample=0.8\n",
      "\tMAE 0.06069101499072878 for 14 rounds\n",
      "CV with subsample=0.8, colsample=1.0\n",
      "\tMAE 0.060738964474898724 for 10 rounds\n",
      "CV with subsample=0.8, colsample=0.9\n",
      "\tMAE 0.06071575091369732 for 9 rounds\n",
      "CV with subsample=0.8, colsample=0.8\n",
      "\tMAE 0.06070517045251457 for 9 rounds\n",
      "Best params: 1.0, 1.0, MAE: 0.06065477957777905\n"
     ]
    }
   ],
   "source": [
    "gridsearch_params = [\n",
    "    (subsample, colsample)\n",
    "    for subsample in [i/10. for i in range(8,11)]\n",
    "    for colsample in [i/10. for i in range(8,11)]\n",
    "]\n",
    "\n",
    "min_mae = float(\"Inf\")\n",
    "best_params = None\n",
    "# We start by the largest values and go down to the smallest\n",
    "for subsample, colsample in reversed(gridsearch_params):\n",
    "    print(\"CV with subsample={}, colsample={}\".format(\n",
    "                             subsample,\n",
    "                             colsample))\n",
    "    # We update our parameters\n",
    "    params['subsample'] = subsample\n",
    "    params['colsample_bytree'] = colsample\n",
    "    # Run CV\n",
    "    cv_results = xgb.cv(\n",
    "        params,\n",
    "        dtrain,\n",
    "        num_boost_round=num_boost_rounds,\n",
    "        seed=42,\n",
    "        nfold=5,\n",
    "        metrics={'mae'},\n",
    "        early_stopping_rounds=10\n",
    "    )\n",
    "    # Update best score\n",
    "    mean_mae = cv_results['test-mae-mean'].min()\n",
    "    boost_rounds = cv_results['test-mae-mean'].argmin()\n",
    "    print(\"\\tMAE {} for {} rounds\".format(mean_mae, boost_rounds))\n",
    "    if mean_mae < min_mae:\n",
    "        min_mae = mean_mae\n",
    "        best_params = (subsample,colsample)\n",
    "print(\"Best params: {}, {}, MAE: {}\".format(best_params[0], best_params[1], min_mae))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "f7c4eb57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:10:28.966172Z",
     "iopub.status.busy": "2024-04-15T14:10:28.964940Z",
     "iopub.status.idle": "2024-04-15T14:10:28.970674Z",
     "shell.execute_reply": "2024-04-15T14:10:28.969722Z"
    },
    "papermill": {
     "duration": 0.057437,
     "end_time": "2024-04-15T14:10:28.973128",
     "exception": false,
     "start_time": "2024-04-15T14:10:28.915691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "params['subsample'] = best_params[0]\n",
    "params['colsample_bytree'] =best_params[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "9092b959",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:10:29.071333Z",
     "iopub.status.busy": "2024-04-15T14:10:29.069633Z",
     "iopub.status.idle": "2024-04-15T14:11:24.241764Z",
     "shell.execute_reply": "2024-04-15T14:11:24.240806Z"
    },
    "papermill": {
     "duration": 55.223448,
     "end_time": "2024-04-15T14:11:24.244292",
     "exception": false,
     "start_time": "2024-04-15T14:10:29.020844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 4 µs, sys: 0 ns, total: 4 µs\n",
      "Wall time: 8.11 µs\n",
      "CV with eta=0.5\n",
      "\tMAE 0.06079525059721726 for 1 rounds\n",
      "\n",
      "CV with eta=0.4\n",
      "\tMAE 0.06072348224351445 for 6 rounds\n",
      "\n",
      "CV with eta=0.3\n",
      "\tMAE 0.06065477957777905 for 8 rounds\n",
      "\n",
      "CV with eta=0.2\n",
      "\tMAE 0.06060403974833737 for 14 rounds\n",
      "\n",
      "CV with eta=0.1\n",
      "\tMAE 0.06051958333944326 for 61 rounds\n",
      "\n",
      "CV with eta=0.05\n",
      "\tMAE 0.06051999229761671 for 99 rounds\n",
      "\n",
      "CV with eta=0.03\n",
      "\tMAE 0.06054693323362683 for 99 rounds\n",
      "\n",
      "CV with eta=0.01\n",
      "\tMAE 0.06069228891427904 for 99 rounds\n",
      "\n",
      "Best params: 0.1, MAE: 0.06051958333944326\n"
     ]
    }
   ],
   "source": [
    "%time\n",
    "# This can take some time…\n",
    "min_mae = float(\"Inf\")\n",
    "best_params = None\n",
    "for eta in [.5,.4,.3, .2, .1, .05,.03, .01,]:\n",
    "    print(\"CV with eta={}\".format(eta))\n",
    "    # We update our parameters\n",
    "    params['eta'] = eta\n",
    "    # Run and time CV\n",
    "    cv_results = xgb.cv(params,\n",
    "            dtrain,\n",
    "            num_boost_round=num_boost_rounds,\n",
    "            seed=42,\n",
    "            nfold=5,\n",
    "            metrics=['mae'],\n",
    "            early_stopping_rounds=10)\n",
    "    # Update best score\n",
    "    mean_mae = cv_results['test-mae-mean'].min()\n",
    "    boost_rounds = cv_results['test-mae-mean'].argmin()\n",
    "    print(\"\\tMAE {} for {} rounds\\n\".format(mean_mae, boost_rounds))\n",
    "    if mean_mae < min_mae:\n",
    "        min_mae = mean_mae\n",
    "        best_params = eta\n",
    "print(\"Best params: {}, MAE: {}\".format(best_params, min_mae))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "c14ce343",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:11:24.346571Z",
     "iopub.status.busy": "2024-04-15T14:11:24.346180Z",
     "iopub.status.idle": "2024-04-15T14:11:24.351342Z",
     "shell.execute_reply": "2024-04-15T14:11:24.350135Z"
    },
    "papermill": {
     "duration": 0.059294,
     "end_time": "2024-04-15T14:11:24.353740",
     "exception": false,
     "start_time": "2024-04-15T14:11:24.294446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "params['eta'] = best_params\n",
    "params['eval_metric'] = 'mae'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "4f0fa5c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:11:24.452159Z",
     "iopub.status.busy": "2024-04-15T14:11:24.451739Z",
     "iopub.status.idle": "2024-04-15T14:11:25.902431Z",
     "shell.execute_reply": "2024-04-15T14:11:25.901469Z"
    },
    "papermill": {
     "duration": 1.503401,
     "end_time": "2024-04-15T14:11:25.905030",
     "exception": false,
     "start_time": "2024-04-15T14:11:24.401629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\tTest-mae:0.05928\n",
      "[1]\tTest-mae:0.05921\n",
      "[2]\tTest-mae:0.05915\n",
      "[3]\tTest-mae:0.05912\n",
      "[4]\tTest-mae:0.05909\n",
      "[5]\tTest-mae:0.05907\n",
      "[6]\tTest-mae:0.05906\n",
      "[7]\tTest-mae:0.05904\n",
      "[8]\tTest-mae:0.05903\n",
      "[9]\tTest-mae:0.05903\n",
      "[10]\tTest-mae:0.05902\n",
      "[11]\tTest-mae:0.05902\n",
      "[12]\tTest-mae:0.05901\n",
      "[13]\tTest-mae:0.05901\n",
      "[14]\tTest-mae:0.05901\n",
      "[15]\tTest-mae:0.05900\n",
      "[16]\tTest-mae:0.05899\n",
      "[17]\tTest-mae:0.05899\n",
      "[18]\tTest-mae:0.05897\n",
      "[19]\tTest-mae:0.05897\n",
      "[20]\tTest-mae:0.05897\n",
      "[21]\tTest-mae:0.05898\n",
      "[22]\tTest-mae:0.05897\n",
      "[23]\tTest-mae:0.05895\n",
      "[24]\tTest-mae:0.05896\n",
      "[25]\tTest-mae:0.05895\n",
      "[26]\tTest-mae:0.05895\n",
      "[27]\tTest-mae:0.05894\n",
      "[28]\tTest-mae:0.05894\n",
      "[29]\tTest-mae:0.05893\n",
      "[30]\tTest-mae:0.05893\n",
      "[31]\tTest-mae:0.05893\n",
      "[32]\tTest-mae:0.05893\n",
      "[33]\tTest-mae:0.05893\n",
      "[34]\tTest-mae:0.05892\n",
      "[35]\tTest-mae:0.05892\n",
      "[36]\tTest-mae:0.05892\n",
      "[37]\tTest-mae:0.05892\n",
      "[38]\tTest-mae:0.05893\n",
      "[39]\tTest-mae:0.05893\n",
      "[40]\tTest-mae:0.05893\n",
      "[41]\tTest-mae:0.05893\n",
      "[42]\tTest-mae:0.05892\n",
      "[43]\tTest-mae:0.05893\n",
      "[44]\tTest-mae:0.05893\n",
      "[45]\tTest-mae:0.05893\n",
      "[46]\tTest-mae:0.05893\n",
      "[47]\tTest-mae:0.05894\n",
      "[48]\tTest-mae:0.05894\n",
      "[49]\tTest-mae:0.05894\n",
      "[50]\tTest-mae:0.05894\n",
      "[51]\tTest-mae:0.05895\n",
      "[52]\tTest-mae:0.05894\n",
      "[53]\tTest-mae:0.05894\n",
      "[54]\tTest-mae:0.05894\n",
      "[55]\tTest-mae:0.05894\n",
      "[56]\tTest-mae:0.05894\n",
      "[57]\tTest-mae:0.05894\n",
      "[58]\tTest-mae:0.05894\n",
      "[59]\tTest-mae:0.05895\n",
      "[60]\tTest-mae:0.05895\n",
      "[61]\tTest-mae:0.05895\n",
      "[62]\tTest-mae:0.05895\n",
      "[63]\tTest-mae:0.05896\n",
      "[64]\tTest-mae:0.05896\n",
      "[65]\tTest-mae:0.05896\n"
     ]
    }
   ],
   "source": [
    "model = xgb.train(dict(params, verbosity=0),\n",
    "                  dtrain,evals=[(dtest, \"Test\")],num_boost_round=500,early_stopping_rounds=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "3a100821",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:11:26.018133Z",
     "iopub.status.busy": "2024-04-15T14:11:26.017709Z",
     "iopub.status.idle": "2024-04-15T14:11:26.024155Z",
     "shell.execute_reply": "2024-04-15T14:11:26.023097Z"
    },
    "papermill": {
     "duration": 0.064794,
     "end_time": "2024-04-15T14:11:26.026589",
     "exception": false,
     "start_time": "2024-04-15T14:11:25.961795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best MAE: 0.058918 in 36 rounds\n"
     ]
    }
   ],
   "source": [
    "print(\"Best MAE: {:.6f} in {} rounds\".format(model.best_score, model.best_iteration+1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2226b73",
   "metadata": {
    "papermill": {
     "duration": 0.0565,
     "end_time": "2024-04-15T14:11:26.138476",
     "exception": false,
     "start_time": "2024-04-15T14:11:26.081976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "6bbb7e9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:11:26.256268Z",
     "iopub.status.busy": "2024-04-15T14:11:26.255801Z",
     "iopub.status.idle": "2024-04-15T14:11:46.198001Z",
     "shell.execute_reply": "2024-04-15T14:11:46.196895Z"
    },
    "papermill": {
     "duration": 20.004285,
     "end_time": "2024-04-15T14:11:46.200927",
     "exception": false,
     "start_time": "2024-04-15T14:11:26.196642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "First XGBoost predictinos:\n",
      "          0\n",
      "0  0.038654\n",
      "1 -0.019038\n",
      "2 -0.001124\n",
      "3  0.017379\n",
      "4 -0.005566\n"
     ]
    }
   ],
   "source": [
    "# Prediction with best model\n",
    "dtest = xgb.DMatrix(X_test)\n",
    "xgb_y_pred = 0\n",
    "xgb_y_pred = model.predict(dtest)\n",
    "\n",
    "print('\\nFirst XGBoost predictinos:')\n",
    "print(pd.DataFrame(xgb_y_pred).head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1414fbab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:16:36.468487Z",
     "iopub.status.busy": "2024-04-13T16:16:36.467225Z",
     "iopub.status.idle": "2024-04-13T16:16:36.476330Z",
     "shell.execute_reply": "2024-04-13T16:16:36.475111Z",
     "shell.execute_reply.started": "2024-04-13T16:16:36.468441Z"
    },
    "papermill": {
     "duration": 0.058458,
     "end_time": "2024-04-15T14:11:46.314777",
     "exception": false,
     "start_time": "2024-04-15T14:11:46.256319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "385cedbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:11:46.433006Z",
     "iopub.status.busy": "2024-04-15T14:11:46.432217Z",
     "iopub.status.idle": "2024-04-15T14:11:47.200201Z",
     "shell.execute_reply": "2024-04-15T14:11:47.199192Z"
    },
    "papermill": {
     "duration": 0.830823,
     "end_time": "2024-04-15T14:11:47.203448",
     "exception": false,
     "start_time": "2024-04-15T14:11:46.372625",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Feature importance'}, xlabel='F score', ylabel='Features'>"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xgb.plot_importance(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "bd38dc75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:11:47.322310Z",
     "iopub.status.busy": "2024-04-15T14:11:47.321511Z",
     "iopub.status.idle": "2024-04-15T14:11:49.766927Z",
     "shell.execute_reply": "2024-04-15T14:11:49.765604Z"
    },
    "papermill": {
     "duration": 2.507715,
     "end_time": "2024-04-15T14:11:49.769566",
     "exception": false,
     "start_time": "2024-04-15T14:11:47.261851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xgb.plot_tree(model, num_trees=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "8cf9a951",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:11:49.888650Z",
     "iopub.status.busy": "2024-04-15T14:11:49.888213Z",
     "iopub.status.idle": "2024-04-15T14:11:49.947668Z",
     "shell.execute_reply": "2024-04-15T14:11:49.946255Z"
    },
    "papermill": {
     "duration": 0.121451,
     "end_time": "2024-04-15T14:11:49.950246",
     "exception": false,
     "start_time": "2024-04-15T14:11:49.828795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 9.0.0 (20231125.0833)\n",
       " -->\n",
       "<!-- Pages: 1 -->\n",
       "<svg width=\"8139pt\" height=\"490pt\"\n",
       " viewBox=\"0.00 0.00 8138.63 490.25\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 486.25)\">\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-486.25 8134.63,-486.25 8134.63,4 -4,4\"/>\n",
       "<!-- 0 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>0</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"4417.97\" cy=\"-464.25\" rx=\"133.28\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"4417.97\" y=\"-459.57\" font-family=\"Times,serif\" font-size=\"14.00\">taxamount&lt;2374.91992</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>1</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"3103.97\" cy=\"-375\" rx=\"185.37\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"3103.97\" y=\"-370.32\" font-family=\"Times,serif\" font-size=\"14.00\">structuretaxvaluedollarcnt&lt;14677</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>0&#45;&gt;1</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M4300.5,-455.45C4064.61,-439.79 3533.04,-404.49 3264.98,-386.69\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"3265.32,-383.21 3255.11,-386.04 3264.85,-390.19 3265.32,-383.21\"/>\n",
       "<text text-anchor=\"middle\" x=\"3890.97\" y=\"-414.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"5098.97\" cy=\"-375\" rx=\"150.64\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"5098.97\" y=\"-370.32\" font-family=\"Times,serif\" font-size=\"14.00\">finishedsquarefeet12&lt;2575</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;2 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>0&#45;&gt;2</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M4512.3,-451.16C4636.67,-435.23 4855.17,-407.24 4987.54,-390.28\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"4987.91,-393.76 4997.39,-389.02 4987.02,-386.81 4987.91,-393.76\"/>\n",
       "<text text-anchor=\"middle\" x=\"4860.85\" y=\"-414.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>3</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"1468.97\" cy=\"-285.75\" rx=\"209.57\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"1468.97\" y=\"-281.07\" font-family=\"Times,serif\" font-size=\"14.00\">censustractandblock&lt;6.03780043e+13</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;3 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>1&#45;&gt;3</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M2944.6,-365.5C2640.35,-349.26 1978.33,-313.93 1654.65,-296.66\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"1654.96,-293.17 1644.79,-296.13 1654.59,-300.16 1654.96,-293.17\"/>\n",
       "<text text-anchor=\"middle\" x=\"2444.97\" y=\"-325.7\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>4</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"3103.97\" cy=\"-285.75\" rx=\"189.05\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"3103.97\" y=\"-281.07\" font-family=\"Times,serif\" font-size=\"14.00\">calculatedfinishedsquarefeet&lt;2063</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;4 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>1&#45;&gt;4</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M3103.97,-356.76C3103.97,-344.93 3103.97,-328.95 3103.97,-315.25\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"3107.47,-315.47 3103.97,-305.47 3100.47,-315.47 3107.47,-315.47\"/>\n",
       "<text text-anchor=\"middle\" x=\"3144.85\" y=\"-325.7\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 5 -->\n",
       "<g id=\"node34\" class=\"node\">\n",
       "<title>5</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"5098.97\" cy=\"-285.75\" rx=\"144.86\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"5098.97\" y=\"-281.07\" font-family=\"Times,serif\" font-size=\"14.00\">taxvaluedollarcnt&lt;143475</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;5 -->\n",
       "<g id=\"edge33\" class=\"edge\">\n",
       "<title>2&#45;&gt;5</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M5098.97,-356.76C5098.97,-344.93 5098.97,-328.95 5098.97,-315.25\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"5102.47,-315.47 5098.97,-305.47 5095.47,-315.47 5102.47,-315.47\"/>\n",
       "<text text-anchor=\"middle\" x=\"5143.22\" y=\"-325.7\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n",
       "</g>\n",
       "<!-- 6 -->\n",
       "<g id=\"node35\" class=\"node\">\n",
       "<title>6</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"6551.97\" cy=\"-285.75\" rx=\"62.78\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"6551.97\" y=\"-281.07\" font-family=\"Times,serif\" font-size=\"14.00\">poolcnt&lt;1</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;6 -->\n",
       "<g id=\"edge34\" class=\"edge\">\n",
       "<title>2&#45;&gt;6</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M5231.12,-366.06C5529.87,-348.13 6249.13,-304.93 6479.61,-291.1\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"6479.58,-294.6 6489.35,-290.51 6479.16,-287.62 6479.58,-294.6\"/>\n",
       "<text text-anchor=\"middle\" x=\"5964.6\" y=\"-325.7\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n",
       "</g>\n",
       "<!-- 7 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>7</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"756.97\" cy=\"-196.5\" rx=\"144.33\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"756.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">finishedsquarefeet12&lt;700</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;7 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>3&#45;&gt;7</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M1352.2,-270.44C1218.31,-254.03 1000.42,-227.33 868.69,-211.19\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"869.25,-207.73 858.9,-209.99 868.4,-214.68 869.25,-207.73\"/>\n",
       "<text text-anchor=\"middle\" x=\"1221.22\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n",
       "</g>\n",
       "<!-- 8 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>8</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"1468.97\" cy=\"-196.5\" rx=\"92.24\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"1468.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">garagecarcnt&lt;1</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;8 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>3&#45;&gt;8</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M1468.97,-267.51C1468.97,-255.68 1468.97,-239.7 1468.97,-226\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"1472.47,-226.22 1468.97,-216.22 1465.47,-226.22 1472.47,-226.22\"/>\n",
       "<text text-anchor=\"middle\" x=\"1477.6\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n",
       "</g>\n",
       "<!-- 9 -->\n",
       "<g id=\"node20\" class=\"node\">\n",
       "<title>9</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"2816.97\" cy=\"-196.5\" rx=\"120.65\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"2816.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">taxdelinquencyflag&lt;1</text>\n",
       "</g>\n",
       "<!-- 4&#45;&gt;9 -->\n",
       "<g id=\"edge19\" class=\"edge\">\n",
       "<title>4&#45;&gt;9</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M3049.31,-268.13C3000.83,-253.39 2930.03,-231.87 2879.35,-216.46\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"2880.56,-213.17 2869.98,-213.61 2878.53,-219.87 2880.56,-213.17\"/>\n",
       "<text text-anchor=\"middle\" x=\"3031.22\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">yes, missing</text>\n",
       "</g>\n",
       "<!-- 10 -->\n",
       "<g id=\"node21\" class=\"node\">\n",
       "<title>10</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"3200.97\" cy=\"-196.5\" rx=\"185.37\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"3200.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">structuretaxvaluedollarcnt&lt;46810</text>\n",
       "</g>\n",
       "<!-- 4&#45;&gt;10 -->\n",
       "<g id=\"edge20\" class=\"edge\">\n",
       "<title>4&#45;&gt;10</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M3123.14,-267.51C3137.48,-254.61 3157.32,-236.76 3173.38,-222.32\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"3175.63,-225 3180.72,-215.71 3170.95,-219.8 3175.63,-225\"/>\n",
       "<text text-anchor=\"middle\" x=\"3170.6\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">no</text>\n",
       "</g>\n",
       "<!-- 15 -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>15</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"362.97\" cy=\"-107.25\" rx=\"109.08\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"362.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">latitude&lt;34039912</text>\n",
       "</g>\n",
       "<!-- 7&#45;&gt;15 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>7&#45;&gt;15</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M688.34,-180.3C618.09,-164.74 509.26,-140.64 437.08,-124.66\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"438.26,-121.34 427.74,-122.59 436.75,-128.17 438.26,-121.34\"/>\n",
       "<text text-anchor=\"middle\" x=\"607.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 16 -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>16</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"756.97\" cy=\"-107.25\" rx=\"160.11\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"756.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">landtaxvaluedollarcnt&lt;55272</text>\n",
       "</g>\n",
       "<!-- 7&#45;&gt;16 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>7&#45;&gt;16</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M756.97,-178.26C756.97,-166.43 756.97,-150.45 756.97,-136.75\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"760.47,-136.97 756.97,-126.97 753.47,-136.97 760.47,-136.97\"/>\n",
       "<text text-anchor=\"middle\" x=\"797.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 17 -->\n",
       "<g id=\"node14\" class=\"node\">\n",
       "<title>17</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"1350.97\" cy=\"-107.25\" rx=\"160.11\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"1350.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">landtaxvaluedollarcnt&lt;53828</text>\n",
       "</g>\n",
       "<!-- 8&#45;&gt;17 -->\n",
       "<g id=\"edge13\" class=\"edge\">\n",
       "<title>8&#45;&gt;17</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M1446.22,-178.68C1428.3,-165.43 1403.09,-146.79 1383.11,-132.01\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"1385.39,-129.35 1375.27,-126.22 1381.23,-134.98 1385.39,-129.35\"/>\n",
       "<text text-anchor=\"middle\" x=\"1432.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 18 -->\n",
       "<g id=\"node15\" class=\"node\">\n",
       "<title>18</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"1618.97\" cy=\"-107.25\" rx=\"90.14\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"1618.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">yearbuilt&lt;1952</text>\n",
       "</g>\n",
       "<!-- 8&#45;&gt;18 -->\n",
       "<g id=\"edge14\" class=\"edge\">\n",
       "<title>8&#45;&gt;18</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M1497.19,-179.09C1520.79,-165.36 1554.68,-145.65 1580.72,-130.5\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"1582.44,-133.55 1589.32,-125.5 1578.92,-127.5 1582.44,-133.55\"/>\n",
       "<text text-anchor=\"middle\" x=\"1598.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 31 -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>31</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"116.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"116.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00342539488</text>\n",
       "</g>\n",
       "<!-- 15&#45;&gt;31 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>15&#45;&gt;31</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M318.42,-90.45C277.58,-75.96 216.92,-54.45 172.85,-38.82\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"174.04,-35.53 163.45,-35.48 171.7,-42.13 174.04,-35.53\"/>\n",
       "<text text-anchor=\"middle\" x=\"274.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 32 -->\n",
       "<g id=\"node11\" class=\"node\">\n",
       "<title>32</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"362.97\" cy=\"-18\" rx=\"110.66\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"362.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.0118879816</text>\n",
       "</g>\n",
       "<!-- 15&#45;&gt;32 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>15&#45;&gt;32</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M362.97,-89.01C362.97,-77.18 362.97,-61.2 362.97,-47.5\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"366.47,-47.72 362.97,-37.72 359.47,-47.72 366.47,-47.72\"/>\n",
       "<text text-anchor=\"middle\" x=\"403.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 33 -->\n",
       "<g id=\"node12\" class=\"node\">\n",
       "<title>33</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"608.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"608.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00205843849</text>\n",
       "</g>\n",
       "<!-- 16&#45;&gt;33 -->\n",
       "<g id=\"edge11\" class=\"edge\">\n",
       "<title>16&#45;&gt;33</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M728.08,-89.22C704.99,-75.6 672.41,-56.4 647.16,-41.51\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"649.23,-38.67 638.84,-36.61 645.68,-44.7 649.23,-38.67\"/>\n",
       "<text text-anchor=\"middle\" x=\"708.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 34 -->\n",
       "<g id=\"node13\" class=\"node\">\n",
       "<title>34</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"863.97\" cy=\"-18\" rx=\"120.13\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"863.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.00371431792</text>\n",
       "</g>\n",
       "<!-- 16&#45;&gt;34 -->\n",
       "<g id=\"edge12\" class=\"edge\">\n",
       "<title>16&#45;&gt;34</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M778.11,-89.01C794.09,-75.99 816.23,-57.93 834.02,-43.42\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"836.16,-46.19 841.7,-37.16 831.74,-40.77 836.16,-46.19\"/>\n",
       "<text text-anchor=\"middle\" x=\"861.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 35 -->\n",
       "<g id=\"node16\" class=\"node\">\n",
       "<title>35</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"1112.97\" cy=\"-18\" rx=\"110.66\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"1112.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.0214478932</text>\n",
       "</g>\n",
       "<!-- 17&#45;&gt;35 -->\n",
       "<g id=\"edge15\" class=\"edge\">\n",
       "<title>17&#45;&gt;35</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M1305.36,-89.53C1265.96,-75.09 1208.95,-54.19 1167.22,-38.89\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"1168.43,-35.6 1157.84,-35.45 1166.02,-42.18 1168.43,-35.6\"/>\n",
       "<text text-anchor=\"middle\" x=\"1265.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 36 -->\n",
       "<g id=\"node17\" class=\"node\">\n",
       "<title>36</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"1358.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"1358.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00480941497</text>\n",
       "</g>\n",
       "<!-- 17&#45;&gt;36 -->\n",
       "<g id=\"edge16\" class=\"edge\">\n",
       "<title>17&#45;&gt;36</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M1352.55,-89.01C1353.64,-77.18 1355.1,-61.2 1356.36,-47.5\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"1359.83,-47.99 1357.26,-37.71 1352.86,-47.35 1359.83,-47.99\"/>\n",
       "<text text-anchor=\"middle\" x=\"1396.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 37 -->\n",
       "<g id=\"node18\" class=\"node\">\n",
       "<title>37</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"1610.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"1610.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00438403711</text>\n",
       "</g>\n",
       "<!-- 18&#45;&gt;37 -->\n",
       "<g id=\"edge17\" class=\"edge\">\n",
       "<title>18&#45;&gt;37</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M1617.39,-89.01C1616.31,-77.18 1614.84,-61.2 1613.58,-47.5\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"1617.09,-47.35 1612.69,-37.71 1610.12,-47.99 1617.09,-47.35\"/>\n",
       "<text text-anchor=\"middle\" x=\"1627.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 38 -->\n",
       "<g id=\"node19\" class=\"node\">\n",
       "<title>38</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"1859.97\" cy=\"-18\" rx=\"113.82\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"1859.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.0107208695</text>\n",
       "</g>\n",
       "<!-- 18&#45;&gt;38 -->\n",
       "<g id=\"edge18\" class=\"edge\">\n",
       "<title>18&#45;&gt;38</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M1661.23,-90.95C1701.17,-76.49 1761.34,-54.71 1805,-38.9\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"1806.09,-42.23 1814.3,-35.53 1803.71,-35.65 1806.09,-42.23\"/>\n",
       "<text text-anchor=\"middle\" x=\"1802.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 19 -->\n",
       "<g id=\"node22\" class=\"node\">\n",
       "<title>19</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"2378.97\" cy=\"-107.25\" rx=\"185.37\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"2378.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">structuretaxvaluedollarcnt&lt;76371</text>\n",
       "</g>\n",
       "<!-- 9&#45;&gt;19 -->\n",
       "<g id=\"edge21\" class=\"edge\">\n",
       "<title>9&#45;&gt;19</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M2746.6,-181.48C2671.11,-166.45 2551.02,-142.52 2468.78,-126.14\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"2469.66,-122.75 2459.17,-124.22 2468.29,-129.61 2469.66,-122.75\"/>\n",
       "<text text-anchor=\"middle\" x=\"2649.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 20 -->\n",
       "<g id=\"node23\" class=\"node\">\n",
       "<title>20</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"2816.97\" cy=\"-107.25\" rx=\"125.92\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"2816.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">transaction_month&lt;14</text>\n",
       "</g>\n",
       "<!-- 9&#45;&gt;20 -->\n",
       "<g id=\"edge22\" class=\"edge\">\n",
       "<title>9&#45;&gt;20</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M2816.97,-178.26C2816.97,-166.43 2816.97,-150.45 2816.97,-136.75\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"2820.47,-136.97 2816.97,-126.97 2813.47,-136.97 2820.47,-136.97\"/>\n",
       "<text text-anchor=\"middle\" x=\"2857.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 21 -->\n",
       "<g id=\"node28\" class=\"node\">\n",
       "<title>21</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"3200.97\" cy=\"-107.25\" rx=\"126.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"3200.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">longitude&lt;&#45;118214096</text>\n",
       "</g>\n",
       "<!-- 10&#45;&gt;21 -->\n",
       "<g id=\"edge27\" class=\"edge\">\n",
       "<title>10&#45;&gt;21</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M3200.97,-178.26C3200.97,-166.43 3200.97,-150.45 3200.97,-136.75\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"3204.47,-136.97 3200.97,-126.97 3197.47,-136.97 3204.47,-136.97\"/>\n",
       "<text text-anchor=\"middle\" x=\"3212.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 22 -->\n",
       "<g id=\"node29\" class=\"node\">\n",
       "<title>22</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"3668.97\" cy=\"-107.25\" rx=\"90.14\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"3668.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">yearbuilt&lt;1911</text>\n",
       "</g>\n",
       "<!-- 10&#45;&gt;22 -->\n",
       "<g id=\"edge28\" class=\"edge\">\n",
       "<title>10&#45;&gt;22</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M3284.1,-180C3371.83,-163.65 3508.89,-138.09 3593.58,-122.31\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"3593.98,-125.79 3603.17,-120.52 3592.7,-118.91 3593.98,-125.79\"/>\n",
       "<text text-anchor=\"middle\" x=\"3517.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 39 -->\n",
       "<g id=\"node24\" class=\"node\">\n",
       "<title>39</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"2114.97\" cy=\"-18\" rx=\"123.29\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"2114.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.000738864008</text>\n",
       "</g>\n",
       "<!-- 19&#45;&gt;39 -->\n",
       "<g id=\"edge23\" class=\"edge\">\n",
       "<title>19&#45;&gt;39</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M2328.38,-89.53C2284.3,-74.96 2220.36,-53.83 2173.96,-38.5\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"2175.19,-35.22 2164.6,-35.4 2173,-41.86 2175.19,-35.22\"/>\n",
       "<text text-anchor=\"middle\" x=\"2282.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 40 -->\n",
       "<g id=\"node25\" class=\"node\">\n",
       "<title>40</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"2378.97\" cy=\"-18\" rx=\"122.76\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"2378.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;2.04335811e&#45;05</text>\n",
       "</g>\n",
       "<!-- 19&#45;&gt;40 -->\n",
       "<g id=\"edge24\" class=\"edge\">\n",
       "<title>19&#45;&gt;40</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M2378.97,-89.01C2378.97,-77.18 2378.97,-61.2 2378.97,-47.5\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"2382.47,-47.72 2378.97,-37.72 2375.47,-47.72 2382.47,-47.72\"/>\n",
       "<text text-anchor=\"middle\" x=\"2419.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 41 -->\n",
       "<g id=\"node26\" class=\"node\">\n",
       "<title>41</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"2636.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"2636.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00470567821</text>\n",
       "</g>\n",
       "<!-- 20&#45;&gt;41 -->\n",
       "<g id=\"edge25\" class=\"edge\">\n",
       "<title>20&#45;&gt;41</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M2782.69,-89.63C2753.92,-75.69 2712.61,-55.66 2681.32,-40.5\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"2683.01,-37.43 2672.49,-36.21 2679.96,-43.73 2683.01,-37.43\"/>\n",
       "<text text-anchor=\"middle\" x=\"2755.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 42 -->\n",
       "<g id=\"node27\" class=\"node\">\n",
       "<title>42</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"2894.97\" cy=\"-18\" rx=\"123.29\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"2894.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.000945035194</text>\n",
       "</g>\n",
       "<!-- 20&#45;&gt;42 -->\n",
       "<g id=\"edge26\" class=\"edge\">\n",
       "<title>20&#45;&gt;42</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M2832.38,-89.01C2843.71,-76.35 2859.28,-58.92 2872.06,-44.63\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"2874.53,-47.12 2878.58,-37.33 2869.31,-42.45 2874.53,-47.12\"/>\n",
       "<text text-anchor=\"middle\" x=\"2903.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 43 -->\n",
       "<g id=\"node30\" class=\"node\">\n",
       "<title>43</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"3152.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"3152.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00659735128</text>\n",
       "</g>\n",
       "<!-- 21&#45;&gt;43 -->\n",
       "<g id=\"edge29\" class=\"edge\">\n",
       "<title>21&#45;&gt;43</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M3191.49,-89.01C3184.78,-76.82 3175.66,-60.23 3167.97,-46.26\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"3171.05,-44.6 3163.16,-37.53 3164.92,-47.98 3171.05,-44.6\"/>\n",
       "<text text-anchor=\"middle\" x=\"3193.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 44 -->\n",
       "<g id=\"node31\" class=\"node\">\n",
       "<title>44</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"3410.97\" cy=\"-18\" rx=\"123.29\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"3410.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.000411872374</text>\n",
       "</g>\n",
       "<!-- 21&#45;&gt;44 -->\n",
       "<g id=\"edge30\" class=\"edge\">\n",
       "<title>21&#45;&gt;44</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M3240.47,-89.84C3274.53,-75.69 3323.91,-55.17 3360.77,-39.86\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"3362,-43.14 3369.9,-36.07 3359.32,-36.67 3362,-43.14\"/>\n",
       "<text text-anchor=\"middle\" x=\"3365.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 45 -->\n",
       "<g id=\"node32\" class=\"node\">\n",
       "<title>45</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"3668.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"3668.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00953412335</text>\n",
       "</g>\n",
       "<!-- 22&#45;&gt;45 -->\n",
       "<g id=\"edge31\" class=\"edge\">\n",
       "<title>22&#45;&gt;45</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M3668.97,-89.01C3668.97,-77.18 3668.97,-61.2 3668.97,-47.5\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"3672.47,-47.72 3668.97,-37.72 3665.47,-47.72 3672.47,-47.72\"/>\n",
       "<text text-anchor=\"middle\" x=\"3680.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 46 -->\n",
       "<g id=\"node33\" class=\"node\">\n",
       "<title>46</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"3920.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"3920.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00148359733</text>\n",
       "</g>\n",
       "<!-- 22&#45;&gt;46 -->\n",
       "<g id=\"edge32\" class=\"edge\">\n",
       "<title>22&#45;&gt;46</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M3712.58,-91.15C3754.57,-76.61 3818.31,-54.54 3864.24,-38.64\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"3865.18,-42.02 3873.49,-35.44 3862.89,-35.41 3865.18,-42.02\"/>\n",
       "<text text-anchor=\"middle\" x=\"3858.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 11 -->\n",
       "<g id=\"node36\" class=\"node\">\n",
       "<title>11</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"4787.97\" cy=\"-196.5\" rx=\"107.5\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"4787.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">regionidzip&lt;95994</text>\n",
       "</g>\n",
       "<!-- 5&#45;&gt;11 -->\n",
       "<g id=\"edge35\" class=\"edge\">\n",
       "<title>5&#45;&gt;11</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M5041.93,-268.75C4988.34,-253.71 4908.24,-231.24 4852.37,-215.57\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"4853.57,-212.27 4842.99,-212.94 4851.67,-219.01 4853.57,-212.27\"/>\n",
       "<text text-anchor=\"middle\" x=\"4983.97\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 12 -->\n",
       "<g id=\"node37\" class=\"node\">\n",
       "<title>12</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"5445.97\" cy=\"-196.5\" rx=\"85.93\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"5445.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">bedroomcnt&lt;3</text>\n",
       "</g>\n",
       "<!-- 5&#45;&gt;12 -->\n",
       "<g id=\"edge36\" class=\"edge\">\n",
       "<title>5&#45;&gt;12</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M5161.41,-269.05C5223.53,-253.43 5318.43,-229.57 5381.32,-213.76\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"5381.98,-217.2 5390.82,-211.37 5380.27,-210.41 5381.98,-217.2\"/>\n",
       "<text text-anchor=\"middle\" x=\"5344.85\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 13 -->\n",
       "<g id=\"node50\" class=\"node\">\n",
       "<title>13</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"6551.97\" cy=\"-196.5\" rx=\"85.93\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"6551.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">bedroomcnt&lt;8</text>\n",
       "</g>\n",
       "<!-- 6&#45;&gt;13 -->\n",
       "<g id=\"edge49\" class=\"edge\">\n",
       "<title>6&#45;&gt;13</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M6551.97,-267.51C6551.97,-255.68 6551.97,-239.7 6551.97,-226\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"6555.47,-226.22 6551.97,-216.22 6548.47,-226.22 6555.47,-226.22\"/>\n",
       "<text text-anchor=\"middle\" x=\"6563.97\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 14 -->\n",
       "<g id=\"node51\" class=\"node\">\n",
       "<title>14</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"7361.97\" cy=\"-196.5\" rx=\"189.05\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"7361.97\" y=\"-191.82\" font-family=\"Times,serif\" font-size=\"14.00\">calculatedfinishedsquarefeet&lt;5422</text>\n",
       "</g>\n",
       "<!-- 6&#45;&gt;14 -->\n",
       "<g id=\"edge50\" class=\"edge\">\n",
       "<title>6&#45;&gt;14</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M6609.9,-278.51C6738.22,-264.69 7049.23,-231.19 7228.54,-211.87\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"7228.82,-215.36 7238.39,-210.81 7228.07,-208.4 7228.82,-215.36\"/>\n",
       "<text text-anchor=\"middle\" x=\"7070.85\" y=\"-236.45\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 23 -->\n",
       "<g id=\"node38\" class=\"node\">\n",
       "<title>23</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"4421.97\" cy=\"-107.25\" rx=\"90.14\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"4421.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">yearbuilt&lt;1907</text>\n",
       "</g>\n",
       "<!-- 11&#45;&gt;23 -->\n",
       "<g id=\"edge37\" class=\"edge\">\n",
       "<title>11&#45;&gt;23</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M4727.94,-181.19C4662.44,-165.57 4557.8,-140.63 4489.48,-124.34\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"4490.43,-120.97 4479.89,-122.06 4488.81,-127.78 4490.43,-120.97\"/>\n",
       "<text text-anchor=\"middle\" x=\"4649.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 24 -->\n",
       "<g id=\"node39\" class=\"node\">\n",
       "<title>24</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"4787.97\" cy=\"-107.25\" rx=\"125.92\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"4787.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">transaction_month&lt;12</text>\n",
       "</g>\n",
       "<!-- 11&#45;&gt;24 -->\n",
       "<g id=\"edge38\" class=\"edge\">\n",
       "<title>11&#45;&gt;24</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M4787.97,-178.26C4787.97,-166.43 4787.97,-150.45 4787.97,-136.75\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"4791.47,-136.97 4787.97,-126.97 4784.47,-136.97 4791.47,-136.97\"/>\n",
       "<text text-anchor=\"middle\" x=\"4828.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 25 -->\n",
       "<g id=\"node44\" class=\"node\">\n",
       "<title>25</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"5445.97\" cy=\"-107.25\" rx=\"185.37\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"5445.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">structuretaxvaluedollarcnt&lt;31186</text>\n",
       "</g>\n",
       "<!-- 12&#45;&gt;25 -->\n",
       "<g id=\"edge43\" class=\"edge\">\n",
       "<title>12&#45;&gt;25</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M5445.97,-178.26C5445.97,-166.43 5445.97,-150.45 5445.97,-136.75\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"5449.47,-136.97 5445.97,-126.97 5442.47,-136.97 5449.47,-136.97\"/>\n",
       "<text text-anchor=\"middle\" x=\"5457.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 26 -->\n",
       "<g id=\"node45\" class=\"node\">\n",
       "<title>26</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"5723.97\" cy=\"-107.25\" rx=\"62.78\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"5723.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">poolcnt&lt;1</text>\n",
       "</g>\n",
       "<!-- 12&#45;&gt;26 -->\n",
       "<g id=\"edge44\" class=\"edge\">\n",
       "<title>12&#45;&gt;26</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M5492.19,-180.99C5541.67,-165.46 5620.02,-140.87 5671.71,-124.65\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"5672.7,-128.01 5681.19,-121.68 5670.61,-121.33 5672.7,-128.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"5650.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 47 -->\n",
       "<g id=\"node40\" class=\"node\">\n",
       "<title>47</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"4169.97\" cy=\"-18\" rx=\"113.82\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"4169.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.0264357384</text>\n",
       "</g>\n",
       "<!-- 23&#45;&gt;47 -->\n",
       "<g id=\"edge39\" class=\"edge\">\n",
       "<title>23&#45;&gt;47</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M4378.36,-91.15C4336.24,-76.57 4272.24,-54.41 4226.28,-38.5\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"4227.62,-35.26 4217.03,-35.29 4225.33,-41.87 4227.62,-35.26\"/>\n",
       "<text text-anchor=\"middle\" x=\"4330.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 48 -->\n",
       "<g id=\"node41\" class=\"node\">\n",
       "<title>48</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"4421.97\" cy=\"-18\" rx=\"120.13\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"4421.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.00903992355</text>\n",
       "</g>\n",
       "<!-- 23&#45;&gt;48 -->\n",
       "<g id=\"edge40\" class=\"edge\">\n",
       "<title>23&#45;&gt;48</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M4421.97,-89.01C4421.97,-77.18 4421.97,-61.2 4421.97,-47.5\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"4425.47,-47.72 4421.97,-37.72 4418.47,-47.72 4425.47,-47.72\"/>\n",
       "<text text-anchor=\"middle\" x=\"4462.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 49 -->\n",
       "<g id=\"node42\" class=\"node\">\n",
       "<title>49</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"4679.97\" cy=\"-18\" rx=\"120.13\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"4679.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.00317253661</text>\n",
       "</g>\n",
       "<!-- 24&#45;&gt;49 -->\n",
       "<g id=\"edge41\" class=\"edge\">\n",
       "<title>24&#45;&gt;49</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M4766.89,-89.22C4750.54,-76.01 4727.67,-57.53 4709.49,-42.85\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"4712.15,-40.5 4702.18,-36.94 4707.76,-45.94 4712.15,-40.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"4755.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 50 -->\n",
       "<g id=\"node43\" class=\"node\">\n",
       "<title>50</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"4940.97\" cy=\"-18\" rx=\"123.29\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"4940.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.000266542425</text>\n",
       "</g>\n",
       "<!-- 24&#45;&gt;50 -->\n",
       "<g id=\"edge42\" class=\"edge\">\n",
       "<title>24&#45;&gt;50</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M4817.47,-89.43C4841.31,-75.83 4875.1,-56.57 4901.31,-41.62\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"4903.03,-44.66 4909.99,-36.67 4899.57,-38.58 4903.03,-44.66\"/>\n",
       "<text text-anchor=\"middle\" x=\"4919.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 51 -->\n",
       "<g id=\"node46\" class=\"node\">\n",
       "<title>51</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"5198.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"5198.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00313752447</text>\n",
       "</g>\n",
       "<!-- 25&#45;&gt;51 -->\n",
       "<g id=\"edge45\" class=\"edge\">\n",
       "<title>25&#45;&gt;51</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M5398.35,-89.43C5357.38,-74.96 5298.23,-54.06 5254.99,-38.79\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"5256.39,-35.57 5245.79,-35.54 5254.06,-42.17 5256.39,-35.57\"/>\n",
       "<text text-anchor=\"middle\" x=\"5356.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 52 -->\n",
       "<g id=\"node47\" class=\"node\">\n",
       "<title>52</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"5459.97\" cy=\"-18\" rx=\"126.44\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"5459.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.000722057594</text>\n",
       "</g>\n",
       "<!-- 25&#45;&gt;52 -->\n",
       "<g id=\"edge46\" class=\"edge\">\n",
       "<title>25&#45;&gt;52</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M5448.74,-89.01C5450.64,-77.18 5453.2,-61.2 5455.4,-47.5\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"5458.84,-48.12 5456.97,-37.7 5451.93,-47.02 5458.84,-48.12\"/>\n",
       "<text text-anchor=\"middle\" x=\"5495.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 53 -->\n",
       "<g id=\"node48\" class=\"node\">\n",
       "<title>53</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"5723.97\" cy=\"-18\" rx=\"119.6\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"5723.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=2.97951974e&#45;05</text>\n",
       "</g>\n",
       "<!-- 26&#45;&gt;53 -->\n",
       "<g id=\"edge47\" class=\"edge\">\n",
       "<title>26&#45;&gt;53</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M5723.97,-89.01C5723.97,-77.18 5723.97,-61.2 5723.97,-47.5\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"5727.47,-47.72 5723.97,-37.72 5720.47,-47.72 5727.47,-47.72\"/>\n",
       "<text text-anchor=\"middle\" x=\"5735.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 54 -->\n",
       "<g id=\"node49\" class=\"node\">\n",
       "<title>54</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"5981.97\" cy=\"-18\" rx=\"120.13\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"5981.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.00092030922</text>\n",
       "</g>\n",
       "<!-- 26&#45;&gt;54 -->\n",
       "<g id=\"edge48\" class=\"edge\">\n",
       "<title>26&#45;&gt;54</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M5763.44,-92.9C5806.22,-78.44 5874.93,-55.2 5923.88,-38.65\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"5924.84,-42.02 5933.19,-35.5 5922.6,-35.39 5924.84,-42.02\"/>\n",
       "<text text-anchor=\"middle\" x=\"5917.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 27 -->\n",
       "<g id=\"node52\" class=\"node\">\n",
       "<title>27</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"6466.97\" cy=\"-107.25\" rx=\"150.64\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"6466.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">finishedsquarefeet12&lt;4131</text>\n",
       "</g>\n",
       "<!-- 13&#45;&gt;27 -->\n",
       "<g id=\"edge51\" class=\"edge\">\n",
       "<title>13&#45;&gt;27</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M6535.58,-178.68C6523.16,-165.93 6505.88,-148.19 6491.77,-133.71\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"6494.43,-131.42 6484.95,-126.7 6489.42,-136.31 6494.43,-131.42\"/>\n",
       "<text text-anchor=\"middle\" x=\"6529.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 28 -->\n",
       "<g id=\"node53\" class=\"node\">\n",
       "<title>28</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"6761.97\" cy=\"-107.25\" rx=\"125.92\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"6761.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">transaction_month&lt;17</text>\n",
       "</g>\n",
       "<!-- 13&#45;&gt;28 -->\n",
       "<g id=\"edge52\" class=\"edge\">\n",
       "<title>13&#45;&gt;28</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M6589.52,-179.9C6623.7,-165.7 6674.43,-144.62 6712.02,-129\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"6712.96,-132.4 6720.86,-125.33 6710.28,-125.94 6712.96,-132.4\"/>\n",
       "<text text-anchor=\"middle\" x=\"6716.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 29 -->\n",
       "<g id=\"node58\" class=\"node\">\n",
       "<title>29</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"7361.97\" cy=\"-107.25\" rx=\"126.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"7361.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">longitude&lt;&#45;118095000</text>\n",
       "</g>\n",
       "<!-- 14&#45;&gt;29 -->\n",
       "<g id=\"edge57\" class=\"edge\">\n",
       "<title>14&#45;&gt;29</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M7361.97,-178.26C7361.97,-166.43 7361.97,-150.45 7361.97,-136.75\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"7365.47,-136.97 7361.97,-126.97 7358.47,-136.97 7365.47,-136.97\"/>\n",
       "<text text-anchor=\"middle\" x=\"7373.97\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 30 -->\n",
       "<g id=\"node59\" class=\"node\">\n",
       "<title>30</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"7770.97\" cy=\"-107.25\" rx=\"107.5\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"7770.97\" y=\"-102.58\" font-family=\"Times,serif\" font-size=\"14.00\">regionidzip&lt;96121</text>\n",
       "</g>\n",
       "<!-- 14&#45;&gt;30 -->\n",
       "<g id=\"edge58\" class=\"edge\">\n",
       "<title>14&#45;&gt;30</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M7436.51,-179.6C7509.93,-163.94 7621.51,-140.13 7695.31,-124.39\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"7695.84,-127.86 7704.89,-122.35 7694.38,-121.01 7695.84,-127.86\"/>\n",
       "<text text-anchor=\"middle\" x=\"7644.85\" y=\"-147.2\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 55 -->\n",
       "<g id=\"node54\" class=\"node\">\n",
       "<title>55</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"6236.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"6236.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00117546681</text>\n",
       "</g>\n",
       "<!-- 27&#45;&gt;55 -->\n",
       "<g id=\"edge53\" class=\"edge\">\n",
       "<title>27&#45;&gt;55</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M6423.17,-89.63C6385.32,-75.28 6330.51,-54.49 6290.16,-39.18\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"6291.45,-35.92 6280.86,-35.65 6288.97,-42.47 6291.45,-35.92\"/>\n",
       "<text text-anchor=\"middle\" x=\"6384.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 56 -->\n",
       "<g id=\"node55\" class=\"node\">\n",
       "<title>56</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"6488.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"6488.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00339389592</text>\n",
       "</g>\n",
       "<!-- 27&#45;&gt;56 -->\n",
       "<g id=\"edge54\" class=\"edge\">\n",
       "<title>27&#45;&gt;56</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M6471.32,-89.01C6474.33,-77.06 6478.41,-60.88 6481.89,-47.08\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"6485.21,-48.22 6484.26,-37.67 6478.43,-46.51 6485.21,-48.22\"/>\n",
       "<text text-anchor=\"middle\" x=\"6520.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 57 -->\n",
       "<g id=\"node56\" class=\"node\">\n",
       "<title>57</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"6740.97\" cy=\"-18\" rx=\"116.97\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"6740.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.00888357218</text>\n",
       "</g>\n",
       "<!-- 28&#45;&gt;57 -->\n",
       "<g id=\"edge55\" class=\"edge\">\n",
       "<title>28&#45;&gt;57</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M6757.82,-89.01C6754.95,-77.06 6751.05,-60.88 6747.73,-47.08\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"6751.21,-46.58 6745.47,-37.67 6744.4,-48.21 6751.21,-46.58\"/>\n",
       "<text text-anchor=\"middle\" x=\"6765.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 58 -->\n",
       "<g id=\"node57\" class=\"node\">\n",
       "<title>58</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"6986.97\" cy=\"-18\" rx=\"110.66\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"6986.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.0309886988</text>\n",
       "</g>\n",
       "<!-- 28&#45;&gt;58 -->\n",
       "<g id=\"edge56\" class=\"edge\">\n",
       "<title>28&#45;&gt;58</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M6804.29,-89.84C6841.37,-75.46 6895.39,-54.51 6935.07,-39.13\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"6936.13,-42.47 6944.19,-35.59 6933.6,-35.94 6936.13,-42.47\"/>\n",
       "<text text-anchor=\"middle\" x=\"6935.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 59 -->\n",
       "<g id=\"node60\" class=\"node\">\n",
       "<title>59</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"7241.97\" cy=\"-18\" rx=\"126.44\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"7241.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.000433036446</text>\n",
       "</g>\n",
       "<!-- 29&#45;&gt;59 -->\n",
       "<g id=\"edge59\" class=\"edge\">\n",
       "<title>29&#45;&gt;59</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M7338.55,-89.22C7320.3,-75.95 7294.74,-57.37 7274.5,-42.65\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"7276.71,-39.93 7266.56,-36.88 7272.59,-45.59 7276.71,-39.93\"/>\n",
       "<text text-anchor=\"middle\" x=\"7324.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 60 -->\n",
       "<g id=\"node61\" class=\"node\">\n",
       "<title>60</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"7509.97\" cy=\"-18\" rx=\"123.29\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"7509.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.000600957719</text>\n",
       "</g>\n",
       "<!-- 29&#45;&gt;60 -->\n",
       "<g id=\"edge60\" class=\"edge\">\n",
       "<title>29&#45;&gt;60</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M7390.51,-89.43C7413.57,-75.83 7446.25,-56.57 7471.6,-41.62\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"7473.13,-44.78 7479.97,-36.69 7469.58,-38.75 7473.13,-44.78\"/>\n",
       "<text text-anchor=\"middle\" x=\"7490.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "<!-- 61 -->\n",
       "<g id=\"node62\" class=\"node\">\n",
       "<title>61</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"7770.97\" cy=\"-18\" rx=\"120.13\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"7770.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=&#45;0.00122295157</text>\n",
       "</g>\n",
       "<!-- 30&#45;&gt;61 -->\n",
       "<g id=\"edge61\" class=\"edge\">\n",
       "<title>30&#45;&gt;61</title>\n",
       "<path fill=\"none\" stroke=\"#ff0000\" d=\"M7770.97,-89.01C7770.97,-77.18 7770.97,-61.2 7770.97,-47.5\"/>\n",
       "<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"7774.47,-47.72 7770.97,-37.72 7767.47,-47.72 7774.47,-47.72\"/>\n",
       "<text text-anchor=\"middle\" x=\"7782.97\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">yes</text>\n",
       "</g>\n",
       "<!-- 62 -->\n",
       "<g id=\"node63\" class=\"node\">\n",
       "<title>62</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"8019.97\" cy=\"-18\" rx=\"110.66\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"8019.97\" y=\"-13.32\" font-family=\"Times,serif\" font-size=\"14.00\">leaf=0.0039171013</text>\n",
       "</g>\n",
       "<!-- 30&#45;&gt;62 -->\n",
       "<g id=\"edge62\" class=\"edge\">\n",
       "<title>30&#45;&gt;62</title>\n",
       "<path fill=\"none\" stroke=\"#0000ff\" d=\"M7816.06,-90.45C7857.62,-75.89 7919.45,-54.22 7964.12,-38.57\"/>\n",
       "<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"7965.09,-41.94 7973.37,-35.33 7962.77,-35.33 7965.09,-41.94\"/>\n",
       "<text text-anchor=\"middle\" x=\"7958.85\" y=\"-57.95\" font-family=\"Times,serif\" font-size=\"14.00\">no, missing</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.sources.Source at 0x7b0983ca99f0>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb.to_graphviz(model, num_trees=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "25f0c841",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:11:50.072640Z",
     "iopub.status.busy": "2024-04-15T14:11:50.072186Z",
     "iopub.status.idle": "2024-04-15T14:11:50.077074Z",
     "shell.execute_reply": "2024-04-15T14:11:50.075873Z"
    },
    "papermill": {
     "duration": 0.069369,
     "end_time": "2024-04-15T14:11:50.079407",
     "exception": false,
     "start_time": "2024-04-15T14:11:50.010038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "a40276e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:11:50.203694Z",
     "iopub.status.busy": "2024-04-15T14:11:50.202430Z",
     "iopub.status.idle": "2024-04-15T14:11:50.538814Z",
     "shell.execute_reply": "2024-04-15T14:11:50.537390Z"
    },
    "papermill": {
     "duration": 0.401991,
     "end_time": "2024-04-15T14:11:50.541591",
     "exception": false,
     "start_time": "2024-04-15T14:11:50.139600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import HistGradientBoostingRegressor\n",
    "gbg =  HistGradientBoostingRegressor(loss='absolute_error')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "93ba0a8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:11:50.673449Z",
     "iopub.status.busy": "2024-04-15T14:11:50.673013Z",
     "iopub.status.idle": "2024-04-15T14:17:24.557937Z",
     "shell.execute_reply": "2024-04-15T14:17:24.554873Z"
    },
    "papermill": {
     "duration": 334.0201,
     "end_time": "2024-04-15T14:17:24.623924",
     "exception": false,
     "start_time": "2024-04-15T14:11:50.603824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'learning_rate': 0.1, 'max_depth': 13, 'max_leaf_nodes': 50}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Create the parameter grid\n",
    "param_grid = {\n",
    "    'max_leaf_nodes': [30,40,50],\n",
    "    'learning_rate': [0.1, 0.01],\n",
    "    'max_depth': [9,11,13],\n",
    "  \n",
    "}\n",
    "\n",
    "# Create the GridSearchCV object\n",
    "grid_search = GridSearchCV(gbg, param_grid, cv=5)\n",
    "\n",
    "# Fit the GridSearchCV object to the data\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Print the best parameters\n",
    "print(\"Best parameters:\", grid_search.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "dd54bc47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:17:24.748861Z",
     "iopub.status.busy": "2024-04-15T14:17:24.748382Z",
     "iopub.status.idle": "2024-04-15T14:17:28.800415Z",
     "shell.execute_reply": "2024-04-15T14:17:28.799355Z"
    },
    "papermill": {
     "duration": 4.118933,
     "end_time": "2024-04-15T14:17:28.803517",
     "exception": false,
     "start_time": "2024-04-15T14:17:24.684584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.025725272879637773\n"
     ]
    }
   ],
   "source": [
    "gbg =  HistGradientBoostingRegressor(loss='absolute_error',learning_rate = 0.1, \n",
    "                                     max_depth= 9, max_leaf_nodes=30 )\n",
    "gbg.fit(X_train, y_train)\n",
    "print(gbg.score(X_train, y_train))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "fdf2381a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:17:28.929966Z",
     "iopub.status.busy": "2024-04-15T14:17:28.929529Z",
     "iopub.status.idle": "2024-04-15T14:17:40.832714Z",
     "shell.execute_reply": "2024-04-15T14:17:40.831696Z"
    },
    "papermill": {
     "duration": 11.968232,
     "end_time": "2024-04-15T14:17:40.835420",
     "exception": false,
     "start_time": "2024-04-15T14:17:28.867188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "gbg_y_pred = 0\n",
    "gbg_y_pred = gbg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "1a0ee1eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:17:40.958625Z",
     "iopub.status.busy": "2024-04-15T14:17:40.957637Z",
     "iopub.status.idle": "2024-04-15T14:17:40.965612Z",
     "shell.execute_reply": "2024-04-15T14:17:40.964354Z"
    },
    "papermill": {
     "duration": 0.071346,
     "end_time": "2024-04-15T14:17:40.968135",
     "exception": false,
     "start_time": "2024-04-15T14:17:40.896789",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.00607504, -0.01652138,  0.00895867, ...,  0.00603957,\n",
       "        0.00603957,  0.00603957])"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gbg_y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2fe358c2",
   "metadata": {
    "papermill": {
     "duration": 0.061011,
     "end_time": "2024-04-15T14:17:41.088885",
     "exception": false,
     "start_time": "2024-04-15T14:17:41.027874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "500ef164",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:17:41.211810Z",
     "iopub.status.busy": "2024-04-15T14:17:41.211343Z",
     "iopub.status.idle": "2024-04-15T14:17:41.216866Z",
     "shell.execute_reply": "2024-04-15T14:17:41.215481Z"
    },
    "papermill": {
     "duration": 0.070373,
     "end_time": "2024-04-15T14:17:41.219379",
     "exception": false,
     "start_time": "2024-04-15T14:17:41.149006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#gbg.plot_importance(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "f2a417f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:17:41.347265Z",
     "iopub.status.busy": "2024-04-15T14:17:41.345410Z",
     "iopub.status.idle": "2024-04-15T14:17:41.352393Z",
     "shell.execute_reply": "2024-04-15T14:17:41.350940Z"
    },
    "papermill": {
     "duration": 0.076303,
     "end_time": "2024-04-15T14:17:41.356510",
     "exception": false,
     "start_time": "2024-04-15T14:17:41.280207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#gbg.plot_tree(model, num_trees=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "cf674713",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:17:41.487696Z",
     "iopub.status.busy": "2024-04-15T14:17:41.487299Z",
     "iopub.status.idle": "2024-04-15T14:17:41.492486Z",
     "shell.execute_reply": "2024-04-15T14:17:41.491293Z"
    },
    "papermill": {
     "duration": 0.071053,
     "end_time": "2024-04-15T14:17:41.494808",
     "exception": false,
     "start_time": "2024-04-15T14:17:41.423755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#gbg.to_graphviz(model, num_trees=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf350997",
   "metadata": {
    "papermill": {
     "duration": 0.065489,
     "end_time": "2024-04-15T14:17:41.620146",
     "exception": false,
     "start_time": "2024-04-15T14:17:41.554657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "0f353e5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:17:41.754800Z",
     "iopub.status.busy": "2024-04-15T14:17:41.753515Z",
     "iopub.status.idle": "2024-04-15T14:17:42.939799Z",
     "shell.execute_reply": "2024-04-15T14:17:42.938664Z"
    },
    "papermill": {
     "duration": 1.258834,
     "end_time": "2024-04-15T14:17:42.942608",
     "exception": false,
     "start_time": "2024-04-15T14:17:41.683774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import lightgbm as lgb\n",
    "#gbm = lgb.LGBMRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "9ef98495",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:17:43.065995Z",
     "iopub.status.busy": "2024-04-15T14:17:43.065602Z",
     "iopub.status.idle": "2024-04-15T14:17:46.267793Z",
     "shell.execute_reply": "2024-04-15T14:17:46.266719Z"
    },
    "papermill": {
     "duration": 3.266105,
     "end_time": "2024-04-15T14:17:46.270574",
     "exception": false,
     "start_time": "2024-04-15T14:17:43.004469",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.051728 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 3828\n",
      "[LightGBM] [Info] Number of data points in the train set: 151068, number of used features: 36\n",
      "[LightGBM] [Info] Start training from score 0.012393\n"
     ]
    }
   ],
   "source": [
    "params = {\n",
    "    'objective': 'regression',\n",
    "    'metric': 'rmse',\n",
    "    'boosting_type': 'gbdt',\n",
    "    'num_leaves': 31,\n",
    "    'learning_rate': 0.05,\n",
    "    'feature_fraction': 0.9,\n",
    "}\n",
    "# Create a LightGBM dataset for training with features X_train and labels Y_train\n",
    "train_data = lgb.Dataset(X_train, label=y_train)\n",
    " \n",
    "# Create a LightGBM dataset for testing with features X_val and labels Y_val,\n",
    "# and specify the reference dataset as train_data for consistent evaluation\n",
    "test_data = lgb.Dataset(X_val, label=y_val, reference=train_data)\n",
    "# Set the number of rounds and train the model with early stopping\n",
    "num_round = 100\n",
    "bst = lgb.train(params, train_data, num_round, valid_sets=[\n",
    "                test_data])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "c19f1788",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:17:46.395304Z",
     "iopub.status.busy": "2024-04-15T14:17:46.394843Z",
     "iopub.status.idle": "2024-04-15T14:17:53.365717Z",
     "shell.execute_reply": "2024-04-15T14:17:53.364713Z"
    },
    "papermill": {
     "duration": 7.036631,
     "end_time": "2024-04-15T14:17:53.368373",
     "exception": false,
     "start_time": "2024-04-15T14:17:46.331742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "gbm_y_pred = 0\n",
    "gbm_y_pred = bst.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f5d43a8",
   "metadata": {
    "papermill": {
     "duration": 0.060499,
     "end_time": "2024-04-15T14:17:53.489404",
     "exception": false,
     "start_time": "2024-04-15T14:17:53.428905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8ab4b533",
   "metadata": {
    "papermill": {
     "duration": 0.059616,
     "end_time": "2024-04-15T14:17:53.609211",
     "exception": false,
     "start_time": "2024-04-15T14:17:53.549595",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## STEP 5 : Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "5fedcd6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:17:53.732293Z",
     "iopub.status.busy": "2024-04-15T14:17:53.731603Z",
     "iopub.status.idle": "2024-04-15T14:18:59.940493Z",
     "shell.execute_reply": "2024-04-15T14:18:59.939509Z"
    },
    "papermill": {
     "duration": 66.274512,
     "end_time": "2024-04-15T14:18:59.943287",
     "exception": false,
     "start_time": "2024-04-15T14:17:53.668775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicting for: 201610 ... \n",
      "Predicting for: 201611 ... \n",
      "Predicting for: 201612 ... \n",
      "Predicting for: 201710 ... \n",
      "Predicting for: 201711 ... \n",
      "Predicting for: 201712 ... \n"
     ]
    }
   ],
   "source": [
    "submission = pd.DataFrame({\n",
    "    'ParcelId': test_df['ParcelId'],\n",
    "})\n",
    "test_dates = {\n",
    "    '201610': pd.Timestamp('2016-09-30'),\n",
    "    '201611': pd.Timestamp('2016-10-31'),\n",
    "    '201612': pd.Timestamp('2016-11-30'),\n",
    "    '201710': pd.Timestamp('2017-09-30'),\n",
    "    '201711': pd.Timestamp('2017-10-31'),\n",
    "    '201712': pd.Timestamp('2017-11-30')\n",
    "}\n",
    "l = [0.0,0.01,0.02,0.10,0.11,0.12]\n",
    "i=0\n",
    "for label, test_date in test_dates.items():\n",
    "    print(\"Predicting for: %s ... \" % (label))\n",
    "    #submission[label] = (xgb_y_pred + gbg_y_pred + gbm_y_pred)/3 * (1+l[i])\n",
    "   # i = i+1\n",
    "    submission[label]=gbg_y_pred\n",
    "    \n",
    "submission.to_csv('submission.csv', float_format='%.6f',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "8064044e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:19:00.066188Z",
     "iopub.status.busy": "2024-04-15T14:19:00.065469Z",
     "iopub.status.idle": "2024-04-15T14:19:00.081402Z",
     "shell.execute_reply": "2024-04-15T14:19:00.080173Z"
    },
    "papermill": {
     "duration": 0.079809,
     "end_time": "2024-04-15T14:19:00.083891",
     "exception": false,
     "start_time": "2024-04-15T14:19:00.004082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ParcelId</th>\n",
       "      <th>201610</th>\n",
       "      <th>201611</th>\n",
       "      <th>201612</th>\n",
       "      <th>201710</th>\n",
       "      <th>201711</th>\n",
       "      <th>201712</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10754147</td>\n",
       "      <td>0.006075</td>\n",
       "      <td>0.006075</td>\n",
       "      <td>0.006075</td>\n",
       "      <td>0.006075</td>\n",
       "      <td>0.006075</td>\n",
       "      <td>0.006075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10759547</td>\n",
       "      <td>-0.016521</td>\n",
       "      <td>-0.016521</td>\n",
       "      <td>-0.016521</td>\n",
       "      <td>-0.016521</td>\n",
       "      <td>-0.016521</td>\n",
       "      <td>-0.016521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10843547</td>\n",
       "      <td>0.008959</td>\n",
       "      <td>0.008959</td>\n",
       "      <td>0.008959</td>\n",
       "      <td>0.008959</td>\n",
       "      <td>0.008959</td>\n",
       "      <td>0.008959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10859147</td>\n",
       "      <td>0.020440</td>\n",
       "      <td>0.020440</td>\n",
       "      <td>0.020440</td>\n",
       "      <td>0.020440</td>\n",
       "      <td>0.020440</td>\n",
       "      <td>0.020440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10879947</td>\n",
       "      <td>0.002535</td>\n",
       "      <td>0.002535</td>\n",
       "      <td>0.002535</td>\n",
       "      <td>0.002535</td>\n",
       "      <td>0.002535</td>\n",
       "      <td>0.002535</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ParcelId    201610    201611    201612    201710    201711    201712\n",
       "0  10754147  0.006075  0.006075  0.006075  0.006075  0.006075  0.006075\n",
       "1  10759547 -0.016521 -0.016521 -0.016521 -0.016521 -0.016521 -0.016521\n",
       "2  10843547  0.008959  0.008959  0.008959  0.008959  0.008959  0.008959\n",
       "3  10859147  0.020440  0.020440  0.020440  0.020440  0.020440  0.020440\n",
       "4  10879947  0.002535  0.002535  0.002535  0.002535  0.002535  0.002535"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#test_dates.items()\n",
    "submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "36b2575a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:19:00.207361Z",
     "iopub.status.busy": "2024-04-15T14:19:00.206553Z",
     "iopub.status.idle": "2024-04-15T14:19:00.211446Z",
     "shell.execute_reply": "2024-04-15T14:19:00.210566Z"
    },
    "papermill": {
     "duration": 0.069338,
     "end_time": "2024-04-15T14:19:00.213727",
     "exception": false,
     "start_time": "2024-04-15T14:19:00.144389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#submission.to_csv('submission_final5.csv', float_format='%.6f',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "3c92ef19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T14:19:00.336149Z",
     "iopub.status.busy": "2024-04-15T14:19:00.335457Z",
     "iopub.status.idle": "2024-04-15T14:19:00.342012Z",
     "shell.execute_reply": "2024-04-15T14:19:00.341185Z"
    },
    "papermill": {
     "duration": 0.070871,
     "end_time": "2024-04-15T14:19:00.344418",
     "exception": false,
     "start_time": "2024-04-15T14:19:00.273547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import xgboost as xgb\n",
    "# ##### RUN XGBOOST\n",
    "\n",
    "# print(\"\\nSetting up data for XGBoost ...\")\n",
    "# # xgboost params\n",
    "# y_mean = np.mean(y_train)\n",
    "# xgb_params = [{\n",
    "#     'eta': 0.037,\n",
    "#     'max_depth': 5,\n",
    "#     'subsample': 0.80,\n",
    "#     'objective': 'reg:linear',\n",
    "#     'eval_metric': 'rmse',\n",
    "#     'lambda': 0.8,   \n",
    "#     'alpha': 0.4, \n",
    "#     'base_score': y_mean,\n",
    "#     'silent': 1\n",
    "# },{\n",
    "#     'eta': 0.037,\n",
    "#     'max_depth': 5,\n",
    "#     'subsample': 0.80,\n",
    "#     'objective': 'reg:squaredlogerror',\n",
    "#     'eval_metric': 'rmsle',\n",
    "#     'lambda': 0.8,   \n",
    "#     'alpha': 0.4, \n",
    "#     'base_score': y_mean,\n",
    "#     'silent': 1\n",
    "# },{\n",
    "#     'eta': 0.037,\n",
    "#     'max_depth': 5,\n",
    "#     'subsample': 0.80,\n",
    "#     'objective': 'reg:pseudohubererror',\n",
    "#     'eval_metric': 'mphe',\n",
    "#     'lambda': 0.8,   \n",
    "#     'alpha': 0.4, \n",
    "#     'base_score': y_mean,\n",
    "#     'silent': 1\n",
    "# }]\n",
    "\n",
    "\n",
    "# dtrain = xgb.DMatrix(X_train, y_train)\n",
    "# dtest = xgb.DMatrix(X_test)\n",
    "\n",
    "# num_boost_rounds = 100\n",
    "# print('num_boost_rounds = '+str(num_boost_rounds))\n",
    "\n",
    "# # train model\n",
    "# print('\\nTraining XGBoost')\n",
    "# y_pred = 0\n",
    "# for i in xgb_params:\n",
    "#     model = xgb.train(dict(i, verbosity=0),\n",
    "#                   dtrain, num_boost_round=num_boost_rounds)\n",
    "\n",
    "#     print('\\nPredicting with XGBoost....')\n",
    "#     y_pred += model.predict(dtest)\n",
    "# y_pred = y_pred/len(xgb_params)\n",
    "\n",
    "# print('\\nFirst XGBoost predictinos:')\n",
    "# print(pd.DataFrame(y_pred).head())"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 860670,
     "sourceId": 6649,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 769.185504,
   "end_time": "2024-04-15T14:19:02.235253",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-15T14:06:13.049749",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
