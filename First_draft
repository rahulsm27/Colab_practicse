{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6649,"databundleVersionId":860670,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-12T06:50:24.215530Z","iopub.execute_input":"2024-04-12T06:50:24.215969Z","iopub.status.idle":"2024-04-12T06:50:24.223561Z","shell.execute_reply.started":"2024-04-12T06:50:24.215923Z","shell.execute_reply":"2024-04-12T06:50:24.221968Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"markdown","source":"## STEP1 : Import Libraries and Load Dataset","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 100)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\n\n\nfrom tqdm import tqdm\nimport gc\n\n\nfrom catboost import CatBoostRegressor\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:10:55.238969Z","iopub.execute_input":"2024-04-12T04:10:55.239289Z","iopub.status.idle":"2024-04-12T04:10:58.560199Z","shell.execute_reply.started":"2024-04-12T04:10:55.239262Z","shell.execute_reply":"2024-04-12T04:10:58.558891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load the properties dataset\n# This file constains properties with their home features for their respective year\n# This cell takes time to execute\n\nprint(\"Loading Properties dataset..\")\nproperties2016 = pd.read_csv('/kaggle/input/zillow-prize-1/properties_2016.csv', low_memory = False)\nproperties2017 = pd.read_csv('/kaggle/input/zillow-prize-1/properties_2017.csv', low_memory = False)\nprint(\" Properties dataset loaded\")","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:10:58.562185Z","iopub.execute_input":"2024-04-12T04:10:58.562939Z","iopub.status.idle":"2024-04-12T04:12:16.689478Z","shell.execute_reply.started":"2024-04-12T04:10:58.562887Z","shell.execute_reply":"2024-04-12T04:12:16.687905Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# The file contain transaction details i.e. the date of sale and sale value\n#train_2016.csv - the training set with transactions from 1/1/2016 to 12/31/2016\n#train_2017.csv - the training set with transactions from 1/1/2017 to 9/15/2017\n\nprint('Loading transaction dataset..')\ntrain2016 = pd.read_csv('/kaggle/input/zillow-prize-1/train_2016_v2.csv', parse_dates=['transactiondate'], low_memory=False)\ntrain2017 = pd.read_csv('/kaggle/input/zillow-prize-1/train_2017.csv', parse_dates=['transactiondate'], low_memory=False)\nprint('Transaction dataset loaded')","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:16.693536Z","iopub.execute_input":"2024-04-12T04:12:16.694053Z","iopub.status.idle":"2024-04-12T04:12:16.925003Z","shell.execute_reply.started":"2024-04-12T04:12:16.694015Z","shell.execute_reply":"2024-04-12T04:12:16.923757Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# The processing of some of the algorithms can be made quick if data representation is made in int/float32 instead of int/float64.\nfor c, dtype in zip(properties2016.columns, properties2016.dtypes):\n    if dtype == np.float64:        \n        properties2016[c] = properties2016[c].astype(np.float32)\n    if dtype == np.int64:\n        properties2016[c] = properties2016[c].astype(np.int32)\n        \nfor c, dtype in zip(properties2017.columns, properties2017.dtypes):\n    if dtype == np.float64:        \n        properties2017[c] = properties2017[c].astype(np.float32)\n    if dtype == np.int64:\n        properties2017[c] = properties2017[c].astype(np.int32)\n\n\nfor column in train2016.columns:\n    if train2016[column].dtype == int:\n        train2016[column] = train2016[column].astype(np.int32)\n    if train2016[column].dtype == float:\n        train2016[column] = train2016[column].astype(np.float32)\n        \nfor column in train2017.columns:\n    if train2017[column].dtype == int:\n        train2017[column] = train2017[column].astype(np.int32)\n    if train2017[column].dtype == float:\n        train2017[column] = train2017[column].astype(np.float32)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:16.926681Z","iopub.execute_input":"2024-04-12T04:12:16.927017Z","iopub.status.idle":"2024-04-12T04:12:17.596175Z","shell.execute_reply.started":"2024-04-12T04:12:16.926990Z","shell.execute_reply":"2024-04-12T04:12:17.595086Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"In this competition, Zillow is asking us to predict the \nlog-error between their Zestimate and the actual sale price, \ngiven all the features of a home. The log error is defined as\n\n𝑙𝑜𝑔𝑒𝑟𝑟𝑜𝑟=𝑙𝑜𝑔(𝑍𝑒𝑠𝑡𝑖𝑚𝑎𝑡𝑒)−𝑙𝑜𝑔(𝑆𝑎𝑙𝑒𝑃𝑟𝑖𝑐𝑒)","metadata":{}},{"cell_type":"code","source":"\n# We need to predict 6 time points for all properties: October 2016 (201610), \n#November 2016 (201611), December 2016 (201612), October 2017 (201710),\n#November 2017 (201711), and December 2017 (201712).\n\nprint('Loading submission sample file')\nsample_submission = pd.read_csv('/kaggle/input/zillow-prize-1/sample_submission.csv', low_memory = False)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:17.597962Z","iopub.execute_input":"2024-04-12T04:12:17.598472Z","iopub.status.idle":"2024-04-12T04:12:20.050001Z","shell.execute_reply.started":"2024-04-12T04:12:17.598411Z","shell.execute_reply":"2024-04-12T04:12:20.048692Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sample_submission.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:20.051856Z","iopub.execute_input":"2024-04-12T04:12:20.052338Z","iopub.status.idle":"2024-04-12T04:12:20.071549Z","shell.execute_reply.started":"2024-04-12T04:12:20.052295Z","shell.execute_reply":"2024-04-12T04:12:20.070275Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(sample_submission)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:20.072870Z","iopub.execute_input":"2024-04-12T04:12:20.073224Z","iopub.status.idle":"2024-04-12T04:12:20.079302Z","shell.execute_reply.started":"2024-04-12T04:12:20.073195Z","shell.execute_reply":"2024-04-12T04:12:20.078161Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## STEP 2 : EDA &  Feature Engineering","metadata":{}},{"cell_type":"code","source":"# Lets check the basic attributes of all the four datasets like \n#shape, number of null values and few records to get a sense of the data","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:20.080985Z","iopub.execute_input":"2024-04-12T04:12:20.081371Z","iopub.status.idle":"2024-04-12T04:12:20.090199Z","shell.execute_reply.started":"2024-04-12T04:12:20.081341Z","shell.execute_reply":"2024-04-12T04:12:20.088937Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nproperties2016.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:20.095065Z","iopub.execute_input":"2024-04-12T04:12:20.095512Z","iopub.status.idle":"2024-04-12T04:12:20.177645Z","shell.execute_reply.started":"2024-04-12T04:12:20.095479Z","shell.execute_reply":"2024-04-12T04:12:20.176533Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nproperties2016.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:20.179147Z","iopub.execute_input":"2024-04-12T04:12:20.179639Z","iopub.status.idle":"2024-04-12T04:12:20.186961Z","shell.execute_reply.started":"2024-04-12T04:12:20.179588Z","shell.execute_reply":"2024-04-12T04:12:20.185845Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"properties2016.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:20.188585Z","iopub.execute_input":"2024-04-12T04:12:20.188988Z","iopub.status.idle":"2024-04-12T04:12:25.777960Z","shell.execute_reply.started":"2024-04-12T04:12:20.188951Z","shell.execute_reply":"2024-04-12T04:12:25.776787Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"(properties2016.isnull().sum()/len(properties2016)*100).sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:25.779729Z","iopub.execute_input":"2024-04-12T04:12:25.780366Z","iopub.status.idle":"2024-04-12T04:12:26.960400Z","shell.execute_reply.started":"2024-04-12T04:12:25.780324Z","shell.execute_reply":"2024-04-12T04:12:26.959427Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# LEts check the size of the dataset\nproperties2017.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:26.961980Z","iopub.execute_input":"2024-04-12T04:12:26.962649Z","iopub.status.idle":"2024-04-12T04:12:26.968972Z","shell.execute_reply.started":"2024-04-12T04:12:26.962614Z","shell.execute_reply":"2024-04-12T04:12:26.967699Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"properties2017.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:26.970490Z","iopub.execute_input":"2024-04-12T04:12:26.970926Z","iopub.status.idle":"2024-04-12T04:12:32.611258Z","shell.execute_reply.started":"2024-04-12T04:12:26.970884Z","shell.execute_reply":"2024-04-12T04:12:32.610093Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#checking percentage of null values\n(properties2017.isnull().sum()/len(properties2017) * 100).sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:32.612624Z","iopub.execute_input":"2024-04-12T04:12:32.613052Z","iopub.status.idle":"2024-04-12T04:12:33.727606Z","shell.execute_reply.started":"2024-04-12T04:12:32.613022Z","shell.execute_reply":"2024-04-12T04:12:33.726461Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"properties2017[properties2017['longitude'].isnull()].head()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:33.729393Z","iopub.execute_input":"2024-04-12T04:12:33.730099Z","iopub.status.idle":"2024-04-12T04:12:33.786956Z","shell.execute_reply.started":"2024-04-12T04:12:33.730058Z","shell.execute_reply":"2024-04-12T04:12:33.785603Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train2016.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:33.788543Z","iopub.execute_input":"2024-04-12T04:12:33.788921Z","iopub.status.idle":"2024-04-12T04:12:33.801989Z","shell.execute_reply.started":"2024-04-12T04:12:33.788888Z","shell.execute_reply":"2024-04-12T04:12:33.800622Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(train2016)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:33.803701Z","iopub.execute_input":"2024-04-12T04:12:33.804264Z","iopub.status.idle":"2024-04-12T04:12:33.814047Z","shell.execute_reply.started":"2024-04-12T04:12:33.804209Z","shell.execute_reply":"2024-04-12T04:12:33.812900Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train2017.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:33.815809Z","iopub.execute_input":"2024-04-12T04:12:33.816204Z","iopub.status.idle":"2024-04-12T04:12:33.829963Z","shell.execute_reply.started":"2024-04-12T04:12:33.816177Z","shell.execute_reply":"2024-04-12T04:12:33.828938Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(train2017)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:33.831559Z","iopub.execute_input":"2024-04-12T04:12:33.831896Z","iopub.status.idle":"2024-04-12T04:12:33.841262Z","shell.execute_reply.started":"2024-04-12T04:12:33.831869Z","shell.execute_reply":"2024-04-12T04:12:33.840152Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Let us add date features as it is important for analysis. \ndef add_date_features(df):\n    df[\"transaction_year\"] = df[\"transactiondate\"].dt.year\n    df[\"transaction_month\"] = (df[\"transactiondate\"].dt.year - 2016)*12 + df[\"transactiondate\"].dt.month\n    df[\"transaction_day\"] = df[\"transactiondate\"].dt.day\n    df[\"transaction_quarter\"] = (df[\"transactiondate\"].dt.year - 2016)*4 +df[\"transactiondate\"].dt.quarter\n    df.drop([\"transactiondate\"], inplace=True, axis=1)\n    return df\n\ntrain2016 = add_date_features(train2016)\ntrain2017 = add_date_features(train2017)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:33.842791Z","iopub.execute_input":"2024-04-12T04:12:33.843140Z","iopub.status.idle":"2024-04-12T04:12:33.898199Z","shell.execute_reply.started":"2024-04-12T04:12:33.843112Z","shell.execute_reply":"2024-04-12T04:12:33.896846Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Lets merge and prepare final dataset. We will perform any feature engineering on this","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:33.899710Z","iopub.execute_input":"2024-04-12T04:12:33.900060Z","iopub.status.idle":"2024-04-12T04:12:33.904825Z","shell.execute_reply.started":"2024-04-12T04:12:33.900030Z","shell.execute_reply":"2024-04-12T04:12:33.903770Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Preparing final dataset')\ntrain2016 = pd.merge(train2016, properties2016, how = 'left', on = 'parcelid')\ntrain2017 = pd.merge(train2017, properties2017, how = 'left', on = 'parcelid')\n\ntrain_df = pd.concat([train2016, train2017], axis = 0)\ntest_df = pd.merge(sample_submission[['ParcelId']], properties2016.rename(columns = {'parcelid': 'ParcelId'}), how = 'left', on = 'ParcelId')\n\n#del properties2016, properties2017, train2016, train2017\n#gc.collect();","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:33.906750Z","iopub.execute_input":"2024-04-12T04:12:33.907462Z","iopub.status.idle":"2024-04-12T04:12:38.974973Z","shell.execute_reply.started":"2024-04-12T04:12:33.907389Z","shell.execute_reply":"2024-04-12T04:12:38.973597Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nimport ydata_profiling as yp \nprofile = yp.ProfileReport(train_df) ","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:38.976816Z","iopub.execute_input":"2024-04-12T04:12:38.977182Z","iopub.status.idle":"2024-04-12T04:12:43.785012Z","shell.execute_reply.started":"2024-04-12T04:12:38.977150Z","shell.execute_reply":"2024-04-12T04:12:43.783785Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## takes 10-12 minutes\n#profile.to_notebook_iframe() \n## Save to html\n#profile.to_file(\"report\")","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:43.787006Z","iopub.execute_input":"2024-04-12T04:12:43.787795Z","iopub.status.idle":"2024-04-12T04:12:43.794779Z","shell.execute_reply.started":"2024-04-12T04:12:43.787749Z","shell.execute_reply":"2024-04-12T04:12:43.792498Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# There are lot of null values let us treate each of them\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:43.795883Z","iopub.execute_input":"2024-04-12T04:12:43.796879Z","iopub.status.idle":"2024-04-12T04:12:43.813097Z","shell.execute_reply.started":"2024-04-12T04:12:43.796837Z","shell.execute_reply":"2024-04-12T04:12:43.811732Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n#checking percentage of null values in final dataset\n(train_df.isnull().sum() / len(train_df) * 100).sort_values()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:43.821957Z","iopub.execute_input":"2024-04-12T04:12:43.822379Z","iopub.status.idle":"2024-04-12T04:12:43.902552Z","shell.execute_reply.started":"2024-04-12T04:12:43.822347Z","shell.execute_reply":"2024-04-12T04:12:43.901212Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(train_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:43.904373Z","iopub.execute_input":"2024-04-12T04:12:43.905143Z","iopub.status.idle":"2024-04-12T04:12:43.912834Z","shell.execute_reply.started":"2024-04-12T04:12:43.905104Z","shell.execute_reply":"2024-04-12T04:12:43.911652Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'airconditioningtypeid'\nprint(f\"Column : {i}\")\nprint(\"*\"*50)\n\nprint(\"Value counts before missing imputation\")\nprint(train_df[i].value_counts())\n\n\ntrain_df[i].fillna(6.0,inplace=True) # filling with 'other' as per data dictionary 6 indicates other  \ntest_df[i].fillna(6.0,inplace=True)\n\nprint(\"*\"*50)\nprint(\"Value counts after missing imputation\")\nprint(train_df[i].value_counts())","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:43.914447Z","iopub.execute_input":"2024-04-12T04:12:43.916782Z","iopub.status.idle":"2024-04-12T04:12:43.953653Z","shell.execute_reply.started":"2024-04-12T04:12:43.916748Z","shell.execute_reply":"2024-04-12T04:12:43.952752Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df[train_df['poolcnt'] == 1][['poolcnt','pooltypeid7','poolsizesum','pooltypeid10']].head(5)\n\n# we will keep only poolcnt column.Drop other columns related to pool. We will fill 0 for poolcnt columns wheren it is nan assuming no pools\ntrain_df['poolcnt'].fillna(0,inplace = True)\ntest_df['poolcnt'].fillna(0,inplace =True)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:43.955365Z","iopub.execute_input":"2024-04-12T04:12:43.956092Z","iopub.status.idle":"2024-04-12T04:12:43.991238Z","shell.execute_reply.started":"2024-04-12T04:12:43.956051Z","shell.execute_reply":"2024-04-12T04:12:43.989909Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(train_df['taxdelinquencyflag'].value_counts())\nprint(train_df['taxdelinquencyyear'].value_counts().sum())\n\n# We observer that no of records in both the columns is same. This means the flag is 'Y' only when there is an overdue of tax. We can fill other rows with N for delinquency column and 0 for year column\n\ntrain_df['taxdelinquencyflag'].fillna('N',inplace=True)\ntest_df['taxdelinquencyflag'].fillna('N',inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:43.994775Z","iopub.execute_input":"2024-04-12T04:12:43.995660Z","iopub.status.idle":"2024-04-12T04:12:44.208778Z","shell.execute_reply.started":"2024-04-12T04:12:43.995614Z","shell.execute_reply":"2024-04-12T04:12:44.207502Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# no of missing values is same in garagecarcnt and sqft column. SO we will fill o in missing values assuming no garage\ntrain_df['garagecarcnt'].value_counts()\ntrain_df['garagecarcnt'].fillna(0,inplace = True)\ntrain_df['garagecarcnt'].fillna(0,inplace = True)\n\ntrain_df['garagetotalsqft'].fillna(0,inplace = True)\ntrain_df['garagetotalsqft'].fillna(0,inplace = True)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:44.210246Z","iopub.execute_input":"2024-04-12T04:12:44.210633Z","iopub.status.idle":"2024-04-12T04:12:44.224507Z","shell.execute_reply.started":"2024-04-12T04:12:44.210600Z","shell.execute_reply":"2024-04-12T04:12:44.223561Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df[train_df['longitude'].isnull()].head()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:44.226009Z","iopub.execute_input":"2024-04-12T04:12:44.226785Z","iopub.status.idle":"2024-04-12T04:12:44.285074Z","shell.execute_reply.started":"2024-04-12T04:12:44.226750Z","shell.execute_reply":"2024-04-12T04:12:44.283891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\ni = 'fireplaceflag'\nprint(f\"Column : {i}\")\nprint(\"*\"*50)\n\nprint(\"Value counts before missing imputation\")\nprint(train_df[i].value_counts())\n\n# it means we only have data for true values. Data for false is missing. Therefore we can replace nan with false\n\ntrain_df[i].fillna(False,inplace=True) \ntest_df[i].fillna(False,inplace=True)\n\nprint(\"*\"*50)\nprint(\"Value counts after missing imputation\")\nprint(train_df[i].value_counts())","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:44.286324Z","iopub.execute_input":"2024-04-12T04:12:44.286684Z","iopub.status.idle":"2024-04-12T04:12:44.712492Z","shell.execute_reply.started":"2024-04-12T04:12:44.286656Z","shell.execute_reply":"2024-04-12T04:12:44.711097Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Dropping rows having all NA values except parcelid\ntrain_df.dropna(subset=[\"longitude\"], inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:44.713882Z","iopub.execute_input":"2024-04-12T04:12:44.714329Z","iopub.status.idle":"2024-04-12T04:12:44.752302Z","shell.execute_reply.started":"2024-04-12T04:12:44.714300Z","shell.execute_reply":"2024-04-12T04:12:44.751211Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"null_columns = list(train_df.columns[train_df.isnull().any()])\nprint(\"Total columns having null value \", len(null_columns))\nprint()\nprint(null_columns)\n\n\n# Drop columns having greter than 60 % missing values\nmissing_perc_thresh = 0.60\nexclude_missing = []\nnum_rows = train_df.shape[0]\nfor c in train_df.columns:\n    num_missing = train_df[c].isnull().sum()\n    if num_missing == 0:\n        continue\n    missing_frac = num_missing / float(num_rows)\n    if missing_frac > missing_perc_thresh:\n        exclude_missing.append(c)\nprint()\nprint(\"We exclude: %s\" % len(exclude_missing))\nprint(exclude_missing)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:44.753723Z","iopub.execute_input":"2024-04-12T04:12:44.754091Z","iopub.status.idle":"2024-04-12T04:12:44.908718Z","shell.execute_reply.started":"2024-04-12T04:12:44.754062Z","shell.execute_reply":"2024-04-12T04:12:44.907497Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df.drop(['propertycountylandusecode'],inplace= True, axis=1)\ntest_df.drop(['propertycountylandusecode'],inplace= True,axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:44.910211Z","iopub.execute_input":"2024-04-12T04:12:44.910610Z","iopub.status.idle":"2024-04-12T04:12:45.324355Z","shell.execute_reply.started":"2024-04-12T04:12:44.910578Z","shell.execute_reply":"2024-04-12T04:12:45.322949Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print (\"Define training features !!\")\nexclude_other = ['parcelid', 'logerror','propertyzoningdesc']\ntrain_features = []\nfor c in train_df.columns:\n    if c not in exclude_missing and c not in exclude_other :\n        train_features.append(c)\nprint(\"We use these for training: %s\" % len(train_features))","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:45.325902Z","iopub.execute_input":"2024-04-12T04:12:45.326287Z","iopub.status.idle":"2024-04-12T04:12:45.333632Z","shell.execute_reply.started":"2024-04-12T04:12:45.326254Z","shell.execute_reply":"2024-04-12T04:12:45.332477Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Checking columsn that we plan to drop","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:45.334925Z","iopub.execute_input":"2024-04-12T04:12:45.335306Z","iopub.status.idle":"2024-04-12T04:12:45.343433Z","shell.execute_reply.started":"2024-04-12T04:12:45.335260Z","shell.execute_reply":"2024-04-12T04:12:45.342315Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i='storytypeid'\nprint(train_df[i].value_counts())\n# We will drop this column as number of na is too high\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:45.344884Z","iopub.execute_input":"2024-04-12T04:12:45.345233Z","iopub.status.idle":"2024-04-12T04:12:45.357088Z","shell.execute_reply.started":"2024-04-12T04:12:45.345178Z","shell.execute_reply":"2024-04-12T04:12:45.356241Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'architecturalstyletypeid'\nprint(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:45.358706Z","iopub.execute_input":"2024-04-12T04:12:45.359008Z","iopub.status.idle":"2024-04-12T04:12:45.370215Z","shell.execute_reply.started":"2024-04-12T04:12:45.358982Z","shell.execute_reply":"2024-04-12T04:12:45.369052Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'basementsqft'\n#print(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\n# if i not in to_drop:\n#     to_drop.append(i)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:56.839433Z","iopub.execute_input":"2024-04-12T04:12:56.839865Z","iopub.status.idle":"2024-04-12T04:12:56.845495Z","shell.execute_reply.started":"2024-04-12T04:12:56.839836Z","shell.execute_reply":"2024-04-12T04:12:56.844246Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'buildingclasstypeid'\nprint(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:58.327386Z","iopub.execute_input":"2024-04-12T04:12:58.327858Z","iopub.status.idle":"2024-04-12T04:12:58.335938Z","shell.execute_reply.started":"2024-04-12T04:12:58.327825Z","shell.execute_reply":"2024-04-12T04:12:58.334769Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# We will drop taxlinquencyyear as we already have the flag column\n\ni ='taxdelinquencyyear'\nprint(train_df[i].value_counts())\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:03.423487Z","iopub.execute_input":"2024-04-12T04:13:03.424532Z","iopub.status.idle":"2024-04-12T04:13:03.434449Z","shell.execute_reply.started":"2024-04-12T04:13:03.424483Z","shell.execute_reply":"2024-04-12T04:13:03.433147Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Overall assessment of condition of the building from best (lowest) to worst (highest)\ni = 'buildingqualitytypeid'\nprint(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:04.675057Z","iopub.execute_input":"2024-04-12T04:13:04.676387Z","iopub.status.idle":"2024-04-12T04:13:04.688373Z","shell.execute_reply.started":"2024-04-12T04:13:04.676341Z","shell.execute_reply":"2024-04-12T04:13:04.687016Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'decktypeid'\nprint(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\n# if i not in to_drop:\n#     to_drop.append(i)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:10.439771Z","iopub.execute_input":"2024-04-12T04:13:10.440248Z","iopub.status.idle":"2024-04-12T04:13:10.449788Z","shell.execute_reply.started":"2024-04-12T04:13:10.440212Z","shell.execute_reply":"2024-04-12T04:13:10.448511Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 'storytypeid'\nprint(train_df[i].value_counts())\n# We will drop this colum as no of missing values is too high\n# if i not in to_drop:\n#     to_drop.append(i)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:14.475682Z","iopub.execute_input":"2024-04-12T04:13:14.476123Z","iopub.status.idle":"2024-04-12T04:13:14.484840Z","shell.execute_reply.started":"2024-04-12T04:13:14.476093Z","shell.execute_reply":"2024-04-12T04:13:14.483627Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# We will drop all pool related column as we have pool cnt colun\n# We will drop all other area related column","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:17.871192Z","iopub.execute_input":"2024-04-12T04:13:17.871662Z","iopub.status.idle":"2024-04-12T04:13:17.877242Z","shell.execute_reply.started":"2024-04-12T04:13:17.871629Z","shell.execute_reply":"2024-04-12T04:13:17.875980Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#train_df['propertycountylandusecode'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:18.051387Z","iopub.execute_input":"2024-04-12T04:13:18.051884Z","iopub.status.idle":"2024-04-12T04:13:18.057600Z","shell.execute_reply.started":"2024-04-12T04:13:18.051850Z","shell.execute_reply":"2024-04-12T04:13:18.056425Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ulimit = np.percentile(train_df.logerror.values, 99) \nllimit = np.percentile(train_df.logerror.values, 1) \ntrain_df['logerror'].loc[train_df['logerror'] > ulimit] = ulimit\ntrain_df['logerror'].loc[train_df['logerror'] < llimit] = llimit\nsns.histplot(train2016['logerror'],bins=50)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:18.403711Z","iopub.execute_input":"2024-04-12T04:13:18.404166Z","iopub.status.idle":"2024-04-12T04:13:18.934062Z","shell.execute_reply.started":"2024-04-12T04:13:18.404137Z","shell.execute_reply":"2024-04-12T04:13:18.932904Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (12,12))\nsns.jointplot(x = train_df.latitude.values, y = train_df.longitude.values, size = 10)\nplt.ylabel('Longitude', fontsize = 12)\nplt.xlabel('Latitude', fontsize = 12)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:34:19.423864Z","iopub.execute_input":"2024-04-12T04:34:19.425240Z","iopub.status.idle":"2024-04-12T04:34:25.563975Z","shell.execute_reply.started":"2024-04-12T04:34:19.425196Z","shell.execute_reply":"2024-04-12T04:34:25.562970Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n\n#profile.to_file('eda_report.html')","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:45.998907Z","iopub.status.idle":"2024-04-12T04:12:45.999839Z","shell.execute_reply.started":"2024-04-12T04:12:45.999550Z","shell.execute_reply":"2024-04-12T04:12:45.999574Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# #life of property\n# df_train['N-life'] = 2018 - df_train['yearbuilt']\n\n# #error in calculation of the finished living area of home\n# df_train['N-LivingAreaError'] = df_train['calculatedfinishedsquarefeet']/df_train['finishedsquarefeet12']\n\n# #proportion of living area\n# df_train['N-LivingAreaProp'] = df_train['calculatedfinishedsquarefeet']/df_train['lotsizesquarefeet']\n# df_train['N-LivingAreaProp2'] = df_train['finishedsquarefeet12']/df_train['finishedsquarefeet15']\n\n# #Amout of extra space\n# df_train['N-ExtraSpace'] = df_train['lotsizesquarefeet'] - df_train['calculatedfinishedsquarefeet'] \n# df_train['N-ExtraSpace-2'] = df_train['finishedsquarefeet15'] - df_train['finishedsquarefeet12'] \n\n# #Total number of rooms\n# df_train['N-TotalRooms'] = df_train['bathroomcnt']*df_train['bedroomcnt']\n\n# #Average room size\n# df_train['N-AvRoomSize'] = df_train['calculatedfinishedsquarefeet']/df_train['roomcnt'] \n\n# # Number of Extra rooms\n# df_train['N-ExtraRooms'] = df_train['roomcnt'] - df_train['N-TotalRooms'] \n\n# #Ratio of the built structure value to land area\n# df_train['N-ValueProp'] = df_train['structuretaxvaluedollarcnt']/df_train['landtaxvaluedollarcnt']\n\n# #Does property have a garage, pool or hot tub and AC?\n# df_train['N-GarPoolAC'] = ((df_train['garagecarcnt']>0) & (df_train['pooltypeid10']>0) & (df_train['airconditioningtypeid']!=5))*1 \n\n# df_train[\"N-location\"] = df_train[\"latitude\"] + df_train[\"longitude\"]\n# df_train[\"N-location-2\"] = df_train[\"latitude\"]*df_train[\"longitude\"]\n# df_train[\"N-location-2round\"] = df_train[\"N-location-2\"].round(-4)\n\n# df_train[\"N-latitude-round\"] = df_train[\"latitude\"].round(-4)\n# df_train[\"N-longitude-round\"] = df_train[\"longitude\"].round(-4)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:12:46.001455Z","iopub.status.idle":"2024-04-12T04:12:46.002256Z","shell.execute_reply.started":"2024-04-12T04:12:46.001959Z","shell.execute_reply":"2024-04-12T04:12:46.001986Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:13.578140Z","iopub.execute_input":"2024-04-11T03:06:13.579732Z","iopub.status.idle":"2024-04-11T03:06:13.640723Z","shell.execute_reply.started":"2024-04-11T03:06:13.579670Z","shell.execute_reply":"2024-04-11T03:06:13.639056Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:16.258844Z","iopub.execute_input":"2024-04-11T03:06:16.259578Z","iopub.status.idle":"2024-04-11T03:06:20.105095Z","shell.execute_reply.started":"2024-04-11T03:06:16.259536Z","shell.execute_reply":"2024-04-11T03:06:20.103645Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T12:24:51.585562Z","iopub.execute_input":"2024-04-11T12:24:51.586245Z","iopub.status.idle":"2024-04-11T12:24:52.366726Z","shell.execute_reply.started":"2024-04-11T12:24:51.586212Z","shell.execute_reply":"2024-04-11T12:24:52.365669Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"del num_rows, missing_perc_thresh\ngc.collect();","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:26.307989Z","iopub.execute_input":"2024-04-12T04:13:26.308437Z","iopub.status.idle":"2024-04-12T04:13:26.500056Z","shell.execute_reply.started":"2024-04-12T04:13:26.308386Z","shell.execute_reply":"2024-04-12T04:13:26.498381Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## STEP 3 : Model training and Evaluation","metadata":{}},{"cell_type":"code","source":"print (\"Training time !!\")\nX_train = train_df[train_features]\ny_train = train_df.logerror\nprint(X_train.shape, y_train.shape)\n\ntest_df['transactiondate'] = pd.Timestamp('2016-12-01') \ntest_df = add_date_features(test_df)\nX_test = test_df[train_features]\nprint(X_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:29.311955Z","iopub.execute_input":"2024-04-12T04:13:29.312394Z","iopub.status.idle":"2024-04-12T04:13:30.442912Z","shell.execute_reply.started":"2024-04-12T04:13:29.312364Z","shell.execute_reply":"2024-04-12T04:13:30.441665Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # for i in list(X_train.columns):\n# #     if X_train[i].dtype == 'float64' :\n# #        X_train[i] = X_train[i].astype(int)\n# num_ensembles = 5\n# y_pred = 0.0\n# for i in tqdm(range(num_ensembles)):\n#     model = CatBoostRegressor(\n#         iterations=630, learning_rate=0.3,\n#         depth=6, l2_leaf_reg=3,\n#         loss_function='MAE',\n#         eval_metric='MAE',\n#         random_seed=i)\n#     model.fit(\n#         X_train, y_train,\n#         cat_features=cat_feature_inds)\n#     y_pred += model.predict(X_test)\n# y_pred /= num_ensembles","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:16:06.381713Z","iopub.execute_input":"2024-04-11T03:16:06.382165Z","iopub.status.idle":"2024-04-11T03:16:06.436951Z","shell.execute_reply.started":"2024-04-11T03:16:06.382135Z","shell.execute_reply":"2024-04-11T03:16:06.435617Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\ncat_columns = ['taxdelinquencyflag']\n\nfor i in cat_columns:\n    le = LabelEncoder()\n    X_train[i]= le.fit_transform(X_train[i])\n    X_test[i] = le.transform(X_test[i])\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:34.307601Z","iopub.execute_input":"2024-04-12T04:13:34.308095Z","iopub.status.idle":"2024-04-12T04:13:35.009808Z","shell.execute_reply.started":"2024-04-12T04:13:34.308057Z","shell.execute_reply":"2024-04-12T04:13:35.008571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train['taxdelinquencyflag'].head()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:13:36.716223Z","iopub.execute_input":"2024-04-12T04:13:36.717564Z","iopub.status.idle":"2024-04-12T04:13:36.727630Z","shell.execute_reply.started":"2024-04-12T04:13:36.717511Z","shell.execute_reply":"2024-04-12T04:13:36.726486Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import xgboost as xgb\n##### RUN XGBOOST\n\nprint(\"\\nSetting up data for XGBoost ...\")\n# xgboost params\ny_mean = np.mean(y_train)\nxgb_params = [{\n    'eta': 0.037,\n    'max_depth': 5,\n    'subsample': 0.80,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'lambda': 0.8,   \n    'alpha': 0.4, \n    'base_score': y_mean,\n    'silent': 1\n},{\n    'eta': 0.037,\n    'max_depth': 5,\n    'subsample': 0.80,\n    'objective': 'reg:squaredlogerror',\n    'eval_metric': 'rmsle',\n    'lambda': 0.8,   \n    'alpha': 0.4, \n    'base_score': y_mean,\n    'silent': 1\n},{\n    'eta': 0.037,\n    'max_depth': 5,\n    'subsample': 0.80,\n    'objective': 'reg:pseudohubererror',\n    'eval_metric': 'mphe',\n    'lambda': 0.8,   \n    'alpha': 0.4, \n    'base_score': y_mean,\n    'silent': 1\n}]\n\n\ndtrain = xgb.DMatrix(X_train, y_train)\ndtest = xgb.DMatrix(X_test)\n\nnum_boost_rounds = 100\nprint('num_boost_rounds = '+str(num_boost_rounds))","metadata":{"execution":{"iopub.status.busy":"2024-04-12T06:51:31.124844Z","iopub.execute_input":"2024-04-12T06:51:31.125399Z","iopub.status.idle":"2024-04-12T06:51:58.345577Z","shell.execute_reply.started":"2024-04-12T06:51:31.125365Z","shell.execute_reply":"2024-04-12T06:51:58.344537Z"},"trusted":true},"execution_count":72,"outputs":[{"name":"stdout","text":"\nSetting up data for XGBoost ...\nnum_boost_rounds = 100\n","output_type":"stream"}]},{"cell_type":"code","source":"# train model\nprint('\\nTraining XGBoost')\ny_pred = 0\nfor i in xgb_params:\n    model = xgb.train(dict(i, verbosity=0),\n                  dtrain, num_boost_round=num_boost_rounds)\n\n    print('\\nPredicting with XGBoost....')\n    y_pred += model.predict(dtest)\ny_pred = y_pred/len(xgb_params)\n\nprint('\\nFirst XGBoost predictinos:')\nprint(pd.DataFrame(y_pred).head())\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:26:11.493696Z","iopub.execute_input":"2024-04-12T04:26:11.494162Z","iopub.status.idle":"2024-04-12T04:26:25.217112Z","shell.execute_reply.started":"2024-04-12T04:26:11.494127Z","shell.execute_reply":"2024-04-12T04:26:25.216254Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X_train,y_train,test_size=.1, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:10:42.745213Z","iopub.execute_input":"2024-04-12T07:10:42.745672Z","iopub.status.idle":"2024-04-12T07:10:42.798453Z","shell.execute_reply.started":"2024-04-12T07:10:42.745630Z","shell.execute_reply":"2024-04-12T07:10:42.796817Z"},"trusted":true},"execution_count":106,"outputs":[]},{"cell_type":"code","source":"import xgboost as xgb\ndtrain = xgb.DMatrix(X_train, label=y_train)\ndtest = xgb.DMatrix(X_val, label=y_val)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:16:23.461656Z","iopub.execute_input":"2024-04-12T07:16:23.462512Z","iopub.status.idle":"2024-04-12T07:16:24.452540Z","shell.execute_reply.started":"2024-04-12T07:16:23.462473Z","shell.execute_reply":"2024-04-12T07:16:24.451480Z"},"trusted":true},"execution_count":116,"outputs":[]},{"cell_type":"code","source":"\nparams = {\n    # Parameters that we are going to tune.\n    'max_depth':6,\n    'min_child_weight': 1,\n    'eta':.3,\n    'subsample': 1,\n    'colsample_bytree': 1,\n    # Other parameters\n    'objective':'reg:linear',\n    'verbose' : 0\n  \n}\n\nnum_boost_rounds=100\ngridsearch_params = [\n    (max_depth, min_child_weight)\n    for max_depth in range(9,12)\n    for min_child_weight in range(5,8)\n]\n\n# Define initial best params and MAE\nmin_mae = float(\"Inf\")\nbest_params = None\nfor max_depth, min_child_weight in gridsearch_params:\n    print(\"CV with max_depth={}, min_child_weight={}\".format(\n                             max_depth,\n                             min_child_weight))\n    # Update our parameters\n    params['max_depth'] = max_depth\n    params['min_child_weight'] = min_child_weight\n    # Run CV\n    cv_results = xgb.cv(\n        dict(params,verbose=0),\n        dtrain,\n        num_boost_round=num_boost_rounds,\n        seed=42,\n        nfold=5,\n        metrics={'mae'},\n        early_stopping_rounds=10\n    )\n    # Update best MAE\n    mean_mae = cv_results['test-mae-mean'].min()\n    boost_rounds = cv_results['test-mae-mean'].argmin()\n    print(\"\\tMAE {} for {} rounds\".format(mean_mae, boost_rounds))\n    if mean_mae < min_mae:\n        min_mae = mean_mae\n        best_params = (max_depth,min_child_weight)\nprint(\"Best params: {}, {}, MAE: {}\".format(best_params[0], best_params[1], min_mae))\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:18:44.057910Z","iopub.execute_input":"2024-04-12T07:18:44.058512Z","iopub.status.idle":"2024-04-12T07:19:23.680387Z","shell.execute_reply.started":"2024-04-12T07:18:44.058454Z","shell.execute_reply":"2024-04-12T07:19:23.673133Z"},"trusted":true},"execution_count":120,"outputs":[{"name":"stdout","text":"CV with max_depth=9, min_child_weight=5\n\tMAE 0.06083223435824371 for 1 rounds\nCV with max_depth=9, min_child_weight=6\n\tMAE 0.060838728426831044 for 1 rounds\nCV with max_depth=9, min_child_weight=7\n\tMAE 0.060836882612500975 for 1 rounds\nCV with max_depth=10, min_child_weight=5\n\tMAE 0.060903527682182955 for 1 rounds\nCV with max_depth=10, min_child_weight=6\n\tMAE 0.060914038835775605 for 1 rounds\nCV with max_depth=10, min_child_weight=7\n\tMAE 0.06089310435457039 for 1 rounds\nCV with max_depth=11, min_child_weight=5\n\tMAE 0.060942098875848075 for 0 rounds\nCV with max_depth=11, min_child_weight=6\n\tMAE 0.060960002861148464 for 0 rounds\nCV with max_depth=11, min_child_weight=7\n\tMAE 0.06095438471365707 for 0 rounds\nBest params: 9, 5, MAE: 0.06083223435824371\n","output_type":"stream"}]},{"cell_type":"code","source":"params['max_depth'] = best_params[0]\nparams['min_child_weight'] = best_params[1]","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:19:38.353267Z","iopub.execute_input":"2024-04-12T07:19:38.353753Z","iopub.status.idle":"2024-04-12T07:19:38.360777Z","shell.execute_reply.started":"2024-04-12T07:19:38.353720Z","shell.execute_reply":"2024-04-12T07:19:38.359247Z"},"trusted":true},"execution_count":121,"outputs":[]},{"cell_type":"code","source":"gridsearch_params = [\n    (subsample, colsample)\n    for subsample in [i/10. for i in range(7,11)]\n    for colsample in [i/10. for i in range(7,11)]\n]\n\nmin_mae = float(\"Inf\")\nbest_params = None\n# We start by the largest values and go down to the smallest\nfor subsample, colsample in reversed(gridsearch_params):\n    print(\"CV with subsample={}, colsample={}\".format(\n                             subsample,\n                             colsample))\n    # We update our parameters\n    params['subsample'] = subsample\n    params['colsample_bytree'] = colsample\n    # Run CV\n    cv_results = xgb.cv(\n        params,\n        dtrain,\n        num_boost_round=num_boost_rounds,\n        seed=42,\n        nfold=5,\n        metrics={'mae'},\n        early_stopping_rounds=10\n    )\n    # Update best score\n    mean_mae = cv_results['test-mae-mean'].min()\n    boost_rounds = cv_results['test-mae-mean'].argmin()\n    print(\"\\tMAE {} for {} rounds\".format(mean_mae, boost_rounds))\n    if mean_mae < min_mae:\n        min_mae = mean_mae\n        best_params = (subsample,colsample)\nprint(\"Best params: {}, {}, MAE: {}\".format(best_params[0], best_params[1], min_mae))","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:19:41.372610Z","iopub.execute_input":"2024-04-12T07:19:41.373068Z","iopub.status.idle":"2024-04-12T07:20:51.748365Z","shell.execute_reply.started":"2024-04-12T07:19:41.373037Z","shell.execute_reply":"2024-04-12T07:20:51.747088Z"},"trusted":true},"execution_count":122,"outputs":[{"name":"stdout","text":"CV with subsample=1.0, colsample=1.0\n\tMAE 0.06083223435824371 for 1 rounds\nCV with subsample=1.0, colsample=0.9\n\tMAE 0.06083712889917908 for 1 rounds\nCV with subsample=1.0, colsample=0.8\n\tMAE 0.060853103068551205 for 2 rounds\nCV with subsample=1.0, colsample=0.7\n\tMAE 0.060874185961230134 for 1 rounds\nCV with subsample=0.9, colsample=1.0\n\tMAE 0.06086053794891274 for 1 rounds\nCV with subsample=0.9, colsample=0.9\n\tMAE 0.060863040342878906 for 2 rounds\nCV with subsample=0.9, colsample=0.8\n\tMAE 0.06089849316194684 for 1 rounds\nCV with subsample=0.9, colsample=0.7\n\tMAE 0.06089035468450508 for 1 rounds\nCV with subsample=0.8, colsample=1.0\n\tMAE 0.06087940083196551 for 1 rounds\nCV with subsample=0.8, colsample=0.9\n\tMAE 0.060865428056698846 for 1 rounds\nCV with subsample=0.8, colsample=0.8\n\tMAE 0.06086622906497533 for 1 rounds\nCV with subsample=0.8, colsample=0.7\n\tMAE 0.06087556876062067 for 1 rounds\nCV with subsample=0.7, colsample=1.0\n\tMAE 0.06090936182985838 for 1 rounds\nCV with subsample=0.7, colsample=0.9\n\tMAE 0.06090428241945449 for 1 rounds\nCV with subsample=0.7, colsample=0.8\n\tMAE 0.06091965220358746 for 1 rounds\nCV with subsample=0.7, colsample=0.7\n\tMAE 0.06092674890010409 for 1 rounds\nBest params: 1.0, 1.0, MAE: 0.06083223435824371\n","output_type":"stream"}]},{"cell_type":"code","source":"params['subsample'] = best_params[0]\nparams['colsample_bytree'] =best_params[1]","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:21:05.632794Z","iopub.execute_input":"2024-04-12T07:21:05.633247Z","iopub.status.idle":"2024-04-12T07:21:05.639722Z","shell.execute_reply.started":"2024-04-12T07:21:05.633215Z","shell.execute_reply":"2024-04-12T07:21:05.638504Z"},"trusted":true},"execution_count":123,"outputs":[]},{"cell_type":"code","source":"%time\n# This can take some time…\nmin_mae = float(\"Inf\")\nbest_params = None\nfor eta in [.3, .2, .1, .05, .01, .005]:\n    print(\"CV with eta={}\".format(eta))\n    # We update our parameters\n    params['eta'] = eta\n    # Run and time CV\n    cv_results = xgb.cv(params,\n            dtrain,\n            num_boost_round=num_boost_rounds,\n            seed=42,\n            nfold=5,\n            metrics=['mae'],\n            early_stopping_rounds=10)\n    # Update best score\n    mean_mae = cv_results['test-mae-mean'].min()\n    boost_rounds = cv_results['test-mae-mean'].argmin()\n    print(\"\\tMAE {} for {} rounds\\n\".format(mean_mae, boost_rounds))\n    if mean_mae < min_mae:\n        min_mae = mean_mae\n        best_params = eta\nprint(\"Best params: {}, MAE: {}\".format(best_params, min_mae))","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:21:06.995770Z","iopub.execute_input":"2024-04-12T07:21:06.996262Z","iopub.status.idle":"2024-04-12T07:22:19.803794Z","shell.execute_reply.started":"2024-04-12T07:21:06.996227Z","shell.execute_reply":"2024-04-12T07:22:19.802667Z"},"trusted":true},"execution_count":124,"outputs":[{"name":"stdout","text":"CPU times: user 5 µs, sys: 0 ns, total: 5 µs\nWall time: 11.9 µs\nCV with eta=0.3\n\tMAE 0.06083223435824371 for 1 rounds\n\nCV with eta=0.2\n\tMAE 0.06077767210346454 for 3 rounds\n\nCV with eta=0.1\n\tMAE 0.060665817555906366 for 11 rounds\n\nCV with eta=0.05\n\tMAE 0.060621468131842736 for 36 rounds\n\nCV with eta=0.01\n\tMAE 0.060614904170128346 for 99 rounds\n\nCV with eta=0.005\n\tMAE 0.06071759021431093 for 99 rounds\n\nBest params: 0.01, MAE: 0.060614904170128346\n","output_type":"stream"}]},{"cell_type":"code","source":"params['eta'] = best_params","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:24:23.178604Z","iopub.execute_input":"2024-04-12T07:24:23.180304Z","iopub.status.idle":"2024-04-12T07:24:23.188316Z","shell.execute_reply.started":"2024-04-12T07:24:23.180192Z","shell.execute_reply":"2024-04-12T07:24:23.186744Z"},"trusted":true},"execution_count":126,"outputs":[]},{"cell_type":"code","source":"model = xgb.train(dict(params, verbosity=0),\n                  dtrain,evals=[(dtest, \"Test\")], num_boost_round=500,early_stopping_rounds=10)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:27:53.460171Z","iopub.execute_input":"2024-04-12T07:27:53.460641Z","iopub.status.idle":"2024-04-12T07:28:07.716933Z","shell.execute_reply.started":"2024-04-12T07:27:53.460608Z","shell.execute_reply":"2024-04-12T07:28:07.715912Z"},"trusted":true},"execution_count":134,"outputs":[{"name":"stdout","text":"[0]\tTest-rmse:0.10308\n[1]\tTest-rmse:0.10306\n[2]\tTest-rmse:0.10304\n[3]\tTest-rmse:0.10302\n[4]\tTest-rmse:0.10300\n[5]\tTest-rmse:0.10299\n[6]\tTest-rmse:0.10297\n[7]\tTest-rmse:0.10296\n[8]\tTest-rmse:0.10294\n[9]\tTest-rmse:0.10292\n[10]\tTest-rmse:0.10290\n[11]\tTest-rmse:0.10289\n[12]\tTest-rmse:0.10287\n[13]\tTest-rmse:0.10285\n[14]\tTest-rmse:0.10284\n[15]\tTest-rmse:0.10283\n[16]\tTest-rmse:0.10281\n[17]\tTest-rmse:0.10279\n[18]\tTest-rmse:0.10278\n[19]\tTest-rmse:0.10277\n[20]\tTest-rmse:0.10275\n[21]\tTest-rmse:0.10274\n[22]\tTest-rmse:0.10272\n[23]\tTest-rmse:0.10271\n[24]\tTest-rmse:0.10270\n[25]\tTest-rmse:0.10269\n[26]\tTest-rmse:0.10268\n[27]\tTest-rmse:0.10266\n[28]\tTest-rmse:0.10265\n[29]\tTest-rmse:0.10264\n[30]\tTest-rmse:0.10262\n[31]\tTest-rmse:0.10261\n[32]\tTest-rmse:0.10259\n[33]\tTest-rmse:0.10258\n[34]\tTest-rmse:0.10257\n[35]\tTest-rmse:0.10256\n[36]\tTest-rmse:0.10254\n[37]\tTest-rmse:0.10254\n[38]\tTest-rmse:0.10252\n[39]\tTest-rmse:0.10251\n[40]\tTest-rmse:0.10250\n[41]\tTest-rmse:0.10249\n[42]\tTest-rmse:0.10248\n[43]\tTest-rmse:0.10247\n[44]\tTest-rmse:0.10246\n[45]\tTest-rmse:0.10245\n[46]\tTest-rmse:0.10244\n[47]\tTest-rmse:0.10243\n[48]\tTest-rmse:0.10242\n[49]\tTest-rmse:0.10241\n[50]\tTest-rmse:0.10240\n[51]\tTest-rmse:0.10239\n[52]\tTest-rmse:0.10238\n[53]\tTest-rmse:0.10237\n[54]\tTest-rmse:0.10236\n[55]\tTest-rmse:0.10235\n[56]\tTest-rmse:0.10234\n[57]\tTest-rmse:0.10233\n[58]\tTest-rmse:0.10232\n[59]\tTest-rmse:0.10231\n[60]\tTest-rmse:0.10230\n[61]\tTest-rmse:0.10228\n[62]\tTest-rmse:0.10228\n[63]\tTest-rmse:0.10227\n[64]\tTest-rmse:0.10226\n[65]\tTest-rmse:0.10225\n[66]\tTest-rmse:0.10224\n[67]\tTest-rmse:0.10224\n[68]\tTest-rmse:0.10223\n[69]\tTest-rmse:0.10222\n[70]\tTest-rmse:0.10221\n[71]\tTest-rmse:0.10220\n[72]\tTest-rmse:0.10220\n[73]\tTest-rmse:0.10219\n[74]\tTest-rmse:0.10218\n[75]\tTest-rmse:0.10217\n[76]\tTest-rmse:0.10217\n[77]\tTest-rmse:0.10216\n[78]\tTest-rmse:0.10215\n[79]\tTest-rmse:0.10214\n[80]\tTest-rmse:0.10214\n[81]\tTest-rmse:0.10213\n[82]\tTest-rmse:0.10212\n[83]\tTest-rmse:0.10212\n[84]\tTest-rmse:0.10211\n[85]\tTest-rmse:0.10211\n[86]\tTest-rmse:0.10210\n[87]\tTest-rmse:0.10209\n[88]\tTest-rmse:0.10209\n[89]\tTest-rmse:0.10208\n[90]\tTest-rmse:0.10208\n[91]\tTest-rmse:0.10207\n[92]\tTest-rmse:0.10206\n[93]\tTest-rmse:0.10205\n[94]\tTest-rmse:0.10205\n[95]\tTest-rmse:0.10204\n[96]\tTest-rmse:0.10203\n[97]\tTest-rmse:0.10203\n[98]\tTest-rmse:0.10202\n[99]\tTest-rmse:0.10202\n[100]\tTest-rmse:0.10201\n[101]\tTest-rmse:0.10201\n[102]\tTest-rmse:0.10200\n[103]\tTest-rmse:0.10200\n[104]\tTest-rmse:0.10199\n[105]\tTest-rmse:0.10199\n[106]\tTest-rmse:0.10198\n[107]\tTest-rmse:0.10198\n[108]\tTest-rmse:0.10197\n[109]\tTest-rmse:0.10197\n[110]\tTest-rmse:0.10196\n[111]\tTest-rmse:0.10196\n[112]\tTest-rmse:0.10196\n[113]\tTest-rmse:0.10195\n[114]\tTest-rmse:0.10195\n[115]\tTest-rmse:0.10194\n[116]\tTest-rmse:0.10194\n[117]\tTest-rmse:0.10194\n[118]\tTest-rmse:0.10193\n[119]\tTest-rmse:0.10193\n[120]\tTest-rmse:0.10192\n[121]\tTest-rmse:0.10192\n[122]\tTest-rmse:0.10192\n[123]\tTest-rmse:0.10191\n[124]\tTest-rmse:0.10191\n[125]\tTest-rmse:0.10191\n[126]\tTest-rmse:0.10190\n[127]\tTest-rmse:0.10190\n[128]\tTest-rmse:0.10190\n[129]\tTest-rmse:0.10190\n[130]\tTest-rmse:0.10190\n[131]\tTest-rmse:0.10190\n[132]\tTest-rmse:0.10189\n[133]\tTest-rmse:0.10189\n[134]\tTest-rmse:0.10189\n[135]\tTest-rmse:0.10189\n[136]\tTest-rmse:0.10189\n[137]\tTest-rmse:0.10188\n[138]\tTest-rmse:0.10188\n[139]\tTest-rmse:0.10188\n[140]\tTest-rmse:0.10188\n[141]\tTest-rmse:0.10188\n[142]\tTest-rmse:0.10187\n[143]\tTest-rmse:0.10187\n[144]\tTest-rmse:0.10187\n[145]\tTest-rmse:0.10187\n[146]\tTest-rmse:0.10187\n[147]\tTest-rmse:0.10187\n[148]\tTest-rmse:0.10187\n[149]\tTest-rmse:0.10186\n[150]\tTest-rmse:0.10186\n[151]\tTest-rmse:0.10186\n[152]\tTest-rmse:0.10186\n[153]\tTest-rmse:0.10186\n[154]\tTest-rmse:0.10186\n[155]\tTest-rmse:0.10185\n[156]\tTest-rmse:0.10185\n[157]\tTest-rmse:0.10185\n[158]\tTest-rmse:0.10185\n[159]\tTest-rmse:0.10185\n[160]\tTest-rmse:0.10185\n[161]\tTest-rmse:0.10185\n[162]\tTest-rmse:0.10184\n[163]\tTest-rmse:0.10184\n[164]\tTest-rmse:0.10184\n[165]\tTest-rmse:0.10184\n[166]\tTest-rmse:0.10184\n[167]\tTest-rmse:0.10184\n[168]\tTest-rmse:0.10184\n[169]\tTest-rmse:0.10183\n[170]\tTest-rmse:0.10183\n[171]\tTest-rmse:0.10183\n[172]\tTest-rmse:0.10183\n[173]\tTest-rmse:0.10183\n[174]\tTest-rmse:0.10183\n[175]\tTest-rmse:0.10183\n[176]\tTest-rmse:0.10183\n[177]\tTest-rmse:0.10183\n[178]\tTest-rmse:0.10183\n[179]\tTest-rmse:0.10183\n[180]\tTest-rmse:0.10183\n[181]\tTest-rmse:0.10182\n[182]\tTest-rmse:0.10182\n[183]\tTest-rmse:0.10182\n[184]\tTest-rmse:0.10182\n[185]\tTest-rmse:0.10182\n[186]\tTest-rmse:0.10182\n[187]\tTest-rmse:0.10182\n[188]\tTest-rmse:0.10181\n[189]\tTest-rmse:0.10181\n[190]\tTest-rmse:0.10181\n[191]\tTest-rmse:0.10181\n[192]\tTest-rmse:0.10181\n[193]\tTest-rmse:0.10181\n[194]\tTest-rmse:0.10181\n[195]\tTest-rmse:0.10181\n[196]\tTest-rmse:0.10181\n[197]\tTest-rmse:0.10180\n[198]\tTest-rmse:0.10180\n[199]\tTest-rmse:0.10180\n[200]\tTest-rmse:0.10180\n[201]\tTest-rmse:0.10180\n[202]\tTest-rmse:0.10179\n[203]\tTest-rmse:0.10179\n[204]\tTest-rmse:0.10178\n[205]\tTest-rmse:0.10179\n[206]\tTest-rmse:0.10178\n[207]\tTest-rmse:0.10178\n[208]\tTest-rmse:0.10178\n[209]\tTest-rmse:0.10178\n[210]\tTest-rmse:0.10178\n[211]\tTest-rmse:0.10178\n[212]\tTest-rmse:0.10178\n[213]\tTest-rmse:0.10177\n[214]\tTest-rmse:0.10177\n[215]\tTest-rmse:0.10177\n[216]\tTest-rmse:0.10177\n[217]\tTest-rmse:0.10177\n[218]\tTest-rmse:0.10177\n[219]\tTest-rmse:0.10177\n[220]\tTest-rmse:0.10177\n[221]\tTest-rmse:0.10177\n[222]\tTest-rmse:0.10177\n[223]\tTest-rmse:0.10176\n[224]\tTest-rmse:0.10177\n[225]\tTest-rmse:0.10176\n[226]\tTest-rmse:0.10176\n[227]\tTest-rmse:0.10176\n[228]\tTest-rmse:0.10176\n[229]\tTest-rmse:0.10176\n[230]\tTest-rmse:0.10176\n[231]\tTest-rmse:0.10176\n[232]\tTest-rmse:0.10176\n[233]\tTest-rmse:0.10176\n[234]\tTest-rmse:0.10176\n[235]\tTest-rmse:0.10176\n[236]\tTest-rmse:0.10176\n[237]\tTest-rmse:0.10176\n[238]\tTest-rmse:0.10176\n[239]\tTest-rmse:0.10176\n[240]\tTest-rmse:0.10176\n[241]\tTest-rmse:0.10176\n[242]\tTest-rmse:0.10176\n[243]\tTest-rmse:0.10176\n[244]\tTest-rmse:0.10176\n[245]\tTest-rmse:0.10176\n[246]\tTest-rmse:0.10176\n[247]\tTest-rmse:0.10176\n[248]\tTest-rmse:0.10176\n[249]\tTest-rmse:0.10175\n[250]\tTest-rmse:0.10176\n[251]\tTest-rmse:0.10175\n[252]\tTest-rmse:0.10175\n[253]\tTest-rmse:0.10175\n[254]\tTest-rmse:0.10175\n[255]\tTest-rmse:0.10175\n[256]\tTest-rmse:0.10176\n[257]\tTest-rmse:0.10175\n[258]\tTest-rmse:0.10175\n[259]\tTest-rmse:0.10175\n[260]\tTest-rmse:0.10175\n[261]\tTest-rmse:0.10175\n[262]\tTest-rmse:0.10175\n[263]\tTest-rmse:0.10175\n[264]\tTest-rmse:0.10175\n[265]\tTest-rmse:0.10175\n[266]\tTest-rmse:0.10175\n[267]\tTest-rmse:0.10174\n[268]\tTest-rmse:0.10174\n[269]\tTest-rmse:0.10174\n[270]\tTest-rmse:0.10174\n[271]\tTest-rmse:0.10174\n[272]\tTest-rmse:0.10174\n[273]\tTest-rmse:0.10174\n[274]\tTest-rmse:0.10174\n[275]\tTest-rmse:0.10174\n[276]\tTest-rmse:0.10174\n[277]\tTest-rmse:0.10174\n[278]\tTest-rmse:0.10174\n[279]\tTest-rmse:0.10174\n[280]\tTest-rmse:0.10174\n[281]\tTest-rmse:0.10174\n[282]\tTest-rmse:0.10174\n[283]\tTest-rmse:0.10174\n[284]\tTest-rmse:0.10174\n[285]\tTest-rmse:0.10173\n[286]\tTest-rmse:0.10173\n[287]\tTest-rmse:0.10173\n[288]\tTest-rmse:0.10173\n[289]\tTest-rmse:0.10173\n[290]\tTest-rmse:0.10173\n[291]\tTest-rmse:0.10173\n[292]\tTest-rmse:0.10173\n[293]\tTest-rmse:0.10173\n[294]\tTest-rmse:0.10173\n[295]\tTest-rmse:0.10173\n[296]\tTest-rmse:0.10173\n[297]\tTest-rmse:0.10173\n[298]\tTest-rmse:0.10173\n[299]\tTest-rmse:0.10172\n[300]\tTest-rmse:0.10172\n[301]\tTest-rmse:0.10173\n[302]\tTest-rmse:0.10172\n[303]\tTest-rmse:0.10173\n[304]\tTest-rmse:0.10173\n[305]\tTest-rmse:0.10173\n[306]\tTest-rmse:0.10172\n[307]\tTest-rmse:0.10172\n[308]\tTest-rmse:0.10172\n[309]\tTest-rmse:0.10172\n[310]\tTest-rmse:0.10172\n[311]\tTest-rmse:0.10172\n[312]\tTest-rmse:0.10172\n[313]\tTest-rmse:0.10171\n[314]\tTest-rmse:0.10171\n[315]\tTest-rmse:0.10171\n[316]\tTest-rmse:0.10171\n[317]\tTest-rmse:0.10171\n[318]\tTest-rmse:0.10171\n[319]\tTest-rmse:0.10171\n[320]\tTest-rmse:0.10171\n[321]\tTest-rmse:0.10171\n[322]\tTest-rmse:0.10171\n[323]\tTest-rmse:0.10171\n[324]\tTest-rmse:0.10171\n[325]\tTest-rmse:0.10171\n[326]\tTest-rmse:0.10171\n[327]\tTest-rmse:0.10171\n[328]\tTest-rmse:0.10171\n[329]\tTest-rmse:0.10171\n[330]\tTest-rmse:0.10171\n[331]\tTest-rmse:0.10171\n[332]\tTest-rmse:0.10171\n[333]\tTest-rmse:0.10171\n[334]\tTest-rmse:0.10171\n[335]\tTest-rmse:0.10170\n[336]\tTest-rmse:0.10171\n[337]\tTest-rmse:0.10170\n[338]\tTest-rmse:0.10171\n[339]\tTest-rmse:0.10170\n[340]\tTest-rmse:0.10170\n[341]\tTest-rmse:0.10170\n[342]\tTest-rmse:0.10170\n[343]\tTest-rmse:0.10170\n[344]\tTest-rmse:0.10170\n[345]\tTest-rmse:0.10170\n[346]\tTest-rmse:0.10170\n[347]\tTest-rmse:0.10170\n[348]\tTest-rmse:0.10170\n[349]\tTest-rmse:0.10170\n[350]\tTest-rmse:0.10170\n[351]\tTest-rmse:0.10170\n[352]\tTest-rmse:0.10170\n[353]\tTest-rmse:0.10170\n[354]\tTest-rmse:0.10170\n[355]\tTest-rmse:0.10170\n[356]\tTest-rmse:0.10170\n[357]\tTest-rmse:0.10170\n[358]\tTest-rmse:0.10170\n[359]\tTest-rmse:0.10170\n[360]\tTest-rmse:0.10170\n[361]\tTest-rmse:0.10170\n[362]\tTest-rmse:0.10170\n[363]\tTest-rmse:0.10170\n[364]\tTest-rmse:0.10169\n[365]\tTest-rmse:0.10169\n[366]\tTest-rmse:0.10169\n[367]\tTest-rmse:0.10170\n[368]\tTest-rmse:0.10170\n[369]\tTest-rmse:0.10170\n[370]\tTest-rmse:0.10170\n[371]\tTest-rmse:0.10170\n[372]\tTest-rmse:0.10169\n[373]\tTest-rmse:0.10170\n[374]\tTest-rmse:0.10170\n[375]\tTest-rmse:0.10169\n[376]\tTest-rmse:0.10170\n[377]\tTest-rmse:0.10170\n[378]\tTest-rmse:0.10169\n[379]\tTest-rmse:0.10169\n[380]\tTest-rmse:0.10169\n[381]\tTest-rmse:0.10169\n[382]\tTest-rmse:0.10169\n[383]\tTest-rmse:0.10169\n[384]\tTest-rmse:0.10169\n[385]\tTest-rmse:0.10169\n[386]\tTest-rmse:0.10169\n[387]\tTest-rmse:0.10169\n[388]\tTest-rmse:0.10169\n[389]\tTest-rmse:0.10169\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Best MAE: {:.6f} in {} rounds\".format(model.best_score, model.best_iteration+1))","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:28:18.932297Z","iopub.execute_input":"2024-04-12T07:28:18.932818Z","iopub.status.idle":"2024-04-12T07:28:18.940106Z","shell.execute_reply.started":"2024-04-12T07:28:18.932778Z","shell.execute_reply":"2024-04-12T07:28:18.938604Z"},"trusted":true},"execution_count":136,"outputs":[{"name":"stdout","text":"Best MAE: 0.101688 in 381 rounds\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Prediction with best model\ny_pred = 0\ny_pred += model.predict(dtest)\n\nprint('\\nFirst XGBoost predictinos:')\nprint(pd.DataFrame(y_pred).head())","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:28:46.584003Z","iopub.execute_input":"2024-04-12T07:28:46.584482Z","iopub.status.idle":"2024-04-12T07:28:46.723523Z","shell.execute_reply.started":"2024-04-12T07:28:46.584447Z","shell.execute_reply":"2024-04-12T07:28:46.722574Z"},"trusted":true},"execution_count":137,"outputs":[{"name":"stdout","text":"\nFirst XGBoost predictinos:\n          0\n0  0.017602\n1  0.010687\n2  0.014579\n3  0.007871\n4  0.005573\n","output_type":"stream"}]},{"cell_type":"code","source":"xgb.plot_importance(model)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:27:49.868047Z","iopub.execute_input":"2024-04-12T04:27:49.868878Z","iopub.status.idle":"2024-04-12T04:27:50.638686Z","shell.execute_reply.started":"2024-04-12T04:27:49.868833Z","shell.execute_reply":"2024-04-12T04:27:50.637667Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"xgb.plot_tree(model, num_trees=2)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:27:50.639718Z","iopub.execute_input":"2024-04-12T04:27:50.640028Z","iopub.status.idle":"2024-04-12T04:27:53.298518Z","shell.execute_reply.started":"2024-04-12T04:27:50.640000Z","shell.execute_reply":"2024-04-12T04:27:53.297288Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"xgb.to_graphviz(model, num_trees=2)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T04:27:53.301273Z","iopub.execute_input":"2024-04-12T04:27:53.302028Z","iopub.status.idle":"2024-04-12T04:27:53.365173Z","shell.execute_reply.started":"2024-04-12T04:27:53.301987Z","shell.execute_reply":"2024-04-12T04:27:53.363928Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# import xgboost\n# from sklearn.model_selection import GridSearchCV\n# xgb1 = xgboost.XGBRegressor()\n# parameters = {'nthread':[4], #when use hyperthread, xgboost may become slower\n#               'objective':['reg:linear'],\n#               'learning_rate': [.03, 0.05, .07], #so called `eta` value\n#               'max_depth': [5, 6, 7],\n#               'min_child_weight': [4],\n#               'silent': [1],\n#               'subsample': [0.7],\n#               'colsample_bytree': [0.7],\n#               'n_estimators': [500]}\n\n# xgb_grid = GridSearchCV(xgb1,\n#                         parameters,\n#                         cv = 2,\n#                         n_jobs = 5,\n#                         verbose=True)\n\n# xgb_grid.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T12:49:29.056871Z","iopub.execute_input":"2024-04-11T12:49:29.057565Z","iopub.status.idle":"2024-04-11T13:21:49.437843Z","shell.execute_reply.started":"2024-04-11T12:49:29.057522Z","shell.execute_reply":"2024-04-11T13:21:49.434968Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# print(xgb_grid.best_score_)\n# print(xgb_grid.best_params_)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:21:55.534365Z","iopub.execute_input":"2024-04-11T13:21:55.534838Z","iopub.status.idle":"2024-04-11T13:21:55.540623Z","shell.execute_reply.started":"2024-04-11T13:21:55.534793Z","shell.execute_reply":"2024-04-11T13:21:55.539682Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # xgb_best = xgboost.XGBRegressor(xgb_grid.best_params_)\n# # xgb_best.fit(X_train,y_train)\n# xgb_final = xgb_grid.best_estimator_.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T13:26:43.072794Z","iopub.execute_input":"2024-04-11T13:26:43.073210Z","iopub.status.idle":"2024-04-11T13:27:10.113898Z","shell.execute_reply.started":"2024-04-11T13:26:43.073181Z","shell.execute_reply":"2024-04-11T13:27:10.112978Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## STEP 5 : Submission","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'ParcelId': test_df['ParcelId'],\n})\ntest_dates = {\n    '201610': pd.Timestamp('2016-09-30'),\n    '201611': pd.Timestamp('2016-10-31'),\n    '201612': pd.Timestamp('2016-11-30'),\n    '201710': pd.Timestamp('2017-09-30'),\n    '201711': pd.Timestamp('2017-10-31'),\n    '201712': pd.Timestamp('2017-11-30')\n}\nfor label, test_date in test_dates.items():\n    print(\"Predicting for: %s ... \" % (label))\n    submission[label] = y_pred[0]\n    \nsubmission.to_csv('submission_final3.csv', float_format='%.6f',index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:33:41.448791Z","iopub.execute_input":"2024-04-12T07:33:41.449235Z","iopub.status.idle":"2024-04-12T07:34:49.593722Z","shell.execute_reply.started":"2024-04-12T07:33:41.449203Z","shell.execute_reply":"2024-04-12T07:34:49.592209Z"},"trusted":true},"execution_count":141,"outputs":[{"name":"stdout","text":"Predicting for: 201610 ... \nPredicting for: 201611 ... \nPredicting for: 201612 ... \nPredicting for: 201710 ... \nPredicting for: 201711 ... \nPredicting for: 201712 ... \n","output_type":"stream"}]},{"cell_type":"code","source":"#test_dates.items()\nsubmission.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:36:38.688625Z","iopub.execute_input":"2024-04-12T07:36:38.689139Z","iopub.status.idle":"2024-04-12T07:36:38.709911Z","shell.execute_reply.started":"2024-04-12T07:36:38.689106Z","shell.execute_reply":"2024-04-12T07:36:38.708502Z"},"trusted":true},"execution_count":142,"outputs":[{"execution_count":142,"output_type":"execute_result","data":{"text/plain":"   ParcelId    201610    201611    201612    201710    201711    201712\n0  10754147  0.017602  0.017602  0.017602  0.017602  0.017602  0.017602\n1  10759547  0.017602  0.017602  0.017602  0.017602  0.017602  0.017602\n2  10843547  0.017602  0.017602  0.017602  0.017602  0.017602  0.017602\n3  10859147  0.017602  0.017602  0.017602  0.017602  0.017602  0.017602\n4  10879947  0.017602  0.017602  0.017602  0.017602  0.017602  0.017602","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ParcelId</th>\n      <th>201610</th>\n      <th>201611</th>\n      <th>201612</th>\n      <th>201710</th>\n      <th>201711</th>\n      <th>201712</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10754147</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10759547</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10843547</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10859147</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10879947</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n      <td>0.017602</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}