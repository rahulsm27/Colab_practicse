{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-11T04:08:58.012942Z","iopub.execute_input":"2024-04-11T04:08:58.013481Z","iopub.status.idle":"2024-04-11T04:08:58.019735Z","shell.execute_reply.started":"2024-04-11T04:08:58.013443Z","shell.execute_reply":"2024-04-11T04:08:58.018424Z"},"trusted":true},"execution_count":103,"outputs":[]},{"cell_type":"markdown","source":"## STEP1 : Import Libraries and Load Dataset","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\n\n\nfrom tqdm import tqdm\nimport gc\n\n\nfrom catboost import CatBoostRegressor\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load the properties dataset\n# This fiel constains properties with their home features for their respective year\n\nprint('Loading Properties dataset\")\nproperties2016 = pd.read_csv('/kaggle/input/zillow-prize-1/properties_2016.csv', low_memory = False)\nproperties2017 = pd.read_csv('/kaggle/input/zillow-prize-1/properties_2017.csv', low_memory = False)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:09:40.901413Z","iopub.execute_input":"2024-04-11T04:09:40.901933Z","iopub.status.idle":"2024-04-11T04:11:09.759066Z","shell.execute_reply.started":"2024-04-11T04:09:40.901901Z","shell.execute_reply":"2024-04-11T04:11:09.757727Z"},"trusted":true},"execution_count":106,"outputs":[{"name":"stdout","text":"Loading Properties ...\n","output_type":"stream"}]},{"cell_type":"code","source":"# The file contain transaction details i.e. the date of sale and sale value\n#train_2016.csv - the training set with transactions from 1/1/2016 to 12/31/2016\n#train_2017.csv - the training set with transactions from 1/1/2017 to 9/15/2017\n\nprint('Loading transaction dataset')\ntrain2016 = pd.read_csv('/kaggle/input/zillow-prize-1/train_2016_v2.csv', parse_dates=['transactiondate'], low_memory=False)\ntrain2017 = pd.read_csv('/kaggle/input/zillow-prize-1/train_2017.csv', parse_dates=['transactiondate'], low_memory=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:04:01.298731Z","iopub.execute_input":"2024-04-11T04:04:01.299570Z","iopub.status.idle":"2024-04-11T04:04:01.509868Z","shell.execute_reply.started":"2024-04-11T04:04:01.299524Z","shell.execute_reply":"2024-04-11T04:04:01.508526Z"},"trusted":true},"execution_count":97,"outputs":[{"name":"stdout","text":"Loading Train ...\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"In this competition, Zillow is asking us to predict the \nlog-error between their Zestimate and the actual sale price, \ngiven all the features of a home. The log error is defined as\n\n𝑙𝑜𝑔𝑒𝑟𝑟𝑜𝑟=𝑙𝑜𝑔(𝑍𝑒𝑠𝑡𝑖𝑚𝑎𝑡𝑒)−𝑙𝑜𝑔(𝑆𝑎𝑙𝑒𝑃𝑟𝑖𝑐𝑒)","metadata":{}},{"cell_type":"code","source":"\n# We need to predict 6 time points for all properties: October 2016 (201610), \n#November 2016 (201611), December 2016 (201612), October 2017 (201710),\n#November 2017 (201711), and December 2017 (201712).\n\nprint('Loading submission sample file')\nsample_submission = pd.read_csv('/kaggle/input/zillow-prize-1/sample_submission.csv', low_memory = False)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:41.403669Z","iopub.execute_input":"2024-04-11T03:03:41.404186Z","iopub.status.idle":"2024-04-11T03:03:42.504647Z","shell.execute_reply.started":"2024-04-11T03:03:41.404143Z","shell.execute_reply":"2024-04-11T03:03:42.503305Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Loading Sample ...\n","output_type":"stream"}]},{"cell_type":"code","source":"sample_submission.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:31:09.755991Z","iopub.execute_input":"2024-04-11T04:31:09.756512Z","iopub.status.idle":"2024-04-11T04:31:09.772582Z","shell.execute_reply.started":"2024-04-11T04:31:09.756477Z","shell.execute_reply":"2024-04-11T04:31:09.771154Z"},"trusted":true},"execution_count":117,"outputs":[{"execution_count":117,"output_type":"execute_result","data":{"text/plain":"   ParcelId  201610  201611  201612  201710  201711  201712\n0  10754147       0       0       0       0       0       0\n1  10759547       0       0       0       0       0       0\n2  10843547       0       0       0       0       0       0\n3  10859147       0       0       0       0       0       0\n4  10879947       0       0       0       0       0       0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ParcelId</th>\n      <th>201610</th>\n      <th>201611</th>\n      <th>201612</th>\n      <th>201710</th>\n      <th>201711</th>\n      <th>201712</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10754147</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10759547</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10843547</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10859147</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10879947</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"len(sample_submission)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:31:20.809938Z","iopub.execute_input":"2024-04-11T04:31:20.811365Z","iopub.status.idle":"2024-04-11T04:31:20.819313Z","shell.execute_reply.started":"2024-04-11T04:31:20.811299Z","shell.execute_reply":"2024-04-11T04:31:20.817769Z"},"trusted":true},"execution_count":118,"outputs":[{"execution_count":118,"output_type":"execute_result","data":{"text/plain":"2985217"},"metadata":{}}]},{"cell_type":"markdown","source":"## STEP 2 : EDA &  Feature Engineering","metadata":{}},{"cell_type":"code","source":"# Lets check the records of properties dataset for 2016 record\nproperties2016.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:42.507348Z","iopub.execute_input":"2024-04-11T03:03:42.508368Z","iopub.status.idle":"2024-04-11T03:03:42.535232Z","shell.execute_reply.started":"2024-04-11T03:03:42.508331Z","shell.execute_reply":"2024-04-11T03:03:42.534022Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"   parcelid  airconditioningtypeid  architecturalstyletypeid  basementsqft  \\\n0  10754147                    NaN                       NaN           NaN   \n1  10759547                    NaN                       NaN           NaN   \n2  10843547                    NaN                       NaN           NaN   \n3  10859147                    NaN                       NaN           NaN   \n4  10879947                    NaN                       NaN           NaN   \n\n   bathroomcnt  bedroomcnt  buildingclasstypeid  buildingqualitytypeid  \\\n0          0.0         0.0                  NaN                    NaN   \n1          0.0         0.0                  NaN                    NaN   \n2          0.0         0.0                  NaN                    NaN   \n3          0.0         0.0                  3.0                    7.0   \n4          0.0         0.0                  4.0                    NaN   \n\n   calculatedbathnbr  decktypeid  ...  numberofstories  fireplaceflag  \\\n0                NaN         NaN  ...              NaN            NaN   \n1                NaN         NaN  ...              NaN            NaN   \n2                NaN         NaN  ...              NaN            NaN   \n3                NaN         NaN  ...              1.0            NaN   \n4                NaN         NaN  ...              NaN            NaN   \n\n   structuretaxvaluedollarcnt  taxvaluedollarcnt  assessmentyear  \\\n0                         NaN                9.0          2015.0   \n1                         NaN            27516.0          2015.0   \n2                    650756.0          1413387.0          2015.0   \n3                    571346.0          1156834.0          2015.0   \n4                    193796.0           433491.0          2015.0   \n\n   landtaxvaluedollarcnt  taxamount  taxdelinquencyflag  taxdelinquencyyear  \\\n0                    9.0        NaN                 NaN                 NaN   \n1                27516.0        NaN                 NaN                 NaN   \n2               762631.0   20800.37                 NaN                 NaN   \n3               585488.0   14557.57                 NaN                 NaN   \n4               239695.0    5725.17                 NaN                 NaN   \n\n   censustractandblock  \n0                  NaN  \n1                  NaN  \n2                  NaN  \n3                  NaN  \n4                  NaN  \n\n[5 rows x 58 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>parcelid</th>\n      <th>airconditioningtypeid</th>\n      <th>architecturalstyletypeid</th>\n      <th>basementsqft</th>\n      <th>bathroomcnt</th>\n      <th>bedroomcnt</th>\n      <th>buildingclasstypeid</th>\n      <th>buildingqualitytypeid</th>\n      <th>calculatedbathnbr</th>\n      <th>decktypeid</th>\n      <th>...</th>\n      <th>numberofstories</th>\n      <th>fireplaceflag</th>\n      <th>structuretaxvaluedollarcnt</th>\n      <th>taxvaluedollarcnt</th>\n      <th>assessmentyear</th>\n      <th>landtaxvaluedollarcnt</th>\n      <th>taxamount</th>\n      <th>taxdelinquencyflag</th>\n      <th>taxdelinquencyyear</th>\n      <th>censustractandblock</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10754147</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>9.0</td>\n      <td>2015.0</td>\n      <td>9.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10759547</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>27516.0</td>\n      <td>2015.0</td>\n      <td>27516.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10843547</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>650756.0</td>\n      <td>1413387.0</td>\n      <td>2015.0</td>\n      <td>762631.0</td>\n      <td>20800.37</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10859147</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>7.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>571346.0</td>\n      <td>1156834.0</td>\n      <td>2015.0</td>\n      <td>585488.0</td>\n      <td>14557.57</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10879947</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>193796.0</td>\n      <td>433491.0</td>\n      <td>2015.0</td>\n      <td>239695.0</td>\n      <td>5725.17</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 58 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# LEts check the size of the dataset\nproperties2016.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:14:33.824758Z","iopub.execute_input":"2024-04-11T04:14:33.825229Z","iopub.status.idle":"2024-04-11T04:14:33.832472Z","shell.execute_reply.started":"2024-04-11T04:14:33.825181Z","shell.execute_reply":"2024-04-11T04:14:33.831340Z"},"trusted":true},"execution_count":107,"outputs":[{"execution_count":107,"output_type":"execute_result","data":{"text/plain":"(2985217, 58)"},"metadata":{}}]},{"cell_type":"code","source":"properties2016.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:42.537092Z","iopub.execute_input":"2024-04-11T03:03:42.537783Z","iopub.status.idle":"2024-04-11T03:03:50.467800Z","shell.execute_reply.started":"2024-04-11T03:03:42.537747Z","shell.execute_reply":"2024-04-11T03:03:50.466441Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"           parcelid  airconditioningtypeid  architecturalstyletypeid  \\\ncount  2.985217e+06          811519.000000               6061.000000   \nmean   1.332586e+07               1.931166                  7.202607   \nstd    7.909966e+06               3.148587                  2.436290   \nmin    1.071172e+07               1.000000                  2.000000   \n25%    1.164371e+07               1.000000                  7.000000   \n50%    1.254509e+07               1.000000                  7.000000   \n75%    1.409712e+07               1.000000                  7.000000   \nmax    1.696019e+08              13.000000                 27.000000   \n\n       basementsqft   bathroomcnt    bedroomcnt  buildingclasstypeid  \\\ncount   1628.000000  2.973755e+06  2.973767e+06         12629.000000   \nmean     646.883292  2.209143e+00  3.088949e+00             3.725948   \nstd      538.793473  1.077754e+00  1.275859e+00             0.501700   \nmin       20.000000  0.000000e+00  0.000000e+00             1.000000   \n25%      272.000000  2.000000e+00  2.000000e+00             3.000000   \n50%      534.000000  2.000000e+00  3.000000e+00             4.000000   \n75%      847.250000  3.000000e+00  4.000000e+00             4.000000   \nmax     8516.000000  2.000000e+01  2.000000e+01             5.000000   \n\n       buildingqualitytypeid  calculatedbathnbr  decktypeid  ...  \\\ncount           1.938488e+06       2.856305e+06     17096.0  ...   \nmean            5.784787e+00       2.299263e+00        66.0  ...   \nstd             1.805352e+00       1.000736e+00         0.0  ...   \nmin             1.000000e+00       1.000000e+00        66.0  ...   \n25%             4.000000e+00       2.000000e+00        66.0  ...   \n50%             7.000000e+00       2.000000e+00        66.0  ...   \n75%             7.000000e+00       3.000000e+00        66.0  ...   \nmax             1.200000e+01       2.000000e+01        66.0  ...   \n\n       yardbuildingsqft26     yearbuilt  numberofstories  \\\ncount         2647.000000  2.925289e+06    682069.000000   \nmean           278.296562  1.964262e+03         1.401464   \nstd            369.731508  2.344132e+01         0.539076   \nmin             10.000000  1.801000e+03         1.000000   \n25%             96.000000  1.950000e+03         1.000000   \n50%            168.000000  1.963000e+03         1.000000   \n75%            320.000000  1.981000e+03         2.000000   \nmax           6141.000000  2.015000e+03        41.000000   \n\n       structuretaxvaluedollarcnt  taxvaluedollarcnt  assessmentyear  \\\ncount                2.930235e+06       2.942667e+06    2.973778e+06   \nmean                 1.708836e+05       4.204790e+05    2.014999e+03   \nstd                  4.020683e+05       7.263467e+05    3.683161e-02   \nmin                  1.000000e+00       1.000000e+00    2.000000e+03   \n25%                  7.480000e+04       1.796750e+05    2.015000e+03   \n50%                  1.225900e+05       3.060860e+05    2.015000e+03   \n75%                  1.968890e+05       4.880000e+05    2.015000e+03   \nmax                  2.514860e+08       2.827860e+08    2.016000e+03   \n\n       landtaxvaluedollarcnt     taxamount  taxdelinquencyyear  \\\ncount           2.917484e+06  2.953967e+06        56464.000000   \nmean            2.524780e+05  5.377607e+03           13.892409   \nstd             4.450132e+05  9.183107e+03            2.581006   \nmin             1.000000e+00  1.340000e+00            0.000000   \n25%             7.483600e+04  2.461070e+03           14.000000   \n50%             1.670420e+05  3.991780e+03           14.000000   \n75%             3.069180e+05  6.201005e+03           15.000000   \nmax             9.024622e+07  3.458861e+06           99.000000   \n\n       censustractandblock  \ncount         2.910091e+06  \nmean          6.048431e+13  \nstd           3.249035e+11  \nmin          -1.000000e+00  \n25%           6.037400e+13  \n50%           6.037572e+13  \n75%           6.059042e+13  \nmax           4.830301e+14  \n\n[8 rows x 53 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>parcelid</th>\n      <th>airconditioningtypeid</th>\n      <th>architecturalstyletypeid</th>\n      <th>basementsqft</th>\n      <th>bathroomcnt</th>\n      <th>bedroomcnt</th>\n      <th>buildingclasstypeid</th>\n      <th>buildingqualitytypeid</th>\n      <th>calculatedbathnbr</th>\n      <th>decktypeid</th>\n      <th>...</th>\n      <th>yardbuildingsqft26</th>\n      <th>yearbuilt</th>\n      <th>numberofstories</th>\n      <th>structuretaxvaluedollarcnt</th>\n      <th>taxvaluedollarcnt</th>\n      <th>assessmentyear</th>\n      <th>landtaxvaluedollarcnt</th>\n      <th>taxamount</th>\n      <th>taxdelinquencyyear</th>\n      <th>censustractandblock</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>2.985217e+06</td>\n      <td>811519.000000</td>\n      <td>6061.000000</td>\n      <td>1628.000000</td>\n      <td>2.973755e+06</td>\n      <td>2.973767e+06</td>\n      <td>12629.000000</td>\n      <td>1.938488e+06</td>\n      <td>2.856305e+06</td>\n      <td>17096.0</td>\n      <td>...</td>\n      <td>2647.000000</td>\n      <td>2.925289e+06</td>\n      <td>682069.000000</td>\n      <td>2.930235e+06</td>\n      <td>2.942667e+06</td>\n      <td>2.973778e+06</td>\n      <td>2.917484e+06</td>\n      <td>2.953967e+06</td>\n      <td>56464.000000</td>\n      <td>2.910091e+06</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.332586e+07</td>\n      <td>1.931166</td>\n      <td>7.202607</td>\n      <td>646.883292</td>\n      <td>2.209143e+00</td>\n      <td>3.088949e+00</td>\n      <td>3.725948</td>\n      <td>5.784787e+00</td>\n      <td>2.299263e+00</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>278.296562</td>\n      <td>1.964262e+03</td>\n      <td>1.401464</td>\n      <td>1.708836e+05</td>\n      <td>4.204790e+05</td>\n      <td>2.014999e+03</td>\n      <td>2.524780e+05</td>\n      <td>5.377607e+03</td>\n      <td>13.892409</td>\n      <td>6.048431e+13</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.909966e+06</td>\n      <td>3.148587</td>\n      <td>2.436290</td>\n      <td>538.793473</td>\n      <td>1.077754e+00</td>\n      <td>1.275859e+00</td>\n      <td>0.501700</td>\n      <td>1.805352e+00</td>\n      <td>1.000736e+00</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>369.731508</td>\n      <td>2.344132e+01</td>\n      <td>0.539076</td>\n      <td>4.020683e+05</td>\n      <td>7.263467e+05</td>\n      <td>3.683161e-02</td>\n      <td>4.450132e+05</td>\n      <td>9.183107e+03</td>\n      <td>2.581006</td>\n      <td>3.249035e+11</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.071172e+07</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>20.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>1.000000</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>10.000000</td>\n      <td>1.801000e+03</td>\n      <td>1.000000</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>2.000000e+03</td>\n      <td>1.000000e+00</td>\n      <td>1.340000e+00</td>\n      <td>0.000000</td>\n      <td>-1.000000e+00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.164371e+07</td>\n      <td>1.000000</td>\n      <td>7.000000</td>\n      <td>272.000000</td>\n      <td>2.000000e+00</td>\n      <td>2.000000e+00</td>\n      <td>3.000000</td>\n      <td>4.000000e+00</td>\n      <td>2.000000e+00</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>96.000000</td>\n      <td>1.950000e+03</td>\n      <td>1.000000</td>\n      <td>7.480000e+04</td>\n      <td>1.796750e+05</td>\n      <td>2.015000e+03</td>\n      <td>7.483600e+04</td>\n      <td>2.461070e+03</td>\n      <td>14.000000</td>\n      <td>6.037400e+13</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.254509e+07</td>\n      <td>1.000000</td>\n      <td>7.000000</td>\n      <td>534.000000</td>\n      <td>2.000000e+00</td>\n      <td>3.000000e+00</td>\n      <td>4.000000</td>\n      <td>7.000000e+00</td>\n      <td>2.000000e+00</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>168.000000</td>\n      <td>1.963000e+03</td>\n      <td>1.000000</td>\n      <td>1.225900e+05</td>\n      <td>3.060860e+05</td>\n      <td>2.015000e+03</td>\n      <td>1.670420e+05</td>\n      <td>3.991780e+03</td>\n      <td>14.000000</td>\n      <td>6.037572e+13</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.409712e+07</td>\n      <td>1.000000</td>\n      <td>7.000000</td>\n      <td>847.250000</td>\n      <td>3.000000e+00</td>\n      <td>4.000000e+00</td>\n      <td>4.000000</td>\n      <td>7.000000e+00</td>\n      <td>3.000000e+00</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>320.000000</td>\n      <td>1.981000e+03</td>\n      <td>2.000000</td>\n      <td>1.968890e+05</td>\n      <td>4.880000e+05</td>\n      <td>2.015000e+03</td>\n      <td>3.069180e+05</td>\n      <td>6.201005e+03</td>\n      <td>15.000000</td>\n      <td>6.059042e+13</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.696019e+08</td>\n      <td>13.000000</td>\n      <td>27.000000</td>\n      <td>8516.000000</td>\n      <td>2.000000e+01</td>\n      <td>2.000000e+01</td>\n      <td>5.000000</td>\n      <td>1.200000e+01</td>\n      <td>2.000000e+01</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>6141.000000</td>\n      <td>2.015000e+03</td>\n      <td>41.000000</td>\n      <td>2.514860e+08</td>\n      <td>2.827860e+08</td>\n      <td>2.016000e+03</td>\n      <td>9.024622e+07</td>\n      <td>3.458861e+06</td>\n      <td>99.000000</td>\n      <td>4.830301e+14</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 53 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"properties2016.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:50.469486Z","iopub.execute_input":"2024-04-11T03:03:50.469873Z","iopub.status.idle":"2024-04-11T03:03:50.485106Z","shell.execute_reply.started":"2024-04-11T03:03:50.469841Z","shell.execute_reply":"2024-04-11T03:03:50.483918Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2985217 entries, 0 to 2985216\nData columns (total 58 columns):\n #   Column                        Dtype  \n---  ------                        -----  \n 0   parcelid                      int64  \n 1   airconditioningtypeid         float64\n 2   architecturalstyletypeid      float64\n 3   basementsqft                  float64\n 4   bathroomcnt                   float64\n 5   bedroomcnt                    float64\n 6   buildingclasstypeid           float64\n 7   buildingqualitytypeid         float64\n 8   calculatedbathnbr             float64\n 9   decktypeid                    float64\n 10  finishedfloor1squarefeet      float64\n 11  calculatedfinishedsquarefeet  float64\n 12  finishedsquarefeet12          float64\n 13  finishedsquarefeet13          float64\n 14  finishedsquarefeet15          float64\n 15  finishedsquarefeet50          float64\n 16  finishedsquarefeet6           float64\n 17  fips                          float64\n 18  fireplacecnt                  float64\n 19  fullbathcnt                   float64\n 20  garagecarcnt                  float64\n 21  garagetotalsqft               float64\n 22  hashottuborspa                object \n 23  heatingorsystemtypeid         float64\n 24  latitude                      float64\n 25  longitude                     float64\n 26  lotsizesquarefeet             float64\n 27  poolcnt                       float64\n 28  poolsizesum                   float64\n 29  pooltypeid10                  float64\n 30  pooltypeid2                   float64\n 31  pooltypeid7                   float64\n 32  propertycountylandusecode     object \n 33  propertylandusetypeid         float64\n 34  propertyzoningdesc            object \n 35  rawcensustractandblock        float64\n 36  regionidcity                  float64\n 37  regionidcounty                float64\n 38  regionidneighborhood          float64\n 39  regionidzip                   float64\n 40  roomcnt                       float64\n 41  storytypeid                   float64\n 42  threequarterbathnbr           float64\n 43  typeconstructiontypeid        float64\n 44  unitcnt                       float64\n 45  yardbuildingsqft17            float64\n 46  yardbuildingsqft26            float64\n 47  yearbuilt                     float64\n 48  numberofstories               float64\n 49  fireplaceflag                 object \n 50  structuretaxvaluedollarcnt    float64\n 51  taxvaluedollarcnt             float64\n 52  assessmentyear                float64\n 53  landtaxvaluedollarcnt         float64\n 54  taxamount                     float64\n 55  taxdelinquencyflag            object \n 56  taxdelinquencyyear            float64\n 57  censustractandblock           float64\ndtypes: float64(52), int64(1), object(5)\nmemory usage: 1.3+ GB\n","output_type":"stream"}]},{"cell_type":"code","source":"properties2016.isnull().sum()/len(properties2016)*100","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:50.486536Z","iopub.execute_input":"2024-04-11T03:03:50.486878Z","iopub.status.idle":"2024-04-11T03:03:51.254009Z","shell.execute_reply.started":"2024-04-11T03:03:50.486852Z","shell.execute_reply":"2024-04-11T03:03:51.252811Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"parcelid                         0.000000\nairconditioningtypeid           72.815410\narchitecturalstyletypeid        99.796966\nbasementsqft                    99.945465\nbathroomcnt                      0.383959\nbedroomcnt                       0.383557\nbuildingclasstypeid             99.576949\nbuildingqualitytypeid           35.063749\ncalculatedbathnbr                4.318346\ndecktypeid                      99.427311\nfinishedfloor1squarefeet        93.209304\ncalculatedfinishedsquarefeet     1.861339\nfinishedsquarefeet12             9.246664\nfinishedsquarefeet13            99.743000\nfinishedsquarefeet15            93.608572\nfinishedsquarefeet50            93.209304\nfinishedsquarefeet6             99.263002\nfips                             0.383121\nfireplacecnt                    89.527160\nfullbathcnt                      4.318346\ngaragecarcnt                    70.411967\ngaragetotalsqft                 70.411967\nhashottuborspa                  97.688141\nheatingorsystemtypeid           39.488453\nlatitude                         0.383121\nlongitude                        0.383121\nlotsizesquarefeet                9.248875\npoolcnt                         82.663438\npoolsizesum                     99.063385\npooltypeid10                    98.762603\npooltypeid2                     98.925539\npooltypeid7                     83.737899\npropertycountylandusecode        0.411260\npropertylandusetypeid            0.383121\npropertyzoningdesc              33.719090\nrawcensustractandblock           0.383121\nregionidcity                     2.105207\nregionidcounty                   0.383121\nregionidneighborhood            61.262381\nregionidzip                      0.468308\nroomcnt                          0.384394\nstorytypeid                     99.945599\nthreequarterbathnbr             89.560859\ntypeconstructiontypeid          99.773986\nunitcnt                         33.757244\nyardbuildingsqft17              97.308236\nyardbuildingsqft26              99.911330\nyearbuilt                        2.007492\nnumberofstories                 77.151778\nfireplaceflag                   99.827048\nstructuretaxvaluedollarcnt       1.841809\ntaxvaluedollarcnt                1.425357\nassessmentyear                   0.383188\nlandtaxvaluedollarcnt            2.268947\ntaxamount                        1.046825\ntaxdelinquencyflag              98.108613\ntaxdelinquencyyear              98.108546\ncensustractandblock              2.516601\ndtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"properties2017.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:51.255476Z","iopub.execute_input":"2024-04-11T03:03:51.255907Z","iopub.status.idle":"2024-04-11T03:03:51.289381Z","shell.execute_reply.started":"2024-04-11T03:03:51.255867Z","shell.execute_reply":"2024-04-11T03:03:51.288123Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"   parcelid  airconditioningtypeid  architecturalstyletypeid  basementsqft  \\\n0  10754147                    NaN                       NaN           NaN   \n1  10759547                    NaN                       NaN           NaN   \n2  10843547                    NaN                       NaN           NaN   \n3  10859147                    NaN                       NaN           NaN   \n4  10879947                    NaN                       NaN           NaN   \n\n   bathroomcnt  bedroomcnt  buildingclasstypeid  buildingqualitytypeid  \\\n0          0.0         0.0                  NaN                    NaN   \n1          0.0         0.0                  NaN                    NaN   \n2          0.0         0.0                  5.0                    NaN   \n3          0.0         0.0                  3.0                    6.0   \n4          0.0         0.0                  4.0                    NaN   \n\n   calculatedbathnbr  decktypeid  ...  numberofstories  fireplaceflag  \\\n0                NaN         NaN  ...              NaN            NaN   \n1                NaN         NaN  ...              NaN            NaN   \n2                NaN         NaN  ...              1.0            NaN   \n3                NaN         NaN  ...              1.0            NaN   \n4                NaN         NaN  ...              1.0            NaN   \n\n   structuretaxvaluedollarcnt  taxvaluedollarcnt  assessmentyear  \\\n0                         NaN                9.0          2016.0   \n1                         NaN            27516.0          2015.0   \n2                    660680.0          1434941.0          2016.0   \n3                    580059.0          1174475.0          2016.0   \n4                    196751.0           440101.0          2016.0   \n\n   landtaxvaluedollarcnt  taxamount  taxdelinquencyflag  taxdelinquencyyear  \\\n0                    9.0        NaN                 NaN                 NaN   \n1                27516.0        NaN                 NaN                 NaN   \n2               774261.0   20800.37                 NaN                 NaN   \n3               594416.0   14557.57                 NaN                 NaN   \n4               243350.0    5725.17                 NaN                 NaN   \n\n   censustractandblock  \n0                  NaN  \n1                  NaN  \n2                  NaN  \n3                  NaN  \n4                  NaN  \n\n[5 rows x 58 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>parcelid</th>\n      <th>airconditioningtypeid</th>\n      <th>architecturalstyletypeid</th>\n      <th>basementsqft</th>\n      <th>bathroomcnt</th>\n      <th>bedroomcnt</th>\n      <th>buildingclasstypeid</th>\n      <th>buildingqualitytypeid</th>\n      <th>calculatedbathnbr</th>\n      <th>decktypeid</th>\n      <th>...</th>\n      <th>numberofstories</th>\n      <th>fireplaceflag</th>\n      <th>structuretaxvaluedollarcnt</th>\n      <th>taxvaluedollarcnt</th>\n      <th>assessmentyear</th>\n      <th>landtaxvaluedollarcnt</th>\n      <th>taxamount</th>\n      <th>taxdelinquencyflag</th>\n      <th>taxdelinquencyyear</th>\n      <th>censustractandblock</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10754147</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>9.0</td>\n      <td>2016.0</td>\n      <td>9.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10759547</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>27516.0</td>\n      <td>2015.0</td>\n      <td>27516.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10843547</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>660680.0</td>\n      <td>1434941.0</td>\n      <td>2016.0</td>\n      <td>774261.0</td>\n      <td>20800.37</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10859147</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>6.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>580059.0</td>\n      <td>1174475.0</td>\n      <td>2016.0</td>\n      <td>594416.0</td>\n      <td>14557.57</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10879947</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>196751.0</td>\n      <td>440101.0</td>\n      <td>2016.0</td>\n      <td>243350.0</td>\n      <td>5725.17</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 58 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# LEts check the size of the dataset\nproperties2017.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:15:00.645580Z","iopub.execute_input":"2024-04-11T04:15:00.646959Z","iopub.status.idle":"2024-04-11T04:15:00.654775Z","shell.execute_reply.started":"2024-04-11T04:15:00.646902Z","shell.execute_reply":"2024-04-11T04:15:00.653164Z"},"trusted":true},"execution_count":108,"outputs":[{"execution_count":108,"output_type":"execute_result","data":{"text/plain":"(2985217, 58)"},"metadata":{}}]},{"cell_type":"code","source":"properties2017.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:51.291018Z","iopub.execute_input":"2024-04-11T03:03:51.291451Z","iopub.status.idle":"2024-04-11T03:03:59.037625Z","shell.execute_reply.started":"2024-04-11T03:03:51.291420Z","shell.execute_reply":"2024-04-11T03:03:59.036287Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"           parcelid  airconditioningtypeid  architecturalstyletypeid  \\\ncount  2.985217e+06          815362.000000               6061.000000   \nmean   1.332586e+07               1.945723                  7.202607   \nstd    7.909966e+06               3.160507                  2.436290   \nmin    1.071172e+07               1.000000                  2.000000   \n25%    1.164371e+07               1.000000                  7.000000   \n50%    1.254509e+07               1.000000                  7.000000   \n75%    1.409712e+07               1.000000                  7.000000   \nmax    1.696019e+08              13.000000                 27.000000   \n\n       basementsqft   bathroomcnt    bedroomcnt  buildingclasstypeid  \\\ncount   1627.000000  2.982260e+06  2.982272e+06         12731.000000   \nmean     647.220652  2.216196e+00  3.093362e+00             3.734742   \nstd      538.787104  1.078250e+00  1.271569e+00             0.500371   \nmin       20.000000  0.000000e+00  0.000000e+00             1.000000   \n25%      272.000000  2.000000e+00  2.000000e+00             3.000000   \n50%      535.000000  2.000000e+00  3.000000e+00             4.000000   \n75%      847.500000  3.000000e+00  4.000000e+00             4.000000   \nmax     8516.000000  3.200000e+01  2.500000e+01             5.000000   \n\n       buildingqualitytypeid  calculatedbathnbr  decktypeid  ...  \\\ncount           1.941395e+06       2.868061e+06     17379.0  ...   \nmean            6.280822e+00       2.303826e+00        66.0  ...   \nstd             1.729923e+00       1.003243e+00         0.0  ...   \nmin             1.000000e+00       1.000000e+00        66.0  ...   \n25%             5.000000e+00       2.000000e+00        66.0  ...   \n50%             6.000000e+00       2.000000e+00        66.0  ...   \n75%             8.000000e+00       3.000000e+00        66.0  ...   \nmax             1.200000e+01       3.200000e+01        66.0  ...   \n\n       yardbuildingsqft26     yearbuilt  numberofstories  \\\ncount         2646.000000  2.937384e+06    685676.000000   \nmean           278.365457  1.964438e+03         1.400956   \nstd            369.784399  2.364428e+01         0.539056   \nmin             10.000000  1.801000e+03         1.000000   \n25%             96.000000  1.950000e+03         1.000000   \n50%            168.000000  1.963000e+03         1.000000   \n75%            320.000000  1.981000e+03         2.000000   \nmax           6141.000000  2.016000e+03        41.000000   \n\n       structuretaxvaluedollarcnt  taxvaluedollarcnt  assessmentyear  \\\ncount                2.938753e+06       2.950951e+06    2.982284e+06   \nmean                 1.781429e+05       4.435279e+05    2.015998e+03   \nstd                  4.600503e+05       8.163366e+05    6.039949e-02   \nmin                  1.000000e+00       1.000000e+00    2.000000e+03   \n25%                  7.766600e+04       1.882200e+05    2.016000e+03   \n50%                  1.270660e+05       3.211610e+05    2.016000e+03   \n75%                  2.040000e+05       5.140720e+05    2.016000e+03   \nmax                  2.553212e+08       3.196225e+08    2.016000e+03   \n\n       landtaxvaluedollarcnt     taxamount  taxdelinquencyyear  \\\ncount           2.925291e+06  2.962465e+06        56517.000000   \nmean            2.684558e+05  5.408949e+03           13.891696   \nstd             4.865097e+05  9.675567e+03            2.562172   \nmin             1.000000e+00  2.400000e-01            0.000000   \n25%             7.970000e+04  2.468620e+03           14.000000   \n50%             1.766190e+05  4.007620e+03           14.000000   \n75%             3.261000e+05  6.230500e+03           15.000000   \nmax             9.401108e+07  3.823176e+06           99.000000   \n\n       censustractandblock  \ncount         2.910232e+06  \nmean          6.048434e+13  \nstd           3.249133e+11  \nmin          -1.000000e+00  \n25%           6.037400e+13  \n50%           6.037572e+13  \n75%           6.059042e+13  \nmax           4.830301e+14  \n\n[8 rows x 53 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>parcelid</th>\n      <th>airconditioningtypeid</th>\n      <th>architecturalstyletypeid</th>\n      <th>basementsqft</th>\n      <th>bathroomcnt</th>\n      <th>bedroomcnt</th>\n      <th>buildingclasstypeid</th>\n      <th>buildingqualitytypeid</th>\n      <th>calculatedbathnbr</th>\n      <th>decktypeid</th>\n      <th>...</th>\n      <th>yardbuildingsqft26</th>\n      <th>yearbuilt</th>\n      <th>numberofstories</th>\n      <th>structuretaxvaluedollarcnt</th>\n      <th>taxvaluedollarcnt</th>\n      <th>assessmentyear</th>\n      <th>landtaxvaluedollarcnt</th>\n      <th>taxamount</th>\n      <th>taxdelinquencyyear</th>\n      <th>censustractandblock</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>2.985217e+06</td>\n      <td>815362.000000</td>\n      <td>6061.000000</td>\n      <td>1627.000000</td>\n      <td>2.982260e+06</td>\n      <td>2.982272e+06</td>\n      <td>12731.000000</td>\n      <td>1.941395e+06</td>\n      <td>2.868061e+06</td>\n      <td>17379.0</td>\n      <td>...</td>\n      <td>2646.000000</td>\n      <td>2.937384e+06</td>\n      <td>685676.000000</td>\n      <td>2.938753e+06</td>\n      <td>2.950951e+06</td>\n      <td>2.982284e+06</td>\n      <td>2.925291e+06</td>\n      <td>2.962465e+06</td>\n      <td>56517.000000</td>\n      <td>2.910232e+06</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.332586e+07</td>\n      <td>1.945723</td>\n      <td>7.202607</td>\n      <td>647.220652</td>\n      <td>2.216196e+00</td>\n      <td>3.093362e+00</td>\n      <td>3.734742</td>\n      <td>6.280822e+00</td>\n      <td>2.303826e+00</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>278.365457</td>\n      <td>1.964438e+03</td>\n      <td>1.400956</td>\n      <td>1.781429e+05</td>\n      <td>4.435279e+05</td>\n      <td>2.015998e+03</td>\n      <td>2.684558e+05</td>\n      <td>5.408949e+03</td>\n      <td>13.891696</td>\n      <td>6.048434e+13</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.909966e+06</td>\n      <td>3.160507</td>\n      <td>2.436290</td>\n      <td>538.787104</td>\n      <td>1.078250e+00</td>\n      <td>1.271569e+00</td>\n      <td>0.500371</td>\n      <td>1.729923e+00</td>\n      <td>1.003243e+00</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>369.784399</td>\n      <td>2.364428e+01</td>\n      <td>0.539056</td>\n      <td>4.600503e+05</td>\n      <td>8.163366e+05</td>\n      <td>6.039949e-02</td>\n      <td>4.865097e+05</td>\n      <td>9.675567e+03</td>\n      <td>2.562172</td>\n      <td>3.249133e+11</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.071172e+07</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>20.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>1.000000</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>10.000000</td>\n      <td>1.801000e+03</td>\n      <td>1.000000</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>2.000000e+03</td>\n      <td>1.000000e+00</td>\n      <td>2.400000e-01</td>\n      <td>0.000000</td>\n      <td>-1.000000e+00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.164371e+07</td>\n      <td>1.000000</td>\n      <td>7.000000</td>\n      <td>272.000000</td>\n      <td>2.000000e+00</td>\n      <td>2.000000e+00</td>\n      <td>3.000000</td>\n      <td>5.000000e+00</td>\n      <td>2.000000e+00</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>96.000000</td>\n      <td>1.950000e+03</td>\n      <td>1.000000</td>\n      <td>7.766600e+04</td>\n      <td>1.882200e+05</td>\n      <td>2.016000e+03</td>\n      <td>7.970000e+04</td>\n      <td>2.468620e+03</td>\n      <td>14.000000</td>\n      <td>6.037400e+13</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.254509e+07</td>\n      <td>1.000000</td>\n      <td>7.000000</td>\n      <td>535.000000</td>\n      <td>2.000000e+00</td>\n      <td>3.000000e+00</td>\n      <td>4.000000</td>\n      <td>6.000000e+00</td>\n      <td>2.000000e+00</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>168.000000</td>\n      <td>1.963000e+03</td>\n      <td>1.000000</td>\n      <td>1.270660e+05</td>\n      <td>3.211610e+05</td>\n      <td>2.016000e+03</td>\n      <td>1.766190e+05</td>\n      <td>4.007620e+03</td>\n      <td>14.000000</td>\n      <td>6.037572e+13</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.409712e+07</td>\n      <td>1.000000</td>\n      <td>7.000000</td>\n      <td>847.500000</td>\n      <td>3.000000e+00</td>\n      <td>4.000000e+00</td>\n      <td>4.000000</td>\n      <td>8.000000e+00</td>\n      <td>3.000000e+00</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>320.000000</td>\n      <td>1.981000e+03</td>\n      <td>2.000000</td>\n      <td>2.040000e+05</td>\n      <td>5.140720e+05</td>\n      <td>2.016000e+03</td>\n      <td>3.261000e+05</td>\n      <td>6.230500e+03</td>\n      <td>15.000000</td>\n      <td>6.059042e+13</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.696019e+08</td>\n      <td>13.000000</td>\n      <td>27.000000</td>\n      <td>8516.000000</td>\n      <td>3.200000e+01</td>\n      <td>2.500000e+01</td>\n      <td>5.000000</td>\n      <td>1.200000e+01</td>\n      <td>3.200000e+01</td>\n      <td>66.0</td>\n      <td>...</td>\n      <td>6141.000000</td>\n      <td>2.016000e+03</td>\n      <td>41.000000</td>\n      <td>2.553212e+08</td>\n      <td>3.196225e+08</td>\n      <td>2.016000e+03</td>\n      <td>9.401108e+07</td>\n      <td>3.823176e+06</td>\n      <td>99.000000</td>\n      <td>4.830301e+14</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 53 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"properties2017.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:59.040907Z","iopub.execute_input":"2024-04-11T03:03:59.041299Z","iopub.status.idle":"2024-04-11T03:03:59.057723Z","shell.execute_reply.started":"2024-04-11T03:03:59.041267Z","shell.execute_reply":"2024-04-11T03:03:59.056217Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2985217 entries, 0 to 2985216\nData columns (total 58 columns):\n #   Column                        Dtype  \n---  ------                        -----  \n 0   parcelid                      int64  \n 1   airconditioningtypeid         float64\n 2   architecturalstyletypeid      float64\n 3   basementsqft                  float64\n 4   bathroomcnt                   float64\n 5   bedroomcnt                    float64\n 6   buildingclasstypeid           float64\n 7   buildingqualitytypeid         float64\n 8   calculatedbathnbr             float64\n 9   decktypeid                    float64\n 10  finishedfloor1squarefeet      float64\n 11  calculatedfinishedsquarefeet  float64\n 12  finishedsquarefeet12          float64\n 13  finishedsquarefeet13          float64\n 14  finishedsquarefeet15          float64\n 15  finishedsquarefeet50          float64\n 16  finishedsquarefeet6           float64\n 17  fips                          float64\n 18  fireplacecnt                  float64\n 19  fullbathcnt                   float64\n 20  garagecarcnt                  float64\n 21  garagetotalsqft               float64\n 22  hashottuborspa                object \n 23  heatingorsystemtypeid         float64\n 24  latitude                      float64\n 25  longitude                     float64\n 26  lotsizesquarefeet             float64\n 27  poolcnt                       float64\n 28  poolsizesum                   float64\n 29  pooltypeid10                  float64\n 30  pooltypeid2                   float64\n 31  pooltypeid7                   float64\n 32  propertycountylandusecode     object \n 33  propertylandusetypeid         float64\n 34  propertyzoningdesc            object \n 35  rawcensustractandblock        float64\n 36  regionidcity                  float64\n 37  regionidcounty                float64\n 38  regionidneighborhood          float64\n 39  regionidzip                   float64\n 40  roomcnt                       float64\n 41  storytypeid                   float64\n 42  threequarterbathnbr           float64\n 43  typeconstructiontypeid        float64\n 44  unitcnt                       float64\n 45  yardbuildingsqft17            float64\n 46  yardbuildingsqft26            float64\n 47  yearbuilt                     float64\n 48  numberofstories               float64\n 49  fireplaceflag                 object \n 50  structuretaxvaluedollarcnt    float64\n 51  taxvaluedollarcnt             float64\n 52  assessmentyear                float64\n 53  landtaxvaluedollarcnt         float64\n 54  taxamount                     float64\n 55  taxdelinquencyflag            object \n 56  taxdelinquencyyear            float64\n 57  censustractandblock           float64\ndtypes: float64(52), int64(1), object(5)\nmemory usage: 1.3+ GB\n","output_type":"stream"}]},{"cell_type":"code","source":"#checking percentage of null values\nproperties2017.isnull().sum()/len(properties2017) * 100","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:59.059972Z","iopub.execute_input":"2024-04-11T03:03:59.060560Z","iopub.status.idle":"2024-04-11T03:03:59.828221Z","shell.execute_reply.started":"2024-04-11T03:03:59.060518Z","shell.execute_reply":"2024-04-11T03:03:59.826942Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"parcelid                         0.000000\nairconditioningtypeid           72.686676\narchitecturalstyletypeid        99.796966\nbasementsqft                    99.945498\nbathroomcnt                      0.099055\nbedroomcnt                       0.098653\nbuildingclasstypeid             99.573532\nbuildingqualitytypeid           34.966369\ncalculatedbathnbr                3.924539\ndecktypeid                      99.417831\nfinishedfloor1squarefeet        93.174433\ncalculatedfinishedsquarefeet     1.510677\nfinishedsquarefeet12             8.858016\nfinishedsquarefeet13            99.743034\nfinishedsquarefeet15            93.629106\nfinishedsquarefeet50            93.174433\nfinishedsquarefeet6             99.280387\nfips                             0.098217\nfireplacecnt                    89.510846\nfullbathcnt                      3.924539\ngaragecarcnt                    70.152656\ngaragetotalsqft                 70.152656\nhashottuborspa                  98.323003\nheatingorsystemtypeid           37.385992\nlatitude                         0.098217\nlongitude                        0.098217\nlotsizesquarefeet                9.135215\npoolcnt                         81.923190\npoolsizesum                     99.063452\npooltypeid10                    99.430326\npooltypeid2                     98.892677\npooltypeid7                     83.053326\npropertycountylandusecode        0.100462\npropertylandusetypeid            0.098217\npropertyzoningdesc              33.590389\nrawcensustractandblock           0.098217\nregionidcity                     2.081189\nregionidcounty                   0.098217\nregionidneighborhood            61.251025\nregionidzip                      0.425899\nroomcnt                          0.099457\nstorytypeid                     99.945632\nthreequarterbathnbr             89.402546\ntypeconstructiontypeid          99.774020\nunitcnt                         33.638258\nyardbuildingsqft17              97.266932\nyardbuildingsqft26              99.911363\nyearbuilt                        1.602329\nnumberofstories                 77.030950\nfireplaceflag                   99.827048\nstructuretaxvaluedollarcnt       1.556470\ntaxvaluedollarcnt                1.147856\nassessmentyear                   0.098251\nlandtaxvaluedollarcnt            2.007425\ntaxamount                        0.762156\ntaxdelinquencyflag              98.106838\ntaxdelinquencyyear              98.106771\ncensustractandblock              2.511878\ndtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train2016.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:04:05.109008Z","iopub.execute_input":"2024-04-11T04:04:05.109487Z","iopub.status.idle":"2024-04-11T04:04:05.121844Z","shell.execute_reply.started":"2024-04-11T04:04:05.109453Z","shell.execute_reply":"2024-04-11T04:04:05.120551Z"},"trusted":true},"execution_count":98,"outputs":[{"execution_count":98,"output_type":"execute_result","data":{"text/plain":"   parcelid  logerror transactiondate\n0  11016594    0.0276      2016-01-01\n1  14366692   -0.1684      2016-01-01\n2  12098116   -0.0040      2016-01-01\n3  12643413    0.0218      2016-01-02\n4  14432541   -0.0050      2016-01-02","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>parcelid</th>\n      <th>logerror</th>\n      <th>transactiondate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>11016594</td>\n      <td>0.0276</td>\n      <td>2016-01-01</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14366692</td>\n      <td>-0.1684</td>\n      <td>2016-01-01</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12098116</td>\n      <td>-0.0040</td>\n      <td>2016-01-01</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12643413</td>\n      <td>0.0218</td>\n      <td>2016-01-02</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>14432541</td>\n      <td>-0.0050</td>\n      <td>2016-01-02</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"len(train2016)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:34:50.538591Z","iopub.execute_input":"2024-04-11T04:34:50.539034Z","iopub.status.idle":"2024-04-11T04:34:50.547437Z","shell.execute_reply.started":"2024-04-11T04:34:50.539006Z","shell.execute_reply":"2024-04-11T04:34:50.545679Z"},"trusted":true},"execution_count":119,"outputs":[{"execution_count":119,"output_type":"execute_result","data":{"text/plain":"90275"},"metadata":{}}]},{"cell_type":"code","source":"train2017.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:59.848472Z","iopub.execute_input":"2024-04-11T03:03:59.848880Z","iopub.status.idle":"2024-04-11T03:03:59.862621Z","shell.execute_reply.started":"2024-04-11T03:03:59.848848Z","shell.execute_reply":"2024-04-11T03:03:59.861165Z"},"trusted":true},"execution_count":50,"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"   parcelid  logerror transactiondate\n0  14297519  0.025595      2017-01-01\n1  17052889  0.055619      2017-01-01\n2  14186244  0.005383      2017-01-01\n3  12177905 -0.103410      2017-01-01\n4  10887214  0.006940      2017-01-01","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>parcelid</th>\n      <th>logerror</th>\n      <th>transactiondate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>14297519</td>\n      <td>0.025595</td>\n      <td>2017-01-01</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>17052889</td>\n      <td>0.055619</td>\n      <td>2017-01-01</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>14186244</td>\n      <td>0.005383</td>\n      <td>2017-01-01</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12177905</td>\n      <td>-0.103410</td>\n      <td>2017-01-01</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10887214</td>\n      <td>0.006940</td>\n      <td>2017-01-01</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"len(train2017)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:34:58.723733Z","iopub.execute_input":"2024-04-11T04:34:58.724171Z","iopub.status.idle":"2024-04-11T04:34:58.733522Z","shell.execute_reply.started":"2024-04-11T04:34:58.724143Z","shell.execute_reply":"2024-04-11T04:34:58.731628Z"},"trusted":true},"execution_count":120,"outputs":[{"execution_count":120,"output_type":"execute_result","data":{"text/plain":"77613"},"metadata":{}}]},{"cell_type":"code","source":"# Let us add date features as it is important for analysis. \ndef add_date_features(df):\n    df[\"transaction_year\"] = df[\"transactiondate\"].dt.year\n    df[\"transaction_month\"] = (df[\"transactiondate\"].dt.year - 2016)*12 + df[\"transactiondate\"].dt.month\n    df[\"transaction_day\"] = df[\"transactiondate\"].dt.day\n    df[\"transaction_quarter\"] = (df[\"transactiondate\"].dt.year - 2016)*4 +df[\"transactiondate\"].dt.quarter\n    df.drop([\"transactiondate\"], inplace=True, axis=1)\n    return df\n\ntrain2016 = add_date_features(train2016)\ntrain2017 = add_date_features(train2017)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Merge Train with Properties ...')\ntrain2016 = pd.merge(train2016, properties2016, how = 'left', on = 'parcelid')\ntrain2017 = pd.merge(train2017, properties2017, how = 'left', on = 'parcelid')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Concat Train 2016 & 2017 ...')\ntrain_df = pd.concat([train2016, train2017], axis = 0)\ntest_df = pd.merge(sample_submission[['ParcelId']], properties2016.rename(columns = {'parcelid': 'ParcelId'}), how = 'left', on = 'ParcelId')\n\ndel properties2016, properties2017, train2016, train2017\ngc.collect();","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Lets check the records of properties dataset for 2017 record","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:03:59.864372Z","iopub.execute_input":"2024-04-11T03:03:59.864784Z","iopub.status.idle":"2024-04-11T03:03:59.872398Z","shell.execute_reply.started":"2024-04-11T03:03:59.864754Z","shell.execute_reply":"2024-04-11T03:03:59.871242Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"ulimit = np.percentile(train_df.logerror.values, 99) \nllimit = np.percentile(train_df.logerror.values, 1) \ntrain_df['logerror'].loc[train_df['logerror'] > ulimit] = ulimit\ntrain_df['logerror'].loc[train_df['logerror'] < llimit] = llimit\nsns.histplot(train2016['logerror'],bins=50)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:09:02.780212Z","iopub.execute_input":"2024-04-11T04:09:02.781752Z","iopub.status.idle":"2024-04-11T04:09:03.223546Z","shell.execute_reply.started":"2024-04-11T04:09:02.781689Z","shell.execute_reply":"2024-04-11T04:09:03.222526Z"},"trusted":true},"execution_count":104,"outputs":[{"execution_count":104,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='logerror', ylabel='Count'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize = (12,12))\nsns.jointplot(x = train_df.latitude.values, y = train_df.longitude.values, size = 10)\nplt.ylabel('Longitude', fontsize = 12)\nplt.xlabel('Latitude', fontsize = 12)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:17:29.833323Z","iopub.execute_input":"2024-04-11T04:17:29.834557Z","iopub.status.idle":"2024-04-11T04:18:47.518003Z","shell.execute_reply.started":"2024-04-11T04:17:29.834511Z","shell.execute_reply":"2024-04-11T04:18:47.516403Z"},"trusted":true},"execution_count":110,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1200 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 3 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from ydata_profiling import ProfileReport","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:18:47.520248Z","iopub.execute_input":"2024-04-11T04:18:47.520813Z","iopub.status.idle":"2024-04-11T04:18:53.638650Z","shell.execute_reply.started":"2024-04-11T04:18:47.520779Z","shell.execute_reply":"2024-04-11T04:18:53.637284Z"},"trusted":true},"execution_count":111,"outputs":[]},{"cell_type":"code","source":"profile = ProfileReport(train_df, title=\"Profiling Report\")","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:36:13.926426Z","iopub.execute_input":"2024-04-11T04:36:13.926933Z","iopub.status.idle":"2024-04-11T04:36:13.950462Z","shell.execute_reply.started":"2024-04-11T04:36:13.926902Z","shell.execute_reply":"2024-04-11T04:36:13.948818Z"},"trusted":true},"execution_count":121,"outputs":[]},{"cell_type":"code","source":"profile.to_widgets()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:36:14.909261Z","iopub.execute_input":"2024-04-11T04:36:14.909694Z"},"trusted":true},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Summarize dataset:   0%|          | 0/5 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a525efeabdfc4c3dafc54a2643fc62f1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generate report structure:   0%|          | 0/1 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b74b8ab453254ba88832a8ad7c6d60ba"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Render widgets:   0%|          | 0/1 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0fe69aef995141d7bb123955250cc740"}},"metadata":{}}]},{"cell_type":"code","source":"profile.to_notebook_iframe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:13.578140Z","iopub.execute_input":"2024-04-11T03:06:13.579732Z","iopub.status.idle":"2024-04-11T03:06:13.640723Z","shell.execute_reply.started":"2024-04-11T03:06:13.579670Z","shell.execute_reply":"2024-04-11T03:06:13.639056Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"print('Tax Features 2017  ...')\ntrain2017.iloc[:, train2017.columns.str.startswith('tax')] = np.nan","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:14.798916Z","iopub.execute_input":"2024-04-11T03:06:14.799361Z","iopub.status.idle":"2024-04-11T03:06:14.807106Z","shell.execute_reply.started":"2024-04-11T03:06:14.799328Z","shell.execute_reply":"2024-04-11T03:06:14.805521Z"},"trusted":true},"execution_count":54,"outputs":[{"name":"stdout","text":"Tax Features 2017  ...\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:16.258844Z","iopub.execute_input":"2024-04-11T03:06:16.259578Z","iopub.status.idle":"2024-04-11T03:06:20.105095Z","shell.execute_reply.started":"2024-04-11T03:06:16.259536Z","shell.execute_reply":"2024-04-11T03:06:20.103645Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stdout","text":"Merge Train with Properties ...\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:34.899226Z","iopub.execute_input":"2024-04-11T03:06:34.901352Z","iopub.status.idle":"2024-04-11T03:06:41.155361Z","shell.execute_reply.started":"2024-04-11T03:06:34.901238Z","shell.execute_reply":"2024-04-11T03:06:41.153778Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"Concat Train 2016 & 2017 ...\n","output_type":"stream"}]},{"cell_type":"code","source":"print('Remove missing data fields ...')\n\nmissing_perc_thresh = 0.98\nexclude_missing = []\nnum_rows = train_df.shape[0]\nfor c in train_df.columns:\n    num_missing = train_df[c].isnull().sum()\n    if num_missing == 0:\n        continue\n    missing_frac = num_missing / float(num_rows)\n    if missing_frac > missing_perc_thresh:\n        exclude_missing.append(c)\nprint(\"We exclude: %s\" % len(exclude_missing))","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:41.157563Z","iopub.execute_input":"2024-04-11T03:06:41.157938Z","iopub.status.idle":"2024-04-11T03:06:41.271823Z","shell.execute_reply.started":"2024-04-11T03:06:41.157910Z","shell.execute_reply":"2024-04-11T03:06:41.270499Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stdout","text":"Remove missing data fields ...\nWe exclude: 13\n","output_type":"stream"}]},{"cell_type":"code","source":"del num_rows, missing_perc_thresh\ngc.collect();","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:41.273500Z","iopub.execute_input":"2024-04-11T03:06:41.274777Z","iopub.status.idle":"2024-04-11T03:06:41.478086Z","shell.execute_reply.started":"2024-04-11T03:06:41.274725Z","shell.execute_reply":"2024-04-11T03:06:41.476642Z"},"trusted":true},"execution_count":58,"outputs":[]},{"cell_type":"code","source":"print (\"Remove features with one unique value !!\")\nexclude_unique = []\nfor c in train_df.columns:\n    num_uniques = len(train_df[c].unique())\n    if train_df[c].isnull().sum() != 0:\n        num_uniques -= 1\n    if num_uniques == 1:\n        exclude_unique.append(c)\nprint(\"We exclude: %s\" % len(exclude_unique))\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:41.482280Z","iopub.execute_input":"2024-04-11T03:06:41.483240Z","iopub.status.idle":"2024-04-11T03:06:41.771267Z","shell.execute_reply.started":"2024-04-11T03:06:41.483169Z","shell.execute_reply":"2024-04-11T03:06:41.769904Z"},"trusted":true},"execution_count":59,"outputs":[{"name":"stdout","text":"Remove features with one unique value !!\nWe exclude: 9\n","output_type":"stream"}]},{"cell_type":"code","source":"print (\"Define training features !!\")\nexclude_other = ['parcelid', 'logerror','propertyzoningdesc']\ntrain_features = []\nfor c in train_df.columns:\n    if c not in exclude_missing \\\n       and c not in exclude_other and c not in exclude_unique:\n        train_features.append(c)\nprint(\"We use these for training: %s\" % len(train_features))","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:41.774137Z","iopub.execute_input":"2024-04-11T03:06:41.774606Z","iopub.status.idle":"2024-04-11T03:06:41.783758Z","shell.execute_reply.started":"2024-04-11T03:06:41.774573Z","shell.execute_reply":"2024-04-11T03:06:41.782168Z"},"trusted":true},"execution_count":60,"outputs":[{"name":"stdout","text":"Define training features !!\nWe use these for training: 43\n","output_type":"stream"}]},{"cell_type":"code","source":"print (\"Define categorial features !!\")\ncat_feature_inds = []\ncat_unique_thresh = 1000\nfor i, c in enumerate(train_features):\n    num_uniques = len(train_df[c].unique())\n    if num_uniques < cat_unique_thresh \\\n       and not 'sqft' in c \\\n       and not 'cnt' in c \\\n       and not 'nbr' in c \\\n       and not 'number' in c:\n        cat_feature_inds.append(i)\n        \nprint(\"Cat features are: %s\" % [train_features[ind] for ind in cat_feature_inds])","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:41.786366Z","iopub.execute_input":"2024-04-11T03:06:41.787258Z","iopub.status.idle":"2024-04-11T03:06:41.938992Z","shell.execute_reply.started":"2024-04-11T03:06:41.787190Z","shell.execute_reply":"2024-04-11T03:06:41.937685Z"},"trusted":true},"execution_count":61,"outputs":[{"name":"stdout","text":"Define categorial features !!\nCat features are: ['transaction_year', 'transaction_month', 'transaction_day', 'transaction_quarter', 'airconditioningtypeid', 'buildingqualitytypeid', 'fips', 'heatingorsystemtypeid', 'propertycountylandusecode', 'propertylandusetypeid', 'regionidcity', 'regionidcounty', 'regionidneighborhood', 'regionidzip', 'yearbuilt', 'assessmentyear', 'taxdelinquencyyear']\n","output_type":"stream"}]},{"cell_type":"code","source":"\nprint (\"Replacing NaN values by -999 !!\")\ntrain_df.fillna(-999, inplace=True)\ntest_df.fillna(-999, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:41.940483Z","iopub.execute_input":"2024-04-11T03:06:41.940851Z","iopub.status.idle":"2024-04-11T03:06:51.396652Z","shell.execute_reply.started":"2024-04-11T03:06:41.940813Z","shell.execute_reply":"2024-04-11T03:06:51.395275Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"Replacing NaN values by -999 !!\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## STEP 3 : Model training and Evaluation","metadata":{}},{"cell_type":"code","source":"print (\"Training time !!\")\nX_train = train_df[train_features]\ny_train = train_df.logerror\nprint(X_train.shape, y_train.shape)\n\ntest_df['transactiondate'] = pd.Timestamp('2016-12-01') \ntest_df = add_date_features(test_df)\nX_test = test_df[train_features]\nprint(X_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:06:51.398280Z","iopub.execute_input":"2024-04-11T03:06:51.398717Z","iopub.status.idle":"2024-04-11T03:06:53.652919Z","shell.execute_reply.started":"2024-04-11T03:06:51.398680Z","shell.execute_reply":"2024-04-11T03:06:53.651385Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stdout","text":"Training time !!\n(167888, 43) (167888,)\n(2985217, 43)\n","output_type":"stream"}]},{"cell_type":"code","source":"for i in list(X_test.columns):\n    if X_test[i].dtype == 'float64' :\n       X_test[i] = X_test[i].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:20:50.376355Z","iopub.execute_input":"2024-04-11T03:20:50.376799Z","iopub.status.idle":"2024-04-11T03:20:50.995277Z","shell.execute_reply.started":"2024-04-11T03:20:50.376770Z","shell.execute_reply":"2024-04-11T03:20:50.994125Z"},"trusted":true},"execution_count":82,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n/tmp/ipykernel_33/1513844769.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_test[i] = X_test[i].astype(int)\n","output_type":"stream"}]},{"cell_type":"code","source":"for i in list(X_train.columns):\n    if X_train[i].dtype == 'float64' :\n       X_train[i] = X_train[i].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:16:06.381713Z","iopub.execute_input":"2024-04-11T03:16:06.382165Z","iopub.status.idle":"2024-04-11T03:16:06.436951Z","shell.execute_reply.started":"2024-04-11T03:16:06.382135Z","shell.execute_reply":"2024-04-11T03:16:06.435617Z"},"trusted":true},"execution_count":80,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n/tmp/ipykernel_33/4199641212.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X_train[i] = X_train[i].astype(int)\n","output_type":"stream"}]},{"cell_type":"code","source":"num_ensembles = 5\ny_pred = 0.0\nfor i in tqdm(range(num_ensembles)):\n    model = CatBoostRegressor(\n        iterations=630, learning_rate=0.3,\n        depth=6, l2_leaf_reg=3,\n        loss_function='MAE',\n        eval_metric='MAE',\n        random_seed=i)\n    model.fit(\n        X_train, y_train,\n        cat_features=cat_feature_inds)\n    y_pred += model.predict(X_test)\ny_pred /= num_ensembles","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:58:11.077380Z","iopub.execute_input":"2024-04-11T03:58:11.077841Z","iopub.status.idle":"2024-04-11T03:58:24.942722Z","shell.execute_reply.started":"2024-04-11T03:58:11.077809Z","shell.execute_reply":"2024-04-11T03:58:24.940921Z"},"trusted":true},"execution_count":86,"outputs":[{"name":"stderr","text":"  0%|          | 0/5 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"0:\tlearn: 0.0687085\ttotal: 423ms\tremaining: 4m 26s\n1:\tlearn: 0.0686087\ttotal: 780ms\tremaining: 4m 4s\n2:\tlearn: 0.0685569\ttotal: 1.24s\tremaining: 4m 18s\n3:\tlearn: 0.0685008\ttotal: 1.59s\tremaining: 4m 9s\n4:\tlearn: 0.0684539\ttotal: 2.02s\tremaining: 4m 11s\n5:\tlearn: 0.0684141\ttotal: 2.41s\tremaining: 4m 11s\n6:\tlearn: 0.0683863\ttotal: 2.8s\tremaining: 4m 9s\n7:\tlearn: 0.0683586\ttotal: 3.16s\tremaining: 4m 6s\n8:\tlearn: 0.0683343\ttotal: 3.57s\tremaining: 4m 6s\n9:\tlearn: 0.0683096\ttotal: 3.94s\tremaining: 4m 4s\n10:\tlearn: 0.0682629\ttotal: 4.29s\tremaining: 4m 1s\n11:\tlearn: 0.0682471\ttotal: 4.68s\tremaining: 4m 1s\n12:\tlearn: 0.0682276\ttotal: 5.01s\tremaining: 3m 57s\n13:\tlearn: 0.0682113\ttotal: 5.39s\tremaining: 3m 57s\n14:\tlearn: 0.0682023\ttotal: 5.74s\tremaining: 3m 55s\n15:\tlearn: 0.0681898\ttotal: 6.1s\tremaining: 3m 53s\n16:\tlearn: 0.0681598\ttotal: 6.52s\tremaining: 3m 55s\n17:\tlearn: 0.0681489\ttotal: 6.86s\tremaining: 3m 53s\n18:\tlearn: 0.0681318\ttotal: 7.22s\tremaining: 3m 52s\n19:\tlearn: 0.0681216\ttotal: 7.59s\tremaining: 3m 51s\n20:\tlearn: 0.0681141\ttotal: 7.96s\tremaining: 3m 50s\n21:\tlearn: 0.0681096\ttotal: 8.32s\tremaining: 3m 49s\n22:\tlearn: 0.0680924\ttotal: 8.69s\tremaining: 3m 49s\n23:\tlearn: 0.0680874\ttotal: 9.04s\tremaining: 3m 48s\n24:\tlearn: 0.0680799\ttotal: 9.41s\tremaining: 3m 47s\n25:\tlearn: 0.0680662\ttotal: 9.8s\tremaining: 3m 47s\n26:\tlearn: 0.0680496\ttotal: 10.2s\tremaining: 3m 46s\n27:\tlearn: 0.0680360\ttotal: 10.5s\tremaining: 3m 45s\n28:\tlearn: 0.0680295\ttotal: 11s\tremaining: 3m 47s\n29:\tlearn: 0.0680189\ttotal: 11.6s\tremaining: 3m 51s\n30:\tlearn: 0.0680044\ttotal: 12.1s\tremaining: 3m 53s\n","output_type":"stream"},{"name":"stderr","text":"  0%|          | 0/5 [00:13<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"31:\tlearn: 0.0679862\ttotal: 12.6s\tremaining: 3m 55s\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[86], line 10\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m tqdm(\u001b[38;5;28mrange\u001b[39m(num_ensembles)):\n\u001b[1;32m      4\u001b[0m     model \u001b[38;5;241m=\u001b[39m CatBoostRegressor(\n\u001b[1;32m      5\u001b[0m         iterations\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m630\u001b[39m, learning_rate\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.3\u001b[39m,\n\u001b[1;32m      6\u001b[0m         depth\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m6\u001b[39m, l2_leaf_reg\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m3\u001b[39m,\n\u001b[1;32m      7\u001b[0m         loss_function\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMAE\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m      8\u001b[0m         eval_metric\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMAE\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m      9\u001b[0m         random_seed\u001b[38;5;241m=\u001b[39mi)\n\u001b[0;32m---> 10\u001b[0m     \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m     11\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     12\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcat_features\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcat_feature_inds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     13\u001b[0m     y_pred \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mpredict(X_test)\n\u001b[1;32m     14\u001b[0m y_pred \u001b[38;5;241m/\u001b[39m\u001b[38;5;241m=\u001b[39m num_ensembles\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/catboost/core.py:5807\u001b[0m, in \u001b[0;36mCatBoostRegressor.fit\u001b[0;34m(self, X, y, cat_features, text_features, embedding_features, sample_weight, baseline, use_best_model, eval_set, verbose, logging_level, plot, plot_file, column_description, verbose_eval, metric_period, silent, early_stopping_rounds, save_snapshot, snapshot_file, snapshot_interval, init_model, callbacks, log_cout, log_cerr)\u001b[0m\n\u001b[1;32m   5804\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mloss_function\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;129;01min\u001b[39;00m params:\n\u001b[1;32m   5805\u001b[0m     CatBoostRegressor\u001b[38;5;241m.\u001b[39m_check_is_compatible_loss(params[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mloss_function\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[0;32m-> 5807\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcat_features\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtext_features\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43membedding_features\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbaseline\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5808\u001b[0m \u001b[43m                 \u001b[49m\u001b[43muse_best_model\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43meval_set\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mverbose\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlogging_level\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mplot\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mplot_file\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumn_description\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5809\u001b[0m \u001b[43m                 \u001b[49m\u001b[43mverbose_eval\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmetric_period\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msilent\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mearly_stopping_rounds\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5810\u001b[0m \u001b[43m                 \u001b[49m\u001b[43msave_snapshot\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msnapshot_file\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msnapshot_interval\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minit_model\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcallbacks\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlog_cout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlog_cerr\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/catboost/core.py:2396\u001b[0m, in \u001b[0;36mCatBoost._fit\u001b[0;34m(self, X, y, cat_features, text_features, embedding_features, pairs, sample_weight, group_id, group_weight, subgroup_id, pairs_weight, baseline, use_best_model, eval_set, verbose, logging_level, plot, plot_file, column_description, verbose_eval, metric_period, silent, early_stopping_rounds, save_snapshot, snapshot_file, snapshot_interval, init_model, callbacks, log_cout, log_cerr)\u001b[0m\n\u001b[1;32m   2393\u001b[0m allow_clear_pool \u001b[38;5;241m=\u001b[39m train_params[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mallow_clear_pool\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m   2395\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m plot_wrapper(plot, plot_file, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTraining plots\u001b[39m\u001b[38;5;124m'\u001b[39m, [_get_train_dir(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_params())]):\n\u001b[0;32m-> 2396\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_train\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2397\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrain_pool\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2398\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrain_params\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43meval_sets\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2399\u001b[0m \u001b[43m        \u001b[49m\u001b[43mparams\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2400\u001b[0m \u001b[43m        \u001b[49m\u001b[43mallow_clear_pool\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2401\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrain_params\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43minit_model\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[1;32m   2402\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2404\u001b[0m \u001b[38;5;66;03m# Have property feature_importance possibly set\u001b[39;00m\n\u001b[1;32m   2405\u001b[0m loss \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_object\u001b[38;5;241m.\u001b[39m_get_loss_function_name()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/catboost/core.py:1776\u001b[0m, in \u001b[0;36m_CatBoostBase._train\u001b[0;34m(self, train_pool, test_pool, params, allow_clear_pool, init_model)\u001b[0m\n\u001b[1;32m   1775\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_train\u001b[39m(\u001b[38;5;28mself\u001b[39m, train_pool, test_pool, params, allow_clear_pool, init_model):\n\u001b[0;32m-> 1776\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_object\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_train\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_pool\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest_pool\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparams\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mallow_clear_pool\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minit_model\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_object\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43minit_model\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m   1777\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_set_trained_model_attributes()\n","File \u001b[0;32m_catboost.pyx:4833\u001b[0m, in \u001b[0;36m_catboost._CatBoost._train\u001b[0;34m()\u001b[0m\n","File \u001b[0;32m_catboost.pyx:4882\u001b[0m, in \u001b[0;36m_catboost._CatBoost._train\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"import xgboost as xgb\nxgb_params = {\n    'eta': 0.05,\n    'max_depth': 8,\n    'subsample': 0.7,\n    'colsample_bytree': 0.7,\n    'objective': 'reg:linear',\n    'silent': 1,\n    'seed' : 0\n}\ndtrain = xgb.DMatrix(train_df, train_y, feature_names = train_df.columns.values)\nmodel = xgb.train(dict(xgb_params, silent = 0), dtrain, num_boost_round = 50)\n\n# plot the important features # \nfig, ax = plt.subplots(figsize = (12,18))\nxgb.plot_importance(model, max_num_features = 50, height = 0.8, ax = ax)\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## STEP 5 : Submission","metadata":{}},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'ParcelId': test_df['ParcelId'],\n})\ntest_dates = {\n    '201610': pd.Timestamp('2016-09-30'),\n    '201611': pd.Timestamp('2016-10-31'),\n    '201612': pd.Timestamp('2016-11-30'),\n    '201710': pd.Timestamp('2017-09-30'),\n    '201711': pd.Timestamp('2017-10-31'),\n    '201712': pd.Timestamp('2017-11-30')\n}\nfor label, test_date in test_dates.items():\n    print(\"Predicting for: %s ... \" % (label))\n    submission[label] = y_pred\n    \nsubmission.to_csv('submission.csv', float_format='%.6f',index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T03:52:40.037525Z","iopub.execute_input":"2024-04-11T03:52:40.038043Z","iopub.status.idle":"2024-04-11T03:53:16.792894Z","shell.execute_reply.started":"2024-04-11T03:52:40.038005Z","shell.execute_reply":"2024-04-11T03:53:16.791780Z"},"trusted":true},"execution_count":84,"outputs":[{"name":"stdout","text":"Predicting for: 201610 ... \nPredicting for: 201611 ... \nPredicting for: 201612 ... \nPredicting for: 201710 ... \nPredicting for: 201711 ... \nPredicting for: 201712 ... \n","output_type":"stream"}]},{"cell_type":"code","source":"test_dates.items()","metadata":{"execution":{"iopub.status.busy":"2024-04-11T04:29:38.750567Z","iopub.status.idle":"2024-04-11T04:29:38.750946Z","shell.execute_reply.started":"2024-04-11T04:29:38.750768Z","shell.execute_reply":"2024-04-11T04:29:38.750784Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}